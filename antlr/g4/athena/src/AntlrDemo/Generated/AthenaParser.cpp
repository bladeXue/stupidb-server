
// Generated from AthenaParser.g4 by ANTLR 4.12.0


#include "AthenaParserListener.h"

#include "AthenaParser.h"


using namespace antlrcpp;
using namespace AntlrDemo.Generated;

using namespace antlr4;

namespace {

struct AthenaParserStaticData final {
  AthenaParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  AthenaParserStaticData(const AthenaParserStaticData&) = delete;
  AthenaParserStaticData(AthenaParserStaticData&&) = delete;
  AthenaParserStaticData& operator=(const AthenaParserStaticData&) = delete;
  AthenaParserStaticData& operator=(AthenaParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag athenaparserParserOnceFlag;
AthenaParserStaticData *athenaparserParserStaticData = nullptr;

void athenaparserParserInitialize() {
  assert(athenaparserParserStaticData == nullptr);
  auto staticData = std::make_unique<AthenaParserStaticData>(
    std::vector<std::string>{
      "stmt", "command", "ddl_command", "dml_command", "select", "select_statement", 
      "all_distinct", "order_item", "from_item", "count", "with_query", 
      "grouping_element", "condition", "insert_into", "value_list", "select_list", 
      "select_item", "delete_stmt", "update", "merge_into", "search_condition", 
      "when_clauses", "when_not_matched_clause", "expression_list_", "column_list", 
      "when_matched_and_clause", "when_matched_then_clause", "update_delete", 
      "optimize_stmt", "vacuum", "target_table", "source_table", "explain", 
      "explain_option", "prepare", "statement", "execute", "parameter", 
      "value", "deallocate", "unload", "property_list", "property_value", 
      "predicate", "alter_database", "db_schema", "kv_pair", "alter_table_add_cols", 
      "part_col_name_value", "partition_col_name", "partition_col_value", 
      "alter_table_add_part", "alter_table_drop_part", "partition_spec", 
      "alter_table_rename_part", "alter_table_replace_part", "alter_table_set_location", 
      "alter_table_set_props", "create_database", "create_table", "table_comment", 
      "row_format", "table_row_format_field_identifier", "table_row_format_coll_items_identifier", 
      "table_row_format_map_keys_identifier", "table_row_format_lines_identifier", 
      "table_row_null_format", "file_format", "num_buckets", "col_def_with_comment", 
      "col_comment", "create_table_as", "property_name", "prop_exp", "create_view", 
      "describe", "field_name", "describe_view", "drop_database", "drop_table", 
      "drop_view", "msck", "show_columns", "show_create_table", "show_create_view", 
      "show_databases", "show_partitions", "show_tables", "show_tblproperties", 
      "show_views", "query", "true_false", "boolean_expression", "pred", 
      "table_subquery", "comparison_operator", "expression", "case_expression", 
      "when_expression", "primitive_expression", "literal", "int_number", 
      "number", "data_type", "primitive_type", "precision", "scale", "struct_col_def", 
      "col_name", "db_name", "database_name", "statement_name", "table_name", 
      "view_name", "destination_table", "string", "reg_ex", "alias", "target_alias", 
      "source_alias", "id_", "if_not_exists", "if_exists", "or_replace", 
      "from_in"
    },
    std::vector<std::string>{
      "", "'ADD'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", 
      "'AS'", "'ASC'", "'AVRO'", "'BETWEEN'", "'BIGINT'", "'BIN_PACK'", 
      "'BINARY'", "'BOOLEAN'", "'BUCKETS'", "'BY'", "'CASCADE'", "'CASE'", 
      "'CAST'", "'CHAR'", "'CLUSTERED'", "'COLLECTION'", "'COLUMNS'", "'COMMENT'", 
      "'CREATE'", "'DATA'", "'DATABASE'", "'DATABASES'", "'DATE'", "'DBPROPERTIES'", 
      "'DEALLOCATE'", "'DECIMAL'", "'DEFINED'", "'DELETE'", "'DELIMITED'", 
      "'DESC'", "'DESCRIBE'", "'DISTINCT'", "'DISTRIBUTED'", "'DOUBLE'", 
      "'DROP'", "'ELSE'", "'END'", "'ESCAPED'", "'EXCEPT'", "'EXECUTE'", 
      "'EXISTS'", "'EXPLAIN'", "'EXTENDED'", "'EXTERNAL'", "'FALSE'", "'FIELDS'", 
      "'FIRST'", "'FLOAT'", "'FORMAT'", "'FORMATTED'", "'FROM'", "'GRAPHVIZ'", 
      "'GROUP'", "'HAVING'", "'IF'", "'IN'", "'INPUTFORMAT'", "'INSERT'", 
      "'INT'", "'INTEGER'", "'INTERSECT'", "'INTO'", "'IO'", "'ION'", "'IS'", 
      "'ITEMS'", "'JSON'", "'KEYS'", "'LAST'", "'LIKE'", "'LIMIT'", "'LINES'", 
      "'LOCATION'", "'LOGICAL'", "'MAP'", "'MATCHED'", "'MERGE'", "'MSCK'", 
      "'NO'", "'NOT'", "'NULL'", "'NULLS'", "'OFFSET'", "'ON'", "'OPTIMIZE'", 
      "'OR'", "'ORC'", "'ORDER'", "'OUTPUTFORMAT'", "'PARQUET'", "'PARTITION'", 
      "'PARTITIONED'", "'PARTITIONS'", "'PREPARE'", "'RCFILE'", "'RENAME'", 
      "'REPAIR'", "'REPLACE'", "'RESTRICT'", "'REWRITE'", "'ROW'", "'ROWS'", 
      "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SEQUENCEFILE'", "'SERDE'", 
      "'SERDEPROPERTIES'", "'SET'", "'SHOW'", "'SMALLINT'", "'SOME'", "'STORED'", 
      "'STRING'", "'STRUCT'", "'TABLE'", "'TABLES'", "'TBLPROPERTIES'", 
      "'TERMINATED'", "'TEXT'", "'TEXTFILE'", "'THEN'", "'TIMESTAMP'", "'TINYINT'", 
      "'TO'", "'TRUE'", "'TYPE'", "'UNION'", "'UNLOAD'", "'UPDATE'", "'USING'", 
      "'VACUUM'", "'VALIDATE'", "'VALUES'", "'VARCHAR'", "'VIEW'", "'VIEWS'", 
      "'WHEN'", "'WHERE'", "'WITH'", "'='", "';'", "'('", "')'", "'.'", 
      "','", "'<'", "'>'", "'<='", "'>='", "'<>'", "'!='", "':'", "'\\u003F'", 
      "'*'", "'+'", "'-'", "'/'", "'%'"
    },
    std::vector<std::string>{
      "", "ADD", "ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARRAY", "AS", 
      "ASC", "AVRO", "BETWEEN", "BIGINT", "BIN_PACK", "BINARY", "BOOLEAN", 
      "BUCKETS", "BY", "CASCADE", "CASE", "CAST", "CHAR", "CLUSTERED", "COLLECTION", 
      "COLUMNS", "COMMENT", "CREATE", "DATA", "DATABASE", "DATABASES", "DATE", 
      "DBPROPERTIES", "DEALLOCATE", "DECIMAL", "DEFINED", "DELETE", "DELIMITED", 
      "DESC", "DESCRIBE", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DROP", "ELSE", 
      "END", "ESCAPED", "EXCEPT", "EXECUTE", "EXISTS", "EXPLAIN", "EXTENDED", 
      "EXTERNAL", "FALSE", "FIELDS", "FIRST", "FLOAT", "FORMAT", "FORMATTED", 
      "FROM", "GRAPHVIZ", "GROUP", "HAVING", "IF", "IN", "INPUTFORMAT", 
      "INSERT", "INT", "INTEGER", "INTERSECT", "INTO", "IO", "ION", "IS", 
      "ITEMS", "JSON", "KEYS", "LAST", "LIKE", "LIMIT", "LINES", "LOCATION", 
      "LOGICAL", "MAP", "MATCHED", "MERGE", "MSCK", "NO", "NOT", "NULL_", 
      "NULLS", "OFFSET", "ON", "OPTIMIZE", "OR", "ORC", "ORDER", "OUTPUTFORMAT", 
      "PARQUET", "PARTITION", "PARTITIONED", "PARTITIONS", "PREPARE", "RCFILE", 
      "RENAME", "REPAIR", "REPLACE", "RESTRICT", "REWRITE", "ROW", "ROWS", 
      "SCHEMA", "SCHEMAS", "SELECT", "SEQUENCEFILE", "SERDE", "SERDEPROPERTIES", 
      "SET", "SHOW", "SMALLINT", "SOME", "STORED", "STRING", "STRUCT", "TABLE", 
      "TABLES", "TBLPROPERTIES", "TERMINATED", "TEXT", "TEXTFILE", "THEN", 
      "TIMESTAMP", "TINYINT", "TO", "TRUE", "TYPE", "UNION", "UNLOAD", "UPDATE", 
      "USING", "VACUUM", "VALIDATE", "VALUES", "VARCHAR", "VIEW", "VIEWS", 
      "WHEN", "WHERE", "WITH", "EQ", "SEMI", "LP", "RP", "DOT", "COMMA", 
      "LT", "GT", "LE", "GE", "NE", "BOX", "COLON", "QM", "STAR", "PLUS", 
      "MINUS", "DIVIDE", "MODULE", "IDENTIFIER", "SQ_STRING_LITERAL", "DQ_STRING_LITERAL", 
      "INTEGRAL_LITERAL", "FLOAT_LITERAL", "REAL_LITERAL", "WS", "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,174,1544,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,1,0,1,0,3,0,253,8,0,1,0,1,0,1,1,1,1,3,1,
  	259,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,287,8,2,1,3,1,3,1,3,1,3,
  	1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,301,8,3,1,4,1,4,1,4,1,4,5,4,307,8,
  	4,10,4,12,4,310,9,4,3,4,312,8,4,1,4,1,4,1,5,1,5,3,5,318,8,5,1,5,1,5,1,
  	5,1,5,1,5,5,5,325,8,5,10,5,12,5,328,9,5,3,5,330,8,5,1,5,1,5,3,5,334,8,
  	5,1,5,1,5,1,5,3,5,339,8,5,1,5,1,5,1,5,5,5,344,8,5,10,5,12,5,347,9,5,3,
  	5,349,8,5,1,5,1,5,3,5,353,8,5,1,5,1,5,3,5,357,8,5,1,5,3,5,360,8,5,1,5,
  	1,5,1,5,1,5,1,5,5,5,367,8,5,10,5,12,5,370,9,5,3,5,372,8,5,1,5,1,5,1,5,
  	3,5,377,8,5,3,5,379,8,5,1,5,1,5,1,5,3,5,384,8,5,3,5,386,8,5,1,6,1,6,1,
  	7,1,7,3,7,392,8,7,1,7,1,7,3,7,396,8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	3,13,419,8,13,1,13,1,13,1,13,1,13,1,13,5,13,426,8,13,10,13,12,13,429,
  	9,13,3,13,431,8,13,1,14,1,14,1,14,1,14,5,14,437,8,14,10,14,12,14,440,
  	9,14,1,14,1,14,1,15,1,15,1,15,5,15,447,8,15,10,15,12,15,450,9,15,1,16,
  	1,16,3,16,454,8,16,1,16,3,16,457,8,16,1,16,1,16,1,16,3,16,462,8,16,1,
  	16,3,16,465,8,16,1,17,1,17,1,17,1,17,1,17,3,17,472,8,17,1,17,1,17,1,17,
  	3,17,477,8,17,1,18,1,18,1,18,1,18,3,18,483,8,18,1,18,1,18,1,18,1,18,1,
  	18,1,18,1,18,1,18,1,18,1,18,5,18,495,8,18,10,18,12,18,498,9,18,1,18,1,
  	18,3,18,502,8,18,1,19,1,19,1,19,1,19,3,19,508,8,19,1,19,3,19,511,8,19,
  	1,19,1,19,1,19,3,19,516,8,19,1,19,3,19,519,8,19,1,19,3,19,522,8,19,1,
  	19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,5,21,532,8,21,10,21,12,21,535,9,
  	21,1,21,3,21,538,8,21,1,22,1,22,1,22,1,22,1,22,3,22,545,8,22,1,22,1,22,
  	1,22,3,22,550,8,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,5,23,560,8,
  	23,10,23,12,23,563,9,23,1,24,1,24,1,24,5,24,568,8,24,10,24,12,24,571,
  	9,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,596,8,27,10,27,
  	12,27,599,9,27,1,27,1,27,1,27,3,27,604,8,27,1,28,1,28,1,28,1,28,3,28,
  	610,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,619,8,28,1,29,1,29,1,
  	29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,5,32,634,8,32,10,
  	32,12,32,637,9,32,1,32,1,32,3,32,641,8,32,1,32,1,32,1,32,1,32,1,32,1,
  	32,3,32,649,8,32,1,32,3,32,652,8,32,1,33,1,33,1,33,1,33,3,33,658,8,33,
  	1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,3,35,669,8,35,1,36,1,36,
  	1,36,1,36,1,36,1,36,5,36,677,8,36,10,36,12,36,680,9,36,3,36,682,8,36,
  	1,37,1,37,1,38,1,38,1,38,3,38,689,8,38,1,39,1,39,1,39,1,39,1,40,1,40,
  	1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,
  	1,41,1,41,1,41,5,41,714,8,41,10,41,12,41,717,9,41,1,42,1,42,1,43,1,43,
  	3,43,723,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,734,8,
  	44,10,44,12,44,737,9,44,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,46,3,46,
  	747,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,5,47,757,8,47,10,47,
  	12,47,760,9,47,1,47,1,47,3,47,764,8,47,1,47,1,47,1,47,1,47,1,47,1,48,
  	1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,3,51,784,
  	8,51,1,51,1,51,1,51,1,51,1,51,5,51,791,8,51,10,51,12,51,794,9,51,1,51,
  	1,51,1,51,3,51,799,8,51,4,51,801,8,51,11,51,12,51,802,1,52,1,52,1,52,
  	1,52,1,52,3,52,810,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
  	1,52,5,52,822,8,52,10,52,12,52,825,9,52,1,53,1,53,1,53,5,53,830,8,53,
  	10,53,12,53,833,9,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
  	1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,853,8,55,10,55,12,55,856,
  	9,55,1,55,1,55,3,55,860,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
  	1,55,5,55,871,8,55,10,55,12,55,874,9,55,1,55,1,55,1,56,1,56,1,56,1,56,
  	1,56,1,56,1,56,1,56,3,56,886,8,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,
  	1,57,1,57,1,57,1,57,1,57,1,57,5,57,901,8,57,10,57,12,57,904,9,57,1,57,
  	1,57,1,58,1,58,1,58,3,58,911,8,58,1,58,1,58,1,58,3,58,916,8,58,1,58,1,
  	58,3,58,920,8,58,1,58,1,58,1,58,1,58,1,58,1,58,5,58,928,8,58,10,58,12,
  	58,931,9,58,1,58,1,58,3,58,935,8,58,1,59,1,59,1,59,1,59,3,59,941,8,59,
  	1,59,1,59,1,59,3,59,946,8,59,1,59,1,59,1,59,1,59,1,59,5,59,953,8,59,10,
  	59,12,59,956,9,59,1,59,1,59,3,59,960,8,59,1,59,1,59,3,59,964,8,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,5,59,972,8,59,10,59,12,59,975,9,59,1,59,1,59,
  	3,59,979,8,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,987,8,59,10,59,12,59,
  	990,9,59,1,59,1,59,1,59,1,59,1,59,3,59,997,8,59,1,59,1,59,1,59,3,59,1002,
  	8,59,1,59,1,59,1,59,3,59,1007,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
  	3,59,1016,8,59,1,60,1,60,1,61,1,61,3,61,1022,8,61,1,61,3,61,1025,8,61,
  	1,61,3,61,1028,8,61,1,61,3,61,1031,8,61,1,61,3,61,1034,8,61,1,61,1,61,
  	1,61,1,61,1,61,1,61,1,61,1,61,3,61,1044,8,61,3,61,1046,8,61,1,62,1,62,
  	1,62,1,62,1,62,1,62,1,62,3,62,1055,8,62,1,63,1,63,1,63,1,63,1,63,1,63,
  	1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,
  	1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
  	3,67,1091,8,67,1,68,1,68,1,69,1,69,1,69,1,69,3,69,1099,8,69,1,70,1,70,
  	1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,1111,8,71,10,71,12,71,1114,
  	9,71,1,71,1,71,3,71,1118,8,71,1,71,1,71,1,71,1,71,3,71,1124,8,71,1,71,
  	3,71,1127,8,71,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,3,74,1137,8,74,
  	1,74,1,74,1,74,1,74,1,74,1,75,1,75,3,75,1146,8,75,1,75,1,75,1,75,3,75,
  	1151,8,75,1,75,1,75,1,75,3,75,1156,8,75,1,76,1,76,1,77,1,77,3,77,1162,
  	8,77,1,78,1,78,1,78,3,78,1167,8,78,1,78,1,78,3,78,1171,8,78,1,79,1,79,
  	1,79,3,79,1176,8,79,1,79,1,79,1,80,1,80,1,80,3,80,1183,8,80,1,80,1,80,
  	1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
  	1,82,1,82,1,82,1,82,1,82,3,82,1206,8,82,3,82,1208,8,82,1,83,1,83,1,83,
  	1,83,1,83,1,83,3,83,1216,8,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,85,
  	1,85,1,85,1,85,3,85,1229,8,85,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,
  	3,87,1239,8,87,1,87,3,87,1242,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
  	3,88,1251,8,88,1,89,1,89,1,89,1,89,3,89,1257,8,89,1,89,1,89,3,89,1261,
  	8,89,1,90,1,90,1,91,1,91,1,92,1,92,5,92,1269,8,92,10,92,12,92,1272,9,
  	92,1,92,1,92,1,92,1,92,1,92,3,92,1279,8,92,1,92,1,92,1,92,1,92,1,92,1,
  	92,5,92,1287,8,92,10,92,12,92,1290,9,92,1,93,1,93,1,93,1,93,1,93,1,93,
  	1,93,3,93,1299,8,93,1,93,1,93,1,93,1,93,3,93,1305,8,93,1,93,1,93,1,93,
  	1,93,1,93,3,93,1312,8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1321,
  	8,93,1,93,1,93,1,93,1,93,1,93,3,93,1328,8,93,1,93,1,93,1,93,1,93,1,93,
  	1,93,3,93,1336,8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1345,8,93,
  	1,94,1,94,1,94,1,94,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
  	1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
  	1,96,3,96,1376,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,
  	1387,8,96,10,96,12,96,1390,9,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,4,
  	97,1399,8,97,11,97,12,97,1400,1,97,1,97,3,97,1405,8,97,1,97,1,97,1,98,
  	1,98,1,98,1,98,1,98,1,98,4,98,1415,8,98,11,98,12,98,1416,1,98,1,98,3,
  	98,1421,8,98,1,98,1,98,1,99,1,99,3,99,1427,8,99,1,100,1,100,1,100,1,100,
  	3,100,1433,8,100,1,101,1,101,1,102,1,102,1,102,3,102,1440,8,102,1,103,
  	1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
  	1,103,1,103,1,103,1,103,1,103,5,103,1460,8,103,10,103,12,103,1463,9,103,
  	1,103,1,103,3,103,1467,8,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
  	1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
  	1,104,1,104,1,104,1,104,1,104,3,104,1493,8,104,1,105,1,105,1,106,1,106,
  	1,107,1,107,1,107,1,107,1,107,3,107,1504,8,107,1,108,1,108,1,109,1,109,
  	1,110,1,110,1,111,1,111,1,112,1,112,1,113,1,113,1,114,1,114,1,115,1,115,
  	1,116,1,116,1,117,1,117,1,118,1,118,1,119,1,119,1,120,1,120,1,121,1,121,
  	1,121,1,121,1,122,1,122,1,122,1,123,1,123,1,123,1,124,1,124,1,124,0,2,
  	184,192,125,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
  	42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
  	88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
  	126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
  	162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
  	198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,
  	234,236,238,240,242,244,246,248,0,20,3,0,46,46,68,68,135,135,1,0,108,
  	109,2,0,2,2,39,39,2,0,9,9,37,37,2,0,54,54,76,76,2,0,74,74,127,127,3,0,
  	59,59,74,74,127,127,4,0,40,40,70,70,81,81,140,140,2,0,28,28,110,110,2,
  	0,50,50,57,57,2,0,18,18,106,106,2,0,29,29,111,111,2,0,52,52,133,133,3,
  	0,2,2,6,6,119,119,2,0,148,148,154,159,1,0,163,164,2,0,162,162,165,166,
  	2,0,21,21,142,142,2,0,167,167,169,169,2,0,58,58,63,63,1646,0,250,1,0,
  	0,0,2,258,1,0,0,0,4,286,1,0,0,0,6,300,1,0,0,0,8,311,1,0,0,0,10,315,1,
  	0,0,0,12,387,1,0,0,0,14,389,1,0,0,0,16,397,1,0,0,0,18,399,1,0,0,0,20,
  	401,1,0,0,0,22,407,1,0,0,0,24,409,1,0,0,0,26,411,1,0,0,0,28,432,1,0,0,
  	0,30,443,1,0,0,0,32,464,1,0,0,0,34,466,1,0,0,0,36,478,1,0,0,0,38,503,
  	1,0,0,0,40,527,1,0,0,0,42,533,1,0,0,0,44,539,1,0,0,0,46,556,1,0,0,0,48,
  	564,1,0,0,0,50,572,1,0,0,0,52,579,1,0,0,0,54,603,1,0,0,0,56,605,1,0,0,
  	0,58,620,1,0,0,0,60,623,1,0,0,0,62,625,1,0,0,0,64,651,1,0,0,0,66,657,
  	1,0,0,0,68,659,1,0,0,0,70,668,1,0,0,0,72,670,1,0,0,0,74,683,1,0,0,0,76,
  	688,1,0,0,0,78,690,1,0,0,0,80,694,1,0,0,0,82,705,1,0,0,0,84,718,1,0,0,
  	0,86,722,1,0,0,0,88,724,1,0,0,0,90,740,1,0,0,0,92,742,1,0,0,0,94,748,
  	1,0,0,0,96,770,1,0,0,0,98,774,1,0,0,0,100,776,1,0,0,0,102,778,1,0,0,0,
  	104,804,1,0,0,0,106,826,1,0,0,0,108,834,1,0,0,0,110,844,1,0,0,0,112,877,
  	1,0,0,0,114,891,1,0,0,0,116,907,1,0,0,0,118,936,1,0,0,0,120,1017,1,0,
  	0,0,122,1045,1,0,0,0,124,1047,1,0,0,0,126,1056,1,0,0,0,128,1062,1,0,0,
  	0,130,1068,1,0,0,0,132,1073,1,0,0,0,134,1090,1,0,0,0,136,1092,1,0,0,0,
  	138,1094,1,0,0,0,140,1100,1,0,0,0,142,1102,1,0,0,0,144,1128,1,0,0,0,146,
  	1130,1,0,0,0,148,1134,1,0,0,0,150,1143,1,0,0,0,152,1157,1,0,0,0,154,1159,
  	1,0,0,0,156,1163,1,0,0,0,158,1172,1,0,0,0,160,1179,1,0,0,0,162,1186,1,
  	0,0,0,164,1207,1,0,0,0,166,1209,1,0,0,0,168,1219,1,0,0,0,170,1224,1,0,
  	0,0,172,1230,1,0,0,0,174,1234,1,0,0,0,176,1243,1,0,0,0,178,1252,1,0,0,
  	0,180,1262,1,0,0,0,182,1264,1,0,0,0,184,1266,1,0,0,0,186,1344,1,0,0,0,
  	188,1346,1,0,0,0,190,1350,1,0,0,0,192,1375,1,0,0,0,194,1391,1,0,0,0,196,
  	1408,1,0,0,0,198,1426,1,0,0,0,200,1432,1,0,0,0,202,1434,1,0,0,0,204,1439,
  	1,0,0,0,206,1466,1,0,0,0,208,1492,1,0,0,0,210,1494,1,0,0,0,212,1496,1,
  	0,0,0,214,1498,1,0,0,0,216,1505,1,0,0,0,218,1507,1,0,0,0,220,1509,1,0,
  	0,0,222,1511,1,0,0,0,224,1513,1,0,0,0,226,1515,1,0,0,0,228,1517,1,0,0,
  	0,230,1519,1,0,0,0,232,1521,1,0,0,0,234,1523,1,0,0,0,236,1525,1,0,0,0,
  	238,1527,1,0,0,0,240,1529,1,0,0,0,242,1531,1,0,0,0,244,1535,1,0,0,0,246,
  	1538,1,0,0,0,248,1541,1,0,0,0,250,252,3,2,1,0,251,253,5,149,0,0,252,251,
  	1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,255,5,0,0,1,255,1,1,0,0,0,
  	256,259,3,4,2,0,257,259,3,6,3,0,258,256,1,0,0,0,258,257,1,0,0,0,259,3,
  	1,0,0,0,260,287,3,88,44,0,261,287,3,94,47,0,262,287,3,102,51,0,263,287,
  	3,104,52,0,264,287,3,108,54,0,265,287,3,110,55,0,266,287,3,112,56,0,267,
  	287,3,114,57,0,268,287,3,116,58,0,269,287,3,118,59,0,270,287,3,142,71,
  	0,271,287,3,148,74,0,272,287,3,156,78,0,273,287,3,158,79,0,274,287,3,
  	160,80,0,275,287,3,150,75,0,276,287,3,154,77,0,277,287,3,162,81,0,278,
  	287,3,164,82,0,279,287,3,166,83,0,280,287,3,168,84,0,281,287,3,170,85,
  	0,282,287,3,172,86,0,283,287,3,174,87,0,284,287,3,176,88,0,285,287,3,
  	178,89,0,286,260,1,0,0,0,286,261,1,0,0,0,286,262,1,0,0,0,286,263,1,0,
  	0,0,286,264,1,0,0,0,286,265,1,0,0,0,286,266,1,0,0,0,286,267,1,0,0,0,286,
  	268,1,0,0,0,286,269,1,0,0,0,286,270,1,0,0,0,286,271,1,0,0,0,286,272,1,
  	0,0,0,286,273,1,0,0,0,286,274,1,0,0,0,286,275,1,0,0,0,286,276,1,0,0,0,
  	286,277,1,0,0,0,286,278,1,0,0,0,286,279,1,0,0,0,286,280,1,0,0,0,286,281,
  	1,0,0,0,286,282,1,0,0,0,286,283,1,0,0,0,286,284,1,0,0,0,286,285,1,0,0,
  	0,287,5,1,0,0,0,288,301,3,8,4,0,289,301,3,26,13,0,290,301,3,34,17,0,291,
  	301,3,36,18,0,292,301,3,38,19,0,293,301,3,56,28,0,294,301,3,58,29,0,295,
  	301,3,64,32,0,296,301,3,68,34,0,297,301,3,72,36,0,298,301,3,78,39,0,299,
  	301,3,80,40,0,300,288,1,0,0,0,300,289,1,0,0,0,300,290,1,0,0,0,300,291,
  	1,0,0,0,300,292,1,0,0,0,300,293,1,0,0,0,300,294,1,0,0,0,300,295,1,0,0,
  	0,300,296,1,0,0,0,300,297,1,0,0,0,300,298,1,0,0,0,300,299,1,0,0,0,301,
  	7,1,0,0,0,302,303,5,147,0,0,303,308,3,20,10,0,304,305,5,153,0,0,305,307,
  	3,20,10,0,306,304,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,
  	0,0,309,312,1,0,0,0,310,308,1,0,0,0,311,302,1,0,0,0,311,312,1,0,0,0,312,
  	313,1,0,0,0,313,314,3,10,5,0,314,9,1,0,0,0,315,317,5,112,0,0,316,318,
  	3,12,6,0,317,316,1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,329,3,30,
  	15,0,320,321,5,58,0,0,321,326,3,16,8,0,322,323,5,153,0,0,323,325,3,16,
  	8,0,324,322,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,
  	330,1,0,0,0,328,326,1,0,0,0,329,320,1,0,0,0,329,330,1,0,0,0,330,333,1,
  	0,0,0,331,332,5,146,0,0,332,334,3,24,12,0,333,331,1,0,0,0,333,334,1,0,
  	0,0,334,348,1,0,0,0,335,336,5,60,0,0,336,338,5,17,0,0,337,339,3,12,6,
  	0,338,337,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,345,3,22,11,0,341,
  	342,5,153,0,0,342,344,3,22,11,0,343,341,1,0,0,0,344,347,1,0,0,0,345,343,
  	1,0,0,0,345,346,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,348,335,1,0,0,
  	0,348,349,1,0,0,0,349,352,1,0,0,0,350,351,5,61,0,0,351,353,3,24,12,0,
  	352,350,1,0,0,0,352,353,1,0,0,0,353,359,1,0,0,0,354,356,7,0,0,0,355,357,
  	3,12,6,0,356,355,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,360,3,10,
  	5,0,359,354,1,0,0,0,359,360,1,0,0,0,360,371,1,0,0,0,361,362,5,95,0,0,
  	362,363,5,17,0,0,363,368,3,14,7,0,364,365,5,153,0,0,365,367,3,14,7,0,
  	366,364,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,372,
  	1,0,0,0,370,368,1,0,0,0,371,361,1,0,0,0,371,372,1,0,0,0,372,378,1,0,0,
  	0,373,374,5,90,0,0,374,376,3,18,9,0,375,377,7,1,0,0,376,375,1,0,0,0,376,
  	377,1,0,0,0,377,379,1,0,0,0,378,373,1,0,0,0,378,379,1,0,0,0,379,385,1,
  	0,0,0,380,383,5,78,0,0,381,384,3,18,9,0,382,384,5,2,0,0,383,381,1,0,0,
  	0,383,382,1,0,0,0,384,386,1,0,0,0,385,380,1,0,0,0,385,386,1,0,0,0,386,
  	11,1,0,0,0,387,388,7,2,0,0,388,13,1,0,0,0,389,391,3,192,96,0,390,392,
  	7,3,0,0,391,390,1,0,0,0,391,392,1,0,0,0,392,395,1,0,0,0,393,394,5,89,
  	0,0,394,396,7,4,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,15,1,0,0,0,397,
  	398,3,224,112,0,398,17,1,0,0,0,399,400,3,202,101,0,400,19,1,0,0,0,401,
  	402,3,240,120,0,402,403,5,8,0,0,403,404,5,150,0,0,404,405,3,10,5,0,405,
  	406,5,151,0,0,406,21,1,0,0,0,407,408,3,192,96,0,408,23,1,0,0,0,409,410,
  	3,184,92,0,410,25,1,0,0,0,411,412,5,65,0,0,412,413,5,69,0,0,413,418,3,
  	228,114,0,414,415,5,150,0,0,415,416,3,48,24,0,416,417,5,151,0,0,417,419,
  	1,0,0,0,418,414,1,0,0,0,418,419,1,0,0,0,419,430,1,0,0,0,420,431,3,10,
  	5,0,421,422,5,141,0,0,422,427,3,28,14,0,423,424,5,153,0,0,424,426,3,28,
  	14,0,425,423,1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,
  	428,431,1,0,0,0,429,427,1,0,0,0,430,420,1,0,0,0,430,421,1,0,0,0,431,27,
  	1,0,0,0,432,433,5,150,0,0,433,438,3,76,38,0,434,435,5,153,0,0,435,437,
  	3,76,38,0,436,434,1,0,0,0,437,440,1,0,0,0,438,436,1,0,0,0,438,439,1,0,
  	0,0,439,441,1,0,0,0,440,438,1,0,0,0,441,442,5,151,0,0,442,29,1,0,0,0,
  	443,448,3,32,16,0,444,445,5,153,0,0,445,447,3,32,16,0,446,444,1,0,0,0,
  	447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,31,1,0,0,0,450,448,
  	1,0,0,0,451,456,3,192,96,0,452,454,5,8,0,0,453,452,1,0,0,0,453,454,1,
  	0,0,0,454,455,1,0,0,0,455,457,3,234,117,0,456,453,1,0,0,0,456,457,1,0,
  	0,0,457,465,1,0,0,0,458,459,3,224,112,0,459,460,5,152,0,0,460,462,1,0,
  	0,0,461,458,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,465,5,162,0,0,
  	464,451,1,0,0,0,464,461,1,0,0,0,465,33,1,0,0,0,466,467,5,35,0,0,467,471,
  	5,58,0,0,468,469,3,218,109,0,469,470,5,152,0,0,470,472,1,0,0,0,471,468,
  	1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,476,3,224,112,0,474,475,5,
  	146,0,0,475,477,3,86,43,0,476,474,1,0,0,0,476,477,1,0,0,0,477,35,1,0,
  	0,0,478,482,5,137,0,0,479,480,3,218,109,0,480,481,5,152,0,0,481,483,1,
  	0,0,0,482,479,1,0,0,0,482,483,1,0,0,0,483,484,1,0,0,0,484,485,3,224,112,
  	0,485,486,5,116,0,0,486,487,3,216,108,0,487,488,5,148,0,0,488,496,3,192,
  	96,0,489,490,5,153,0,0,490,491,3,216,108,0,491,492,5,148,0,0,492,493,
  	3,192,96,0,493,495,1,0,0,0,494,489,1,0,0,0,495,498,1,0,0,0,496,494,1,
  	0,0,0,496,497,1,0,0,0,497,501,1,0,0,0,498,496,1,0,0,0,499,500,5,146,0,
  	0,500,502,3,86,43,0,501,499,1,0,0,0,501,502,1,0,0,0,502,37,1,0,0,0,503,
  	504,5,84,0,0,504,505,5,69,0,0,505,510,3,60,30,0,506,508,5,8,0,0,507,506,
  	1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,511,3,236,118,0,510,507,1,
  	0,0,0,510,511,1,0,0,0,511,512,1,0,0,0,512,515,5,138,0,0,513,516,3,62,
  	31,0,514,516,3,180,90,0,515,513,1,0,0,0,515,514,1,0,0,0,516,521,1,0,0,
  	0,517,519,5,8,0,0,518,517,1,0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,
  	522,3,238,119,0,521,518,1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,524,
  	5,91,0,0,524,525,3,40,20,0,525,526,3,42,21,0,526,39,1,0,0,0,527,528,3,
  	86,43,0,528,41,1,0,0,0,529,532,3,50,25,0,530,532,3,52,26,0,531,529,1,
  	0,0,0,531,530,1,0,0,0,532,535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,
  	534,537,1,0,0,0,535,533,1,0,0,0,536,538,3,44,22,0,537,536,1,0,0,0,537,
  	538,1,0,0,0,538,43,1,0,0,0,539,540,5,145,0,0,540,541,5,87,0,0,541,544,
  	5,83,0,0,542,543,5,5,0,0,543,545,3,192,96,0,544,542,1,0,0,0,544,545,1,
  	0,0,0,545,546,1,0,0,0,546,547,5,129,0,0,547,549,5,65,0,0,548,550,3,48,
  	24,0,549,548,1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,552,5,141,0,
  	0,552,553,5,150,0,0,553,554,3,46,23,0,554,555,5,151,0,0,555,45,1,0,0,
  	0,556,561,3,192,96,0,557,558,5,153,0,0,558,560,3,192,96,0,559,557,1,0,
  	0,0,560,563,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,47,1,0,0,0,563,
  	561,1,0,0,0,564,569,3,216,108,0,565,566,5,153,0,0,566,568,3,216,108,0,
  	567,565,1,0,0,0,568,571,1,0,0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,49,
  	1,0,0,0,571,569,1,0,0,0,572,573,5,145,0,0,573,574,5,83,0,0,574,575,5,
  	5,0,0,575,576,3,192,96,0,576,577,5,129,0,0,577,578,3,54,27,0,578,51,1,
  	0,0,0,579,580,5,145,0,0,580,581,5,83,0,0,581,582,5,129,0,0,582,583,3,
  	54,27,0,583,53,1,0,0,0,584,585,5,137,0,0,585,586,5,116,0,0,586,587,5,
  	150,0,0,587,588,3,216,108,0,588,589,5,148,0,0,589,597,3,192,96,0,590,
  	591,5,153,0,0,591,592,3,216,108,0,592,593,5,148,0,0,593,594,3,192,96,
  	0,594,596,1,0,0,0,595,590,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,
  	598,1,0,0,0,598,600,1,0,0,0,599,597,1,0,0,0,600,601,5,151,0,0,601,604,
  	1,0,0,0,602,604,5,35,0,0,603,584,1,0,0,0,603,602,1,0,0,0,604,55,1,0,0,
  	0,605,609,5,92,0,0,606,607,3,218,109,0,607,608,5,152,0,0,608,610,1,0,
  	0,0,609,606,1,0,0,0,609,610,1,0,0,0,610,611,1,0,0,0,611,612,3,224,112,
  	0,612,613,5,107,0,0,613,614,5,27,0,0,614,615,5,138,0,0,615,618,5,13,0,
  	0,616,617,5,146,0,0,617,619,3,86,43,0,618,616,1,0,0,0,618,619,1,0,0,0,
  	619,57,1,0,0,0,620,621,5,139,0,0,621,622,3,60,30,0,622,59,1,0,0,0,623,
  	624,3,224,112,0,624,61,1,0,0,0,625,626,3,224,112,0,626,63,1,0,0,0,627,
  	628,5,49,0,0,628,640,3,70,35,0,629,630,5,150,0,0,630,635,3,66,33,0,631,
  	632,5,153,0,0,632,634,3,66,33,0,633,631,1,0,0,0,634,637,1,0,0,0,635,633,
  	1,0,0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,635,1,0,0,0,638,639,5,151,
  	0,0,639,641,1,0,0,0,640,629,1,0,0,0,640,641,1,0,0,0,641,652,1,0,0,0,642,
  	643,5,49,0,0,643,648,5,4,0,0,644,645,5,150,0,0,645,646,5,56,0,0,646,647,
  	7,5,0,0,647,649,5,151,0,0,648,644,1,0,0,0,648,649,1,0,0,0,649,650,1,0,
  	0,0,650,652,3,70,35,0,651,627,1,0,0,0,651,642,1,0,0,0,652,65,1,0,0,0,
  	653,654,5,56,0,0,654,658,7,6,0,0,655,656,5,134,0,0,656,658,7,7,0,0,657,
  	653,1,0,0,0,657,655,1,0,0,0,658,67,1,0,0,0,659,660,5,101,0,0,660,661,
  	3,222,111,0,661,662,5,58,0,0,662,663,3,70,35,0,663,69,1,0,0,0,664,669,
  	3,8,4,0,665,669,3,142,71,0,666,669,3,26,13,0,667,669,3,80,40,0,668,664,
  	1,0,0,0,668,665,1,0,0,0,668,666,1,0,0,0,668,667,1,0,0,0,669,71,1,0,0,
  	0,670,671,5,47,0,0,671,681,3,222,111,0,672,673,5,138,0,0,673,678,3,74,
  	37,0,674,675,5,153,0,0,675,677,3,74,37,0,676,674,1,0,0,0,677,680,1,0,
  	0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,681,
  	672,1,0,0,0,681,682,1,0,0,0,682,73,1,0,0,0,683,684,3,76,38,0,684,75,1,
  	0,0,0,685,689,3,202,101,0,686,689,3,230,115,0,687,689,3,182,91,0,688,
  	685,1,0,0,0,688,686,1,0,0,0,688,687,1,0,0,0,689,77,1,0,0,0,690,691,5,
  	32,0,0,691,692,5,101,0,0,692,693,3,222,111,0,693,79,1,0,0,0,694,695,5,
  	136,0,0,695,696,5,150,0,0,696,697,3,8,4,0,697,698,5,151,0,0,698,699,5,
  	132,0,0,699,700,3,230,115,0,700,701,5,147,0,0,701,702,5,150,0,0,702,703,
  	3,82,41,0,703,704,5,151,0,0,704,81,1,0,0,0,705,706,3,144,72,0,706,707,
  	5,148,0,0,707,715,3,84,42,0,708,709,5,153,0,0,709,710,3,144,72,0,710,
  	711,5,148,0,0,711,712,3,84,42,0,712,714,1,0,0,0,713,708,1,0,0,0,714,717,
  	1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,83,1,0,0,0,717,715,1,0,0,
  	0,718,719,3,76,38,0,719,85,1,0,0,0,720,723,3,182,91,0,721,723,3,184,92,
  	0,722,720,1,0,0,0,722,721,1,0,0,0,723,87,1,0,0,0,724,725,5,3,0,0,725,
  	726,3,90,45,0,726,727,3,220,110,0,727,728,5,116,0,0,728,729,5,31,0,0,
  	729,730,5,150,0,0,730,735,3,92,46,0,731,732,5,153,0,0,732,734,3,92,46,
  	0,733,731,1,0,0,0,734,737,1,0,0,0,735,733,1,0,0,0,735,736,1,0,0,0,736,
  	738,1,0,0,0,737,735,1,0,0,0,738,739,5,151,0,0,739,89,1,0,0,0,740,741,
  	7,8,0,0,741,91,1,0,0,0,742,743,3,230,115,0,743,746,5,148,0,0,744,747,
  	3,230,115,0,745,747,5,169,0,0,746,744,1,0,0,0,746,745,1,0,0,0,747,93,
  	1,0,0,0,748,749,5,3,0,0,749,750,5,123,0,0,750,763,3,224,112,0,751,752,
  	5,98,0,0,752,753,5,150,0,0,753,758,3,96,48,0,754,755,5,153,0,0,755,757,
  	3,96,48,0,756,754,1,0,0,0,757,760,1,0,0,0,758,756,1,0,0,0,758,759,1,0,
  	0,0,759,761,1,0,0,0,760,758,1,0,0,0,761,762,5,151,0,0,762,764,1,0,0,0,
  	763,751,1,0,0,0,763,764,1,0,0,0,764,765,1,0,0,0,765,766,5,1,0,0,766,767,
  	5,24,0,0,767,768,3,216,108,0,768,769,3,206,103,0,769,95,1,0,0,0,770,771,
  	3,98,49,0,771,772,5,148,0,0,772,773,3,100,50,0,773,97,1,0,0,0,774,775,
  	3,216,108,0,775,99,1,0,0,0,776,777,3,76,38,0,777,101,1,0,0,0,778,779,
  	5,3,0,0,779,780,5,123,0,0,780,781,3,224,112,0,781,783,5,1,0,0,782,784,
  	3,242,121,0,783,782,1,0,0,0,783,784,1,0,0,0,784,800,1,0,0,0,785,786,5,
  	98,0,0,786,787,5,150,0,0,787,792,3,96,48,0,788,789,5,153,0,0,789,791,
  	3,96,48,0,790,788,1,0,0,0,791,794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,
  	0,0,793,795,1,0,0,0,794,792,1,0,0,0,795,798,5,151,0,0,796,797,5,80,0,
  	0,797,799,3,230,115,0,798,796,1,0,0,0,798,799,1,0,0,0,799,801,1,0,0,0,
  	800,785,1,0,0,0,801,802,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,103,
  	1,0,0,0,804,805,5,3,0,0,805,806,5,123,0,0,806,807,3,224,112,0,807,809,
  	5,42,0,0,808,810,3,244,122,0,809,808,1,0,0,0,809,810,1,0,0,0,810,811,
  	1,0,0,0,811,812,5,98,0,0,812,813,5,150,0,0,813,814,3,106,53,0,814,823,
  	5,151,0,0,815,816,5,153,0,0,816,817,5,98,0,0,817,818,5,150,0,0,818,819,
  	3,106,53,0,819,820,5,151,0,0,820,822,1,0,0,0,821,815,1,0,0,0,822,825,
  	1,0,0,0,823,821,1,0,0,0,823,824,1,0,0,0,824,105,1,0,0,0,825,823,1,0,0,
  	0,826,831,3,96,48,0,827,828,5,153,0,0,828,830,3,96,48,0,829,827,1,0,0,
  	0,830,833,1,0,0,0,831,829,1,0,0,0,831,832,1,0,0,0,832,107,1,0,0,0,833,
  	831,1,0,0,0,834,835,5,3,0,0,835,836,5,123,0,0,836,837,3,224,112,0,837,
  	838,5,98,0,0,838,839,3,106,53,0,839,840,5,103,0,0,840,841,5,132,0,0,841,
  	842,5,98,0,0,842,843,3,106,53,0,843,109,1,0,0,0,844,845,5,3,0,0,845,846,
  	5,123,0,0,846,859,3,224,112,0,847,848,5,98,0,0,848,849,5,150,0,0,849,
  	854,3,96,48,0,850,851,5,153,0,0,851,853,3,96,48,0,852,850,1,0,0,0,853,
  	856,1,0,0,0,854,852,1,0,0,0,854,855,1,0,0,0,855,857,1,0,0,0,856,854,1,
  	0,0,0,857,858,5,151,0,0,858,860,1,0,0,0,859,847,1,0,0,0,859,860,1,0,0,
  	0,860,861,1,0,0,0,861,862,5,105,0,0,862,863,5,24,0,0,863,864,5,150,0,
  	0,864,865,3,216,108,0,865,872,3,206,103,0,866,867,5,153,0,0,867,868,3,
  	216,108,0,868,869,3,206,103,0,869,871,1,0,0,0,870,866,1,0,0,0,871,874,
  	1,0,0,0,872,870,1,0,0,0,872,873,1,0,0,0,873,875,1,0,0,0,874,872,1,0,0,
  	0,875,876,5,151,0,0,876,111,1,0,0,0,877,878,5,3,0,0,878,879,5,123,0,0,
  	879,885,3,224,112,0,880,881,5,98,0,0,881,882,5,150,0,0,882,883,3,106,
  	53,0,883,884,5,151,0,0,884,886,1,0,0,0,885,880,1,0,0,0,885,886,1,0,0,
  	0,886,887,1,0,0,0,887,888,5,116,0,0,888,889,5,80,0,0,889,890,3,230,115,
  	0,890,113,1,0,0,0,891,892,5,3,0,0,892,893,5,123,0,0,893,894,3,224,112,
  	0,894,895,5,116,0,0,895,896,5,125,0,0,896,897,5,150,0,0,897,902,3,92,
  	46,0,898,899,5,153,0,0,899,901,3,92,46,0,900,898,1,0,0,0,901,904,1,0,
  	0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,905,1,0,0,0,904,902,1,0,0,0,905,
  	906,5,151,0,0,906,115,1,0,0,0,907,908,5,26,0,0,908,910,3,90,45,0,909,
  	911,3,242,121,0,910,909,1,0,0,0,910,911,1,0,0,0,911,912,1,0,0,0,912,915,
  	3,220,110,0,913,914,5,25,0,0,914,916,3,230,115,0,915,913,1,0,0,0,915,
  	916,1,0,0,0,916,919,1,0,0,0,917,918,5,80,0,0,918,920,3,230,115,0,919,
  	917,1,0,0,0,919,920,1,0,0,0,920,934,1,0,0,0,921,922,5,147,0,0,922,923,
  	5,31,0,0,923,924,5,150,0,0,924,929,3,92,46,0,925,926,5,153,0,0,926,928,
  	3,92,46,0,927,925,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,
  	0,0,930,932,1,0,0,0,931,929,1,0,0,0,932,933,5,151,0,0,933,935,1,0,0,0,
  	934,921,1,0,0,0,934,935,1,0,0,0,935,117,1,0,0,0,936,937,5,26,0,0,937,
  	938,5,51,0,0,938,940,5,123,0,0,939,941,3,242,121,0,940,939,1,0,0,0,940,
  	941,1,0,0,0,941,945,1,0,0,0,942,943,3,218,109,0,943,944,5,152,0,0,944,
  	946,1,0,0,0,945,942,1,0,0,0,945,946,1,0,0,0,946,947,1,0,0,0,947,959,3,
  	224,112,0,948,949,5,150,0,0,949,954,3,138,69,0,950,951,5,153,0,0,951,
  	953,3,138,69,0,952,950,1,0,0,0,953,956,1,0,0,0,954,952,1,0,0,0,954,955,
  	1,0,0,0,955,957,1,0,0,0,956,954,1,0,0,0,957,958,5,151,0,0,958,960,1,0,
  	0,0,959,948,1,0,0,0,959,960,1,0,0,0,960,963,1,0,0,0,961,962,5,25,0,0,
  	962,964,3,120,60,0,963,961,1,0,0,0,963,964,1,0,0,0,964,978,1,0,0,0,965,
  	966,5,99,0,0,966,967,5,17,0,0,967,968,5,150,0,0,968,973,3,138,69,0,969,
  	970,5,153,0,0,970,972,3,138,69,0,971,969,1,0,0,0,972,975,1,0,0,0,973,
  	971,1,0,0,0,973,974,1,0,0,0,974,976,1,0,0,0,975,973,1,0,0,0,976,977,5,
  	151,0,0,977,979,1,0,0,0,978,965,1,0,0,0,978,979,1,0,0,0,979,996,1,0,0,
  	0,980,981,5,22,0,0,981,982,5,17,0,0,982,983,5,150,0,0,983,988,3,216,108,
  	0,984,985,5,153,0,0,985,987,3,216,108,0,986,984,1,0,0,0,987,990,1,0,0,
  	0,988,986,1,0,0,0,988,989,1,0,0,0,989,991,1,0,0,0,990,988,1,0,0,0,991,
  	992,5,151,0,0,992,993,5,69,0,0,993,994,3,136,68,0,994,995,5,16,0,0,995,
  	997,1,0,0,0,996,980,1,0,0,0,996,997,1,0,0,0,997,1001,1,0,0,0,998,999,
  	5,108,0,0,999,1000,5,56,0,0,1000,1002,3,122,61,0,1001,998,1,0,0,0,1001,
  	1002,1,0,0,0,1002,1006,1,0,0,0,1003,1004,5,120,0,0,1004,1005,5,8,0,0,
  	1005,1007,3,134,67,0,1006,1003,1,0,0,0,1006,1007,1,0,0,0,1007,1008,1,
  	0,0,0,1008,1009,5,80,0,0,1009,1015,3,230,115,0,1010,1011,5,125,0,0,1011,
  	1012,5,150,0,0,1012,1013,3,82,41,0,1013,1014,5,151,0,0,1014,1016,1,0,
  	0,0,1015,1010,1,0,0,0,1015,1016,1,0,0,0,1016,119,1,0,0,0,1017,1018,3,
  	230,115,0,1018,121,1,0,0,0,1019,1021,5,36,0,0,1020,1022,3,124,62,0,1021,
  	1020,1,0,0,0,1021,1022,1,0,0,0,1022,1024,1,0,0,0,1023,1025,3,126,63,0,
  	1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,1028,3,128,
  	64,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1030,1,0,0,0,1029,1031,
  	3,130,65,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,1033,1,0,0,0,1032,
  	1034,3,132,66,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1046,1,0,0,0,
  	1035,1036,5,114,0,0,1036,1043,3,230,115,0,1037,1038,5,147,0,0,1038,1039,
  	5,115,0,0,1039,1040,5,150,0,0,1040,1041,3,82,41,0,1041,1042,5,151,0,0,
  	1042,1044,1,0,0,0,1043,1037,1,0,0,0,1043,1044,1,0,0,0,1044,1046,1,0,0,
  	0,1045,1019,1,0,0,0,1045,1035,1,0,0,0,1046,123,1,0,0,0,1047,1048,5,53,
  	0,0,1048,1049,5,126,0,0,1049,1050,5,17,0,0,1050,1054,3,230,115,0,1051,
  	1052,5,45,0,0,1052,1053,5,17,0,0,1053,1055,3,230,115,0,1054,1051,1,0,
  	0,0,1054,1055,1,0,0,0,1055,125,1,0,0,0,1056,1057,5,23,0,0,1057,1058,5,
  	73,0,0,1058,1059,5,126,0,0,1059,1060,5,17,0,0,1060,1061,3,230,115,0,1061,
  	127,1,0,0,0,1062,1063,5,82,0,0,1063,1064,5,75,0,0,1064,1065,5,126,0,0,
  	1065,1066,5,17,0,0,1066,1067,3,230,115,0,1067,129,1,0,0,0,1068,1069,5,
  	79,0,0,1069,1070,5,126,0,0,1070,1071,5,17,0,0,1071,1072,3,230,115,0,1072,
  	131,1,0,0,0,1073,1074,5,88,0,0,1074,1075,5,34,0,0,1075,1076,5,8,0,0,1076,
  	1077,3,230,115,0,1077,133,1,0,0,0,1078,1091,5,113,0,0,1079,1091,5,128,
  	0,0,1080,1091,5,102,0,0,1081,1091,5,94,0,0,1082,1091,5,97,0,0,1083,1091,
  	5,10,0,0,1084,1091,5,71,0,0,1085,1086,5,64,0,0,1086,1087,3,230,115,0,
  	1087,1088,5,96,0,0,1088,1089,3,230,115,0,1089,1091,1,0,0,0,1090,1078,
  	1,0,0,0,1090,1079,1,0,0,0,1090,1080,1,0,0,0,1090,1081,1,0,0,0,1090,1082,
  	1,0,0,0,1090,1083,1,0,0,0,1090,1084,1,0,0,0,1090,1085,1,0,0,0,1091,135,
  	1,0,0,0,1092,1093,3,202,101,0,1093,137,1,0,0,0,1094,1095,3,216,108,0,
  	1095,1098,3,206,103,0,1096,1097,5,25,0,0,1097,1099,3,140,70,0,1098,1096,
  	1,0,0,0,1098,1099,1,0,0,0,1099,139,1,0,0,0,1100,1101,3,230,115,0,1101,
  	141,1,0,0,0,1102,1103,5,26,0,0,1103,1104,5,123,0,0,1104,1117,3,224,112,
  	0,1105,1106,5,147,0,0,1106,1107,5,150,0,0,1107,1112,3,146,73,0,1108,1109,
  	5,153,0,0,1109,1111,3,146,73,0,1110,1108,1,0,0,0,1111,1114,1,0,0,0,1112,
  	1110,1,0,0,0,1112,1113,1,0,0,0,1113,1115,1,0,0,0,1114,1112,1,0,0,0,1115,
  	1116,5,151,0,0,1116,1118,1,0,0,0,1117,1105,1,0,0,0,1117,1118,1,0,0,0,
  	1118,1119,1,0,0,0,1119,1120,5,8,0,0,1120,1126,3,180,90,0,1121,1123,5,
  	147,0,0,1122,1124,5,86,0,0,1123,1122,1,0,0,0,1123,1124,1,0,0,0,1124,1125,
  	1,0,0,0,1125,1127,5,27,0,0,1126,1121,1,0,0,0,1126,1127,1,0,0,0,1127,143,
  	1,0,0,0,1128,1129,3,240,120,0,1129,145,1,0,0,0,1130,1131,3,144,72,0,1131,
  	1132,5,148,0,0,1132,1133,3,192,96,0,1133,147,1,0,0,0,1134,1136,5,26,0,
  	0,1135,1137,3,246,123,0,1136,1135,1,0,0,0,1136,1137,1,0,0,0,1137,1138,
  	1,0,0,0,1138,1139,5,143,0,0,1139,1140,3,226,113,0,1140,1141,5,8,0,0,1141,
  	1142,3,180,90,0,1142,149,1,0,0,0,1143,1145,5,38,0,0,1144,1146,7,9,0,0,
  	1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,1150,1,0,0,0,1147,1148,3,218,
  	109,0,1148,1149,5,152,0,0,1149,1151,1,0,0,0,1150,1147,1,0,0,0,1150,1151,
  	1,0,0,0,1151,1152,1,0,0,0,1152,1155,3,224,112,0,1153,1154,5,98,0,0,1154,
  	1156,3,106,53,0,1155,1153,1,0,0,0,1155,1156,1,0,0,0,1156,151,1,0,0,0,
  	1157,1158,3,240,120,0,1158,153,1,0,0,0,1159,1161,5,38,0,0,1160,1162,3,
  	226,113,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,155,1,0,0,0,1163,1164,
  	5,42,0,0,1164,1166,3,90,45,0,1165,1167,3,244,122,0,1166,1165,1,0,0,0,
  	1166,1167,1,0,0,0,1167,1168,1,0,0,0,1168,1170,3,220,110,0,1169,1171,7,
  	10,0,0,1170,1169,1,0,0,0,1170,1171,1,0,0,0,1171,157,1,0,0,0,1172,1173,
  	5,42,0,0,1173,1175,5,123,0,0,1174,1176,3,244,122,0,1175,1174,1,0,0,0,
  	1175,1176,1,0,0,0,1176,1177,1,0,0,0,1177,1178,3,224,112,0,1178,159,1,
  	0,0,0,1179,1180,5,42,0,0,1180,1182,5,143,0,0,1181,1183,3,244,122,0,1182,
  	1181,1,0,0,0,1182,1183,1,0,0,0,1183,1184,1,0,0,0,1184,1185,3,226,113,
  	0,1185,161,1,0,0,0,1186,1187,5,85,0,0,1187,1188,5,104,0,0,1188,1189,5,
  	123,0,0,1189,1190,3,224,112,0,1190,163,1,0,0,0,1191,1192,5,117,0,0,1192,
  	1193,5,24,0,0,1193,1194,3,248,124,0,1194,1195,3,220,110,0,1195,1196,5,
  	152,0,0,1196,1197,3,224,112,0,1197,1208,1,0,0,0,1198,1199,5,117,0,0,1199,
  	1200,5,24,0,0,1200,1201,3,248,124,0,1201,1205,3,224,112,0,1202,1203,3,
  	248,124,0,1203,1204,3,220,110,0,1204,1206,1,0,0,0,1205,1202,1,0,0,0,1205,
  	1206,1,0,0,0,1206,1208,1,0,0,0,1207,1191,1,0,0,0,1207,1198,1,0,0,0,1208,
  	165,1,0,0,0,1209,1210,5,117,0,0,1210,1211,5,26,0,0,1211,1215,5,123,0,
  	0,1212,1213,3,218,109,0,1213,1214,5,152,0,0,1214,1216,1,0,0,0,1215,1212,
  	1,0,0,0,1215,1216,1,0,0,0,1216,1217,1,0,0,0,1217,1218,3,224,112,0,1218,
  	167,1,0,0,0,1219,1220,5,117,0,0,1220,1221,5,26,0,0,1221,1222,5,143,0,
  	0,1222,1223,3,226,113,0,1223,169,1,0,0,0,1224,1225,5,117,0,0,1225,1228,
  	7,11,0,0,1226,1227,5,77,0,0,1227,1229,3,232,116,0,1228,1226,1,0,0,0,1228,
  	1229,1,0,0,0,1229,171,1,0,0,0,1230,1231,5,117,0,0,1231,1232,5,100,0,0,
  	1232,1233,3,224,112,0,1233,173,1,0,0,0,1234,1235,5,117,0,0,1235,1238,
  	5,124,0,0,1236,1237,5,63,0,0,1237,1239,3,220,110,0,1238,1236,1,0,0,0,
  	1238,1239,1,0,0,0,1239,1241,1,0,0,0,1240,1242,3,232,116,0,1241,1240,1,
  	0,0,0,1241,1242,1,0,0,0,1242,175,1,0,0,0,1243,1244,5,117,0,0,1244,1245,
  	5,125,0,0,1245,1250,3,224,112,0,1246,1247,5,150,0,0,1247,1248,3,230,115,
  	0,1248,1249,5,151,0,0,1249,1251,1,0,0,0,1250,1246,1,0,0,0,1250,1251,1,
  	0,0,0,1251,177,1,0,0,0,1252,1253,5,117,0,0,1253,1256,5,144,0,0,1254,1255,
  	5,63,0,0,1255,1257,3,220,110,0,1256,1254,1,0,0,0,1256,1257,1,0,0,0,1257,
  	1260,1,0,0,0,1258,1259,5,77,0,0,1259,1261,3,232,116,0,1260,1258,1,0,0,
  	0,1260,1261,1,0,0,0,1261,179,1,0,0,0,1262,1263,3,8,4,0,1263,181,1,0,0,
  	0,1264,1265,7,12,0,0,1265,183,1,0,0,0,1266,1270,6,92,-1,0,1267,1269,5,
  	87,0,0,1268,1267,1,0,0,0,1269,1272,1,0,0,0,1270,1268,1,0,0,0,1270,1271,
  	1,0,0,0,1271,1278,1,0,0,0,1272,1270,1,0,0,0,1273,1274,5,150,0,0,1274,
  	1275,3,184,92,0,1275,1276,5,151,0,0,1276,1279,1,0,0,0,1277,1279,3,186,
  	93,0,1278,1273,1,0,0,0,1278,1277,1,0,0,0,1279,1288,1,0,0,0,1280,1281,
  	10,3,0,0,1281,1282,5,5,0,0,1282,1287,3,184,92,4,1283,1284,10,2,0,0,1284,
  	1285,5,93,0,0,1285,1287,3,184,92,3,1286,1280,1,0,0,0,1286,1283,1,0,0,
  	0,1287,1290,1,0,0,0,1288,1286,1,0,0,0,1288,1289,1,0,0,0,1289,185,1,0,
  	0,0,1290,1288,1,0,0,0,1291,1292,3,192,96,0,1292,1293,3,190,95,0,1293,
  	1294,3,192,96,0,1294,1345,1,0,0,0,1295,1296,3,192,96,0,1296,1298,5,72,
  	0,0,1297,1299,5,87,0,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,1299,1300,
  	1,0,0,0,1300,1301,5,88,0,0,1301,1345,1,0,0,0,1302,1304,3,240,120,0,1303,
  	1305,5,87,0,0,1304,1303,1,0,0,0,1304,1305,1,0,0,0,1305,1306,1,0,0,0,1306,
  	1307,5,77,0,0,1307,1308,3,230,115,0,1308,1345,1,0,0,0,1309,1311,3,192,
  	96,0,1310,1312,5,87,0,0,1311,1310,1,0,0,0,1311,1312,1,0,0,0,1312,1313,
  	1,0,0,0,1313,1314,5,11,0,0,1314,1315,3,192,96,0,1315,1316,5,5,0,0,1316,
  	1317,3,192,96,0,1317,1345,1,0,0,0,1318,1320,3,192,96,0,1319,1321,5,87,
  	0,0,1320,1319,1,0,0,0,1320,1321,1,0,0,0,1321,1322,1,0,0,0,1322,1323,5,
  	63,0,0,1323,1324,3,188,94,0,1324,1345,1,0,0,0,1325,1327,3,192,96,0,1326,
  	1328,5,87,0,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1329,1,0,0,0,1329,
  	1330,5,63,0,0,1330,1331,5,150,0,0,1331,1332,3,46,23,0,1332,1333,5,151,
  	0,0,1333,1345,1,0,0,0,1334,1336,5,87,0,0,1335,1334,1,0,0,0,1335,1336,
  	1,0,0,0,1336,1337,1,0,0,0,1337,1338,5,48,0,0,1338,1345,3,188,94,0,1339,
  	1340,3,192,96,0,1340,1341,3,190,95,0,1341,1342,7,13,0,0,1342,1343,3,188,
  	94,0,1343,1345,1,0,0,0,1344,1291,1,0,0,0,1344,1295,1,0,0,0,1344,1302,
  	1,0,0,0,1344,1309,1,0,0,0,1344,1318,1,0,0,0,1344,1325,1,0,0,0,1344,1335,
  	1,0,0,0,1344,1339,1,0,0,0,1345,187,1,0,0,0,1346,1347,5,150,0,0,1347,1348,
  	3,10,5,0,1348,1349,5,151,0,0,1349,189,1,0,0,0,1350,1351,7,14,0,0,1351,
  	191,1,0,0,0,1352,1353,6,96,-1,0,1353,1376,3,198,99,0,1354,1355,5,150,
  	0,0,1355,1356,3,192,96,0,1356,1357,5,151,0,0,1357,1376,1,0,0,0,1358,1376,
  	3,188,94,0,1359,1360,3,240,120,0,1360,1361,5,150,0,0,1361,1362,3,46,23,
  	0,1362,1363,5,151,0,0,1363,1376,1,0,0,0,1364,1376,3,194,97,0,1365,1376,
  	3,196,98,0,1366,1367,7,15,0,0,1367,1376,3,192,96,5,1368,1369,5,20,0,0,
  	1369,1370,5,150,0,0,1370,1371,3,192,96,0,1371,1372,5,8,0,0,1372,1373,
  	3,206,103,0,1373,1374,5,151,0,0,1374,1376,1,0,0,0,1375,1352,1,0,0,0,1375,
  	1354,1,0,0,0,1375,1358,1,0,0,0,1375,1359,1,0,0,0,1375,1364,1,0,0,0,1375,
  	1365,1,0,0,0,1375,1366,1,0,0,0,1375,1368,1,0,0,0,1376,1388,1,0,0,0,1377,
  	1378,10,4,0,0,1378,1379,7,16,0,0,1379,1387,3,192,96,5,1380,1381,10,3,
  	0,0,1381,1382,7,15,0,0,1382,1387,3,192,96,4,1383,1384,10,2,0,0,1384,1385,
  	5,152,0,0,1385,1387,3,192,96,3,1386,1377,1,0,0,0,1386,1380,1,0,0,0,1386,
  	1383,1,0,0,0,1387,1390,1,0,0,0,1388,1386,1,0,0,0,1388,1389,1,0,0,0,1389,
  	193,1,0,0,0,1390,1388,1,0,0,0,1391,1392,5,19,0,0,1392,1398,3,192,96,0,
  	1393,1394,5,145,0,0,1394,1395,3,192,96,0,1395,1396,5,129,0,0,1396,1397,
  	3,192,96,0,1397,1399,1,0,0,0,1398,1393,1,0,0,0,1399,1400,1,0,0,0,1400,
  	1398,1,0,0,0,1400,1401,1,0,0,0,1401,1404,1,0,0,0,1402,1403,5,43,0,0,1403,
  	1405,3,192,96,0,1404,1402,1,0,0,0,1404,1405,1,0,0,0,1405,1406,1,0,0,0,
  	1406,1407,5,44,0,0,1407,195,1,0,0,0,1408,1414,5,19,0,0,1409,1410,5,145,
  	0,0,1410,1411,3,192,96,0,1411,1412,5,129,0,0,1412,1413,3,192,96,0,1413,
  	1415,1,0,0,0,1414,1409,1,0,0,0,1415,1416,1,0,0,0,1416,1414,1,0,0,0,1416,
  	1417,1,0,0,0,1417,1420,1,0,0,0,1418,1419,5,43,0,0,1419,1421,3,192,96,
  	0,1420,1418,1,0,0,0,1420,1421,1,0,0,0,1421,1422,1,0,0,0,1422,1423,5,44,
  	0,0,1423,197,1,0,0,0,1424,1427,3,200,100,0,1425,1427,3,240,120,0,1426,
  	1424,1,0,0,0,1426,1425,1,0,0,0,1427,199,1,0,0,0,1428,1433,3,204,102,0,
  	1429,1433,3,230,115,0,1430,1433,3,182,91,0,1431,1433,5,88,0,0,1432,1428,
  	1,0,0,0,1432,1429,1,0,0,0,1432,1430,1,0,0,0,1432,1431,1,0,0,0,1433,201,
  	1,0,0,0,1434,1435,5,170,0,0,1435,203,1,0,0,0,1436,1440,3,202,101,0,1437,
  	1440,5,172,0,0,1438,1440,5,171,0,0,1439,1436,1,0,0,0,1439,1437,1,0,0,
  	0,1439,1438,1,0,0,0,1440,205,1,0,0,0,1441,1467,3,208,104,0,1442,1443,
  	5,7,0,0,1443,1444,5,154,0,0,1444,1445,3,206,103,0,1445,1446,5,155,0,0,
  	1446,1467,1,0,0,0,1447,1448,5,82,0,0,1448,1449,5,154,0,0,1449,1450,3,
  	208,104,0,1450,1451,5,153,0,0,1451,1452,3,206,103,0,1452,1453,5,155,0,
  	0,1453,1467,1,0,0,0,1454,1455,5,122,0,0,1455,1456,5,154,0,0,1456,1461,
  	3,214,107,0,1457,1458,5,153,0,0,1458,1460,3,214,107,0,1459,1457,1,0,0,
  	0,1460,1463,1,0,0,0,1461,1459,1,0,0,0,1461,1462,1,0,0,0,1462,1464,1,0,
  	0,0,1463,1461,1,0,0,0,1464,1465,5,155,0,0,1465,1467,1,0,0,0,1466,1441,
  	1,0,0,0,1466,1442,1,0,0,0,1466,1447,1,0,0,0,1466,1454,1,0,0,0,1467,207,
  	1,0,0,0,1468,1493,5,15,0,0,1469,1493,5,131,0,0,1470,1493,5,118,0,0,1471,
  	1493,5,66,0,0,1472,1493,5,67,0,0,1473,1493,5,12,0,0,1474,1493,5,41,0,
  	0,1475,1493,5,55,0,0,1476,1477,5,33,0,0,1477,1478,5,150,0,0,1478,1479,
  	3,210,105,0,1479,1480,5,153,0,0,1480,1481,3,212,106,0,1481,1482,5,151,
  	0,0,1482,1493,1,0,0,0,1483,1484,7,17,0,0,1484,1485,5,150,0,0,1485,1486,
  	3,202,101,0,1486,1487,5,151,0,0,1487,1493,1,0,0,0,1488,1493,5,121,0,0,
  	1489,1493,5,14,0,0,1490,1493,5,30,0,0,1491,1493,5,130,0,0,1492,1468,1,
  	0,0,0,1492,1469,1,0,0,0,1492,1470,1,0,0,0,1492,1471,1,0,0,0,1492,1472,
  	1,0,0,0,1492,1473,1,0,0,0,1492,1474,1,0,0,0,1492,1475,1,0,0,0,1492,1476,
  	1,0,0,0,1492,1483,1,0,0,0,1492,1488,1,0,0,0,1492,1489,1,0,0,0,1492,1490,
  	1,0,0,0,1492,1491,1,0,0,0,1493,209,1,0,0,0,1494,1495,3,202,101,0,1495,
  	211,1,0,0,0,1496,1497,3,202,101,0,1497,213,1,0,0,0,1498,1499,3,216,108,
  	0,1499,1500,5,160,0,0,1500,1503,3,206,103,0,1501,1502,5,25,0,0,1502,1504,
  	3,140,70,0,1503,1501,1,0,0,0,1503,1504,1,0,0,0,1504,215,1,0,0,0,1505,
  	1506,3,240,120,0,1506,217,1,0,0,0,1507,1508,3,240,120,0,1508,219,1,0,
  	0,0,1509,1510,3,240,120,0,1510,221,1,0,0,0,1511,1512,3,240,120,0,1512,
  	223,1,0,0,0,1513,1514,3,240,120,0,1514,225,1,0,0,0,1515,1516,3,240,120,
  	0,1516,227,1,0,0,0,1517,1518,3,240,120,0,1518,229,1,0,0,0,1519,1520,5,
  	168,0,0,1520,231,1,0,0,0,1521,1522,3,230,115,0,1522,233,1,0,0,0,1523,
  	1524,3,240,120,0,1524,235,1,0,0,0,1525,1526,3,240,120,0,1526,237,1,0,
  	0,0,1527,1528,3,240,120,0,1528,239,1,0,0,0,1529,1530,7,18,0,0,1530,241,
  	1,0,0,0,1531,1532,5,62,0,0,1532,1533,5,87,0,0,1533,1534,5,48,0,0,1534,
  	243,1,0,0,0,1535,1536,5,62,0,0,1536,1537,5,48,0,0,1537,245,1,0,0,0,1538,
  	1539,5,93,0,0,1539,1540,5,105,0,0,1540,247,1,0,0,0,1541,1542,7,19,0,0,
  	1542,249,1,0,0,0,155,252,258,286,300,308,311,317,326,329,333,338,345,
  	348,352,356,359,368,371,376,378,383,385,391,395,418,427,430,438,448,453,
  	456,461,464,471,476,482,496,501,507,510,515,518,521,531,533,537,544,549,
  	561,569,597,603,609,618,635,640,648,651,657,668,678,681,688,715,722,735,
  	746,758,763,783,792,798,802,809,823,831,854,859,872,885,902,910,915,919,
  	929,934,940,945,954,959,963,973,978,988,996,1001,1006,1015,1021,1024,
  	1027,1030,1033,1043,1045,1054,1090,1098,1112,1117,1123,1126,1136,1145,
  	1150,1155,1161,1166,1170,1175,1182,1205,1207,1215,1228,1238,1241,1250,
  	1256,1260,1270,1278,1286,1288,1298,1304,1311,1320,1327,1335,1344,1375,
  	1386,1388,1400,1404,1416,1420,1426,1432,1439,1461,1466,1492,1503
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  athenaparserParserStaticData = staticData.release();
}

}

AthenaParser::AthenaParser(TokenStream *input) : AthenaParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

AthenaParser::AthenaParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  AthenaParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *athenaparserParserStaticData->atn, athenaparserParserStaticData->decisionToDFA, athenaparserParserStaticData->sharedContextCache, options);
}

AthenaParser::~AthenaParser() {
  delete _interpreter;
}

const atn::ATN& AthenaParser::getATN() const {
  return *athenaparserParserStaticData->atn;
}

std::string AthenaParser::getGrammarFileName() const {
  return "AthenaParser.g4";
}

const std::vector<std::string>& AthenaParser::getRuleNames() const {
  return athenaparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& AthenaParser::getVocabulary() const {
  return athenaparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView AthenaParser::getSerializedATN() const {
  return athenaparserParserStaticData->serializedATN;
}


//----------------- StmtContext ------------------------------------------------------------------

AthenaParser::StmtContext::StmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::CommandContext* AthenaParser::StmtContext::command() {
  return getRuleContext<AthenaParser::CommandContext>(0);
}

tree::TerminalNode* AthenaParser::StmtContext::EOF() {
  return getToken(AthenaParser::EOF, 0);
}

tree::TerminalNode* AthenaParser::StmtContext::SEMI() {
  return getToken(AthenaParser::SEMI, 0);
}


size_t AthenaParser::StmtContext::getRuleIndex() const {
  return AthenaParser::RuleStmt;
}

void AthenaParser::StmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStmt(this);
}

void AthenaParser::StmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStmt(this);
}

AthenaParser::StmtContext* AthenaParser::stmt() {
  StmtContext *_localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
  enterRule(_localctx, 0, AthenaParser::RuleStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(250);
    command();
    setState(252);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::SEMI) {
      setState(251);
      match(AthenaParser::SEMI);
    }
    setState(254);
    match(AthenaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommandContext ------------------------------------------------------------------

AthenaParser::CommandContext::CommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Ddl_commandContext* AthenaParser::CommandContext::ddl_command() {
  return getRuleContext<AthenaParser::Ddl_commandContext>(0);
}

AthenaParser::Dml_commandContext* AthenaParser::CommandContext::dml_command() {
  return getRuleContext<AthenaParser::Dml_commandContext>(0);
}


size_t AthenaParser::CommandContext::getRuleIndex() const {
  return AthenaParser::RuleCommand;
}

void AthenaParser::CommandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCommand(this);
}

void AthenaParser::CommandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCommand(this);
}

AthenaParser::CommandContext* AthenaParser::command() {
  CommandContext *_localctx = _tracker.createInstance<CommandContext>(_ctx, getState());
  enterRule(_localctx, 2, AthenaParser::RuleCommand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(258);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::ALTER:
      case AthenaParser::CREATE:
      case AthenaParser::DESCRIBE:
      case AthenaParser::DROP:
      case AthenaParser::MSCK:
      case AthenaParser::SHOW: {
        enterOuterAlt(_localctx, 1);
        setState(256);
        ddl_command();
        break;
      }

      case AthenaParser::DEALLOCATE:
      case AthenaParser::DELETE:
      case AthenaParser::EXECUTE:
      case AthenaParser::EXPLAIN:
      case AthenaParser::INSERT:
      case AthenaParser::MERGE:
      case AthenaParser::OPTIMIZE:
      case AthenaParser::PREPARE:
      case AthenaParser::SELECT:
      case AthenaParser::UNLOAD:
      case AthenaParser::UPDATE:
      case AthenaParser::VACUUM:
      case AthenaParser::WITH: {
        enterOuterAlt(_localctx, 2);
        setState(257);
        dml_command();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ddl_commandContext ------------------------------------------------------------------

AthenaParser::Ddl_commandContext::Ddl_commandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Alter_databaseContext* AthenaParser::Ddl_commandContext::alter_database() {
  return getRuleContext<AthenaParser::Alter_databaseContext>(0);
}

AthenaParser::Alter_table_add_colsContext* AthenaParser::Ddl_commandContext::alter_table_add_cols() {
  return getRuleContext<AthenaParser::Alter_table_add_colsContext>(0);
}

AthenaParser::Alter_table_add_partContext* AthenaParser::Ddl_commandContext::alter_table_add_part() {
  return getRuleContext<AthenaParser::Alter_table_add_partContext>(0);
}

AthenaParser::Alter_table_drop_partContext* AthenaParser::Ddl_commandContext::alter_table_drop_part() {
  return getRuleContext<AthenaParser::Alter_table_drop_partContext>(0);
}

AthenaParser::Alter_table_rename_partContext* AthenaParser::Ddl_commandContext::alter_table_rename_part() {
  return getRuleContext<AthenaParser::Alter_table_rename_partContext>(0);
}

AthenaParser::Alter_table_replace_partContext* AthenaParser::Ddl_commandContext::alter_table_replace_part() {
  return getRuleContext<AthenaParser::Alter_table_replace_partContext>(0);
}

AthenaParser::Alter_table_set_locationContext* AthenaParser::Ddl_commandContext::alter_table_set_location() {
  return getRuleContext<AthenaParser::Alter_table_set_locationContext>(0);
}

AthenaParser::Alter_table_set_propsContext* AthenaParser::Ddl_commandContext::alter_table_set_props() {
  return getRuleContext<AthenaParser::Alter_table_set_propsContext>(0);
}

AthenaParser::Create_databaseContext* AthenaParser::Ddl_commandContext::create_database() {
  return getRuleContext<AthenaParser::Create_databaseContext>(0);
}

AthenaParser::Create_tableContext* AthenaParser::Ddl_commandContext::create_table() {
  return getRuleContext<AthenaParser::Create_tableContext>(0);
}

AthenaParser::Create_table_asContext* AthenaParser::Ddl_commandContext::create_table_as() {
  return getRuleContext<AthenaParser::Create_table_asContext>(0);
}

AthenaParser::Create_viewContext* AthenaParser::Ddl_commandContext::create_view() {
  return getRuleContext<AthenaParser::Create_viewContext>(0);
}

AthenaParser::Drop_databaseContext* AthenaParser::Ddl_commandContext::drop_database() {
  return getRuleContext<AthenaParser::Drop_databaseContext>(0);
}

AthenaParser::Drop_tableContext* AthenaParser::Ddl_commandContext::drop_table() {
  return getRuleContext<AthenaParser::Drop_tableContext>(0);
}

AthenaParser::Drop_viewContext* AthenaParser::Ddl_commandContext::drop_view() {
  return getRuleContext<AthenaParser::Drop_viewContext>(0);
}

AthenaParser::DescribeContext* AthenaParser::Ddl_commandContext::describe() {
  return getRuleContext<AthenaParser::DescribeContext>(0);
}

AthenaParser::Describe_viewContext* AthenaParser::Ddl_commandContext::describe_view() {
  return getRuleContext<AthenaParser::Describe_viewContext>(0);
}

AthenaParser::MsckContext* AthenaParser::Ddl_commandContext::msck() {
  return getRuleContext<AthenaParser::MsckContext>(0);
}

AthenaParser::Show_columnsContext* AthenaParser::Ddl_commandContext::show_columns() {
  return getRuleContext<AthenaParser::Show_columnsContext>(0);
}

AthenaParser::Show_create_tableContext* AthenaParser::Ddl_commandContext::show_create_table() {
  return getRuleContext<AthenaParser::Show_create_tableContext>(0);
}

AthenaParser::Show_create_viewContext* AthenaParser::Ddl_commandContext::show_create_view() {
  return getRuleContext<AthenaParser::Show_create_viewContext>(0);
}

AthenaParser::Show_databasesContext* AthenaParser::Ddl_commandContext::show_databases() {
  return getRuleContext<AthenaParser::Show_databasesContext>(0);
}

AthenaParser::Show_partitionsContext* AthenaParser::Ddl_commandContext::show_partitions() {
  return getRuleContext<AthenaParser::Show_partitionsContext>(0);
}

AthenaParser::Show_tablesContext* AthenaParser::Ddl_commandContext::show_tables() {
  return getRuleContext<AthenaParser::Show_tablesContext>(0);
}

AthenaParser::Show_tblpropertiesContext* AthenaParser::Ddl_commandContext::show_tblproperties() {
  return getRuleContext<AthenaParser::Show_tblpropertiesContext>(0);
}

AthenaParser::Show_viewsContext* AthenaParser::Ddl_commandContext::show_views() {
  return getRuleContext<AthenaParser::Show_viewsContext>(0);
}


size_t AthenaParser::Ddl_commandContext::getRuleIndex() const {
  return AthenaParser::RuleDdl_command;
}

void AthenaParser::Ddl_commandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDdl_command(this);
}

void AthenaParser::Ddl_commandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDdl_command(this);
}

AthenaParser::Ddl_commandContext* AthenaParser::ddl_command() {
  Ddl_commandContext *_localctx = _tracker.createInstance<Ddl_commandContext>(_ctx, getState());
  enterRule(_localctx, 4, AthenaParser::RuleDdl_command);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(286);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(260);
      alter_database();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(261);
      alter_table_add_cols();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(262);
      alter_table_add_part();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(263);
      alter_table_drop_part();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(264);
      alter_table_rename_part();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(265);
      alter_table_replace_part();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(266);
      alter_table_set_location();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(267);
      alter_table_set_props();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(268);
      create_database();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(269);
      create_table();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(270);
      create_table_as();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(271);
      create_view();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(272);
      drop_database();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(273);
      drop_table();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(274);
      drop_view();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(275);
      describe();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(276);
      describe_view();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(277);
      msck();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(278);
      show_columns();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(279);
      show_create_table();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(280);
      show_create_view();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(281);
      show_databases();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(282);
      show_partitions();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(283);
      show_tables();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(284);
      show_tblproperties();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(285);
      show_views();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dml_commandContext ------------------------------------------------------------------

AthenaParser::Dml_commandContext::Dml_commandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::SelectContext* AthenaParser::Dml_commandContext::select() {
  return getRuleContext<AthenaParser::SelectContext>(0);
}

AthenaParser::Insert_intoContext* AthenaParser::Dml_commandContext::insert_into() {
  return getRuleContext<AthenaParser::Insert_intoContext>(0);
}

AthenaParser::Delete_stmtContext* AthenaParser::Dml_commandContext::delete_stmt() {
  return getRuleContext<AthenaParser::Delete_stmtContext>(0);
}

AthenaParser::UpdateContext* AthenaParser::Dml_commandContext::update() {
  return getRuleContext<AthenaParser::UpdateContext>(0);
}

AthenaParser::Merge_intoContext* AthenaParser::Dml_commandContext::merge_into() {
  return getRuleContext<AthenaParser::Merge_intoContext>(0);
}

AthenaParser::Optimize_stmtContext* AthenaParser::Dml_commandContext::optimize_stmt() {
  return getRuleContext<AthenaParser::Optimize_stmtContext>(0);
}

AthenaParser::VacuumContext* AthenaParser::Dml_commandContext::vacuum() {
  return getRuleContext<AthenaParser::VacuumContext>(0);
}

AthenaParser::ExplainContext* AthenaParser::Dml_commandContext::explain() {
  return getRuleContext<AthenaParser::ExplainContext>(0);
}

AthenaParser::PrepareContext* AthenaParser::Dml_commandContext::prepare() {
  return getRuleContext<AthenaParser::PrepareContext>(0);
}

AthenaParser::ExecuteContext* AthenaParser::Dml_commandContext::execute() {
  return getRuleContext<AthenaParser::ExecuteContext>(0);
}

AthenaParser::DeallocateContext* AthenaParser::Dml_commandContext::deallocate() {
  return getRuleContext<AthenaParser::DeallocateContext>(0);
}

AthenaParser::UnloadContext* AthenaParser::Dml_commandContext::unload() {
  return getRuleContext<AthenaParser::UnloadContext>(0);
}


size_t AthenaParser::Dml_commandContext::getRuleIndex() const {
  return AthenaParser::RuleDml_command;
}

void AthenaParser::Dml_commandContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDml_command(this);
}

void AthenaParser::Dml_commandContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDml_command(this);
}

AthenaParser::Dml_commandContext* AthenaParser::dml_command() {
  Dml_commandContext *_localctx = _tracker.createInstance<Dml_commandContext>(_ctx, getState());
  enterRule(_localctx, 6, AthenaParser::RuleDml_command);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(300);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::SELECT:
      case AthenaParser::WITH: {
        enterOuterAlt(_localctx, 1);
        setState(288);
        select();
        break;
      }

      case AthenaParser::INSERT: {
        enterOuterAlt(_localctx, 2);
        setState(289);
        insert_into();
        break;
      }

      case AthenaParser::DELETE: {
        enterOuterAlt(_localctx, 3);
        setState(290);
        delete_stmt();
        break;
      }

      case AthenaParser::UPDATE: {
        enterOuterAlt(_localctx, 4);
        setState(291);
        update();
        break;
      }

      case AthenaParser::MERGE: {
        enterOuterAlt(_localctx, 5);
        setState(292);
        merge_into();
        break;
      }

      case AthenaParser::OPTIMIZE: {
        enterOuterAlt(_localctx, 6);
        setState(293);
        optimize_stmt();
        break;
      }

      case AthenaParser::VACUUM: {
        enterOuterAlt(_localctx, 7);
        setState(294);
        vacuum();
        break;
      }

      case AthenaParser::EXPLAIN: {
        enterOuterAlt(_localctx, 8);
        setState(295);
        explain();
        break;
      }

      case AthenaParser::PREPARE: {
        enterOuterAlt(_localctx, 9);
        setState(296);
        prepare();
        break;
      }

      case AthenaParser::EXECUTE: {
        enterOuterAlt(_localctx, 10);
        setState(297);
        execute();
        break;
      }

      case AthenaParser::DEALLOCATE: {
        enterOuterAlt(_localctx, 11);
        setState(298);
        deallocate();
        break;
      }

      case AthenaParser::UNLOAD: {
        enterOuterAlt(_localctx, 12);
        setState(299);
        unload();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectContext ------------------------------------------------------------------

AthenaParser::SelectContext::SelectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Select_statementContext* AthenaParser::SelectContext::select_statement() {
  return getRuleContext<AthenaParser::Select_statementContext>(0);
}

tree::TerminalNode* AthenaParser::SelectContext::WITH() {
  return getToken(AthenaParser::WITH, 0);
}

std::vector<AthenaParser::With_queryContext *> AthenaParser::SelectContext::with_query() {
  return getRuleContexts<AthenaParser::With_queryContext>();
}

AthenaParser::With_queryContext* AthenaParser::SelectContext::with_query(size_t i) {
  return getRuleContext<AthenaParser::With_queryContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::SelectContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::SelectContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::SelectContext::getRuleIndex() const {
  return AthenaParser::RuleSelect;
}

void AthenaParser::SelectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect(this);
}

void AthenaParser::SelectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect(this);
}

AthenaParser::SelectContext* AthenaParser::select() {
  SelectContext *_localctx = _tracker.createInstance<SelectContext>(_ctx, getState());
  enterRule(_localctx, 8, AthenaParser::RuleSelect);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(311);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::WITH) {
      setState(302);
      match(AthenaParser::WITH);
      setState(303);
      with_query();
      setState(308);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AthenaParser::COMMA) {
        setState(304);
        match(AthenaParser::COMMA);
        setState(305);
        with_query();
        setState(310);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(313);
    select_statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_statementContext ------------------------------------------------------------------

AthenaParser::Select_statementContext::Select_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Select_statementContext::SELECT() {
  return getToken(AthenaParser::SELECT, 0);
}

AthenaParser::Select_listContext* AthenaParser::Select_statementContext::select_list() {
  return getRuleContext<AthenaParser::Select_listContext>(0);
}

std::vector<AthenaParser::All_distinctContext *> AthenaParser::Select_statementContext::all_distinct() {
  return getRuleContexts<AthenaParser::All_distinctContext>();
}

AthenaParser::All_distinctContext* AthenaParser::Select_statementContext::all_distinct(size_t i) {
  return getRuleContext<AthenaParser::All_distinctContext>(i);
}

tree::TerminalNode* AthenaParser::Select_statementContext::FROM() {
  return getToken(AthenaParser::FROM, 0);
}

std::vector<AthenaParser::From_itemContext *> AthenaParser::Select_statementContext::from_item() {
  return getRuleContexts<AthenaParser::From_itemContext>();
}

AthenaParser::From_itemContext* AthenaParser::Select_statementContext::from_item(size_t i) {
  return getRuleContext<AthenaParser::From_itemContext>(i);
}

tree::TerminalNode* AthenaParser::Select_statementContext::WHERE() {
  return getToken(AthenaParser::WHERE, 0);
}

std::vector<AthenaParser::ConditionContext *> AthenaParser::Select_statementContext::condition() {
  return getRuleContexts<AthenaParser::ConditionContext>();
}

AthenaParser::ConditionContext* AthenaParser::Select_statementContext::condition(size_t i) {
  return getRuleContext<AthenaParser::ConditionContext>(i);
}

tree::TerminalNode* AthenaParser::Select_statementContext::GROUP() {
  return getToken(AthenaParser::GROUP, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Select_statementContext::BY() {
  return getTokens(AthenaParser::BY);
}

tree::TerminalNode* AthenaParser::Select_statementContext::BY(size_t i) {
  return getToken(AthenaParser::BY, i);
}

std::vector<AthenaParser::Grouping_elementContext *> AthenaParser::Select_statementContext::grouping_element() {
  return getRuleContexts<AthenaParser::Grouping_elementContext>();
}

AthenaParser::Grouping_elementContext* AthenaParser::Select_statementContext::grouping_element(size_t i) {
  return getRuleContext<AthenaParser::Grouping_elementContext>(i);
}

tree::TerminalNode* AthenaParser::Select_statementContext::HAVING() {
  return getToken(AthenaParser::HAVING, 0);
}

AthenaParser::Select_statementContext* AthenaParser::Select_statementContext::select_statement() {
  return getRuleContext<AthenaParser::Select_statementContext>(0);
}

tree::TerminalNode* AthenaParser::Select_statementContext::ORDER() {
  return getToken(AthenaParser::ORDER, 0);
}

std::vector<AthenaParser::Order_itemContext *> AthenaParser::Select_statementContext::order_item() {
  return getRuleContexts<AthenaParser::Order_itemContext>();
}

AthenaParser::Order_itemContext* AthenaParser::Select_statementContext::order_item(size_t i) {
  return getRuleContext<AthenaParser::Order_itemContext>(i);
}

tree::TerminalNode* AthenaParser::Select_statementContext::OFFSET() {
  return getToken(AthenaParser::OFFSET, 0);
}

std::vector<AthenaParser::CountContext *> AthenaParser::Select_statementContext::count() {
  return getRuleContexts<AthenaParser::CountContext>();
}

AthenaParser::CountContext* AthenaParser::Select_statementContext::count(size_t i) {
  return getRuleContext<AthenaParser::CountContext>(i);
}

tree::TerminalNode* AthenaParser::Select_statementContext::LIMIT() {
  return getToken(AthenaParser::LIMIT, 0);
}

tree::TerminalNode* AthenaParser::Select_statementContext::UNION() {
  return getToken(AthenaParser::UNION, 0);
}

tree::TerminalNode* AthenaParser::Select_statementContext::INTERSECT() {
  return getToken(AthenaParser::INTERSECT, 0);
}

tree::TerminalNode* AthenaParser::Select_statementContext::EXCEPT() {
  return getToken(AthenaParser::EXCEPT, 0);
}

tree::TerminalNode* AthenaParser::Select_statementContext::ALL() {
  return getToken(AthenaParser::ALL, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Select_statementContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Select_statementContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}

tree::TerminalNode* AthenaParser::Select_statementContext::ROW() {
  return getToken(AthenaParser::ROW, 0);
}

tree::TerminalNode* AthenaParser::Select_statementContext::ROWS() {
  return getToken(AthenaParser::ROWS, 0);
}


size_t AthenaParser::Select_statementContext::getRuleIndex() const {
  return AthenaParser::RuleSelect_statement;
}

void AthenaParser::Select_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_statement(this);
}

void AthenaParser::Select_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_statement(this);
}

AthenaParser::Select_statementContext* AthenaParser::select_statement() {
  Select_statementContext *_localctx = _tracker.createInstance<Select_statementContext>(_ctx, getState());
  enterRule(_localctx, 10, AthenaParser::RuleSelect_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(315);
    match(AthenaParser::SELECT);
    setState(317);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::ALL

    || _la == AthenaParser::DISTINCT) {
      setState(316);
      all_distinct();
    }
    setState(319);
    select_list();
    setState(329);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::FROM) {
      setState(320);
      match(AthenaParser::FROM);
      setState(321);
      from_item();
      setState(326);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AthenaParser::COMMA) {
        setState(322);
        match(AthenaParser::COMMA);
        setState(323);
        from_item();
        setState(328);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(333);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::WHERE) {
      setState(331);
      match(AthenaParser::WHERE);
      setState(332);
      condition();
    }
    setState(348);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::GROUP) {
      setState(335);
      match(AthenaParser::GROUP);
      setState(336);
      match(AthenaParser::BY);
      setState(338);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::ALL

      || _la == AthenaParser::DISTINCT) {
        setState(337);
        all_distinct();
      }
      setState(340);
      grouping_element();
      setState(345);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AthenaParser::COMMA) {
        setState(341);
        match(AthenaParser::COMMA);
        setState(342);
        grouping_element();
        setState(347);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(352);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::HAVING) {
      setState(350);
      match(AthenaParser::HAVING);
      setState(351);
      condition();
    }
    setState(359);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::EXCEPT

    || _la == AthenaParser::INTERSECT || _la == AthenaParser::UNION) {
      setState(354);
      _la = _input->LA(1);
      if (!(_la == AthenaParser::EXCEPT

      || _la == AthenaParser::INTERSECT || _la == AthenaParser::UNION)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(356);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::ALL

      || _la == AthenaParser::DISTINCT) {
        setState(355);
        all_distinct();
      }
      setState(358);
      select_statement();
    }
    setState(371);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      setState(361);
      match(AthenaParser::ORDER);
      setState(362);
      match(AthenaParser::BY);
      setState(363);
      order_item();
      setState(368);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AthenaParser::COMMA) {
        setState(364);
        match(AthenaParser::COMMA);
        setState(365);
        order_item();
        setState(370);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
    setState(378);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      setState(373);
      match(AthenaParser::OFFSET);
      setState(374);
      count();
      setState(376);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::ROW

      || _la == AthenaParser::ROWS) {
        setState(375);
        _la = _input->LA(1);
        if (!(_la == AthenaParser::ROW

        || _la == AthenaParser::ROWS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      break;
    }

    default:
      break;
    }
    setState(385);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      setState(380);
      match(AthenaParser::LIMIT);
      setState(383);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case AthenaParser::INTEGRAL_LITERAL: {
          setState(381);
          count();
          break;
        }

        case AthenaParser::ALL: {
          setState(382);
          match(AthenaParser::ALL);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- All_distinctContext ------------------------------------------------------------------

AthenaParser::All_distinctContext::All_distinctContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::All_distinctContext::ALL() {
  return getToken(AthenaParser::ALL, 0);
}

tree::TerminalNode* AthenaParser::All_distinctContext::DISTINCT() {
  return getToken(AthenaParser::DISTINCT, 0);
}


size_t AthenaParser::All_distinctContext::getRuleIndex() const {
  return AthenaParser::RuleAll_distinct;
}

void AthenaParser::All_distinctContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAll_distinct(this);
}

void AthenaParser::All_distinctContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAll_distinct(this);
}

AthenaParser::All_distinctContext* AthenaParser::all_distinct() {
  All_distinctContext *_localctx = _tracker.createInstance<All_distinctContext>(_ctx, getState());
  enterRule(_localctx, 12, AthenaParser::RuleAll_distinct);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(387);
    _la = _input->LA(1);
    if (!(_la == AthenaParser::ALL

    || _la == AthenaParser::DISTINCT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Order_itemContext ------------------------------------------------------------------

AthenaParser::Order_itemContext::Order_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::ExpressionContext* AthenaParser::Order_itemContext::expression() {
  return getRuleContext<AthenaParser::ExpressionContext>(0);
}

tree::TerminalNode* AthenaParser::Order_itemContext::NULLS() {
  return getToken(AthenaParser::NULLS, 0);
}

tree::TerminalNode* AthenaParser::Order_itemContext::ASC() {
  return getToken(AthenaParser::ASC, 0);
}

tree::TerminalNode* AthenaParser::Order_itemContext::DESC() {
  return getToken(AthenaParser::DESC, 0);
}

tree::TerminalNode* AthenaParser::Order_itemContext::FIRST() {
  return getToken(AthenaParser::FIRST, 0);
}

tree::TerminalNode* AthenaParser::Order_itemContext::LAST() {
  return getToken(AthenaParser::LAST, 0);
}


size_t AthenaParser::Order_itemContext::getRuleIndex() const {
  return AthenaParser::RuleOrder_item;
}

void AthenaParser::Order_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrder_item(this);
}

void AthenaParser::Order_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrder_item(this);
}

AthenaParser::Order_itemContext* AthenaParser::order_item() {
  Order_itemContext *_localctx = _tracker.createInstance<Order_itemContext>(_ctx, getState());
  enterRule(_localctx, 14, AthenaParser::RuleOrder_item);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(389);
    expression(0);
    setState(391);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::ASC

    || _la == AthenaParser::DESC) {
      setState(390);
      _la = _input->LA(1);
      if (!(_la == AthenaParser::ASC

      || _la == AthenaParser::DESC)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(395);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::NULLS) {
      setState(393);
      match(AthenaParser::NULLS);
      setState(394);
      _la = _input->LA(1);
      if (!(_la == AthenaParser::FIRST

      || _la == AthenaParser::LAST)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_itemContext ------------------------------------------------------------------

AthenaParser::From_itemContext::From_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Table_nameContext* AthenaParser::From_itemContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}


size_t AthenaParser::From_itemContext::getRuleIndex() const {
  return AthenaParser::RuleFrom_item;
}

void AthenaParser::From_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_item(this);
}

void AthenaParser::From_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_item(this);
}

AthenaParser::From_itemContext* AthenaParser::from_item() {
  From_itemContext *_localctx = _tracker.createInstance<From_itemContext>(_ctx, getState());
  enterRule(_localctx, 16, AthenaParser::RuleFrom_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(397);
    table_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CountContext ------------------------------------------------------------------

AthenaParser::CountContext::CountContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Int_numberContext* AthenaParser::CountContext::int_number() {
  return getRuleContext<AthenaParser::Int_numberContext>(0);
}


size_t AthenaParser::CountContext::getRuleIndex() const {
  return AthenaParser::RuleCount;
}

void AthenaParser::CountContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCount(this);
}

void AthenaParser::CountContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCount(this);
}

AthenaParser::CountContext* AthenaParser::count() {
  CountContext *_localctx = _tracker.createInstance<CountContext>(_ctx, getState());
  enterRule(_localctx, 18, AthenaParser::RuleCount);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(399);
    int_number();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_queryContext ------------------------------------------------------------------

AthenaParser::With_queryContext::With_queryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Id_Context* AthenaParser::With_queryContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}

tree::TerminalNode* AthenaParser::With_queryContext::AS() {
  return getToken(AthenaParser::AS, 0);
}

tree::TerminalNode* AthenaParser::With_queryContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

AthenaParser::Select_statementContext* AthenaParser::With_queryContext::select_statement() {
  return getRuleContext<AthenaParser::Select_statementContext>(0);
}

tree::TerminalNode* AthenaParser::With_queryContext::RP() {
  return getToken(AthenaParser::RP, 0);
}


size_t AthenaParser::With_queryContext::getRuleIndex() const {
  return AthenaParser::RuleWith_query;
}

void AthenaParser::With_queryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWith_query(this);
}

void AthenaParser::With_queryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWith_query(this);
}

AthenaParser::With_queryContext* AthenaParser::with_query() {
  With_queryContext *_localctx = _tracker.createInstance<With_queryContext>(_ctx, getState());
  enterRule(_localctx, 20, AthenaParser::RuleWith_query);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(401);
    id_();
    setState(402);
    match(AthenaParser::AS);
    setState(403);
    match(AthenaParser::LP);
    setState(404);
    select_statement();
    setState(405);
    match(AthenaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Grouping_elementContext ------------------------------------------------------------------

AthenaParser::Grouping_elementContext::Grouping_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::ExpressionContext* AthenaParser::Grouping_elementContext::expression() {
  return getRuleContext<AthenaParser::ExpressionContext>(0);
}


size_t AthenaParser::Grouping_elementContext::getRuleIndex() const {
  return AthenaParser::RuleGrouping_element;
}

void AthenaParser::Grouping_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGrouping_element(this);
}

void AthenaParser::Grouping_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGrouping_element(this);
}

AthenaParser::Grouping_elementContext* AthenaParser::grouping_element() {
  Grouping_elementContext *_localctx = _tracker.createInstance<Grouping_elementContext>(_ctx, getState());
  enterRule(_localctx, 22, AthenaParser::RuleGrouping_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(407);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionContext ------------------------------------------------------------------

AthenaParser::ConditionContext::ConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Boolean_expressionContext* AthenaParser::ConditionContext::boolean_expression() {
  return getRuleContext<AthenaParser::Boolean_expressionContext>(0);
}


size_t AthenaParser::ConditionContext::getRuleIndex() const {
  return AthenaParser::RuleCondition;
}

void AthenaParser::ConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCondition(this);
}

void AthenaParser::ConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCondition(this);
}

AthenaParser::ConditionContext* AthenaParser::condition() {
  ConditionContext *_localctx = _tracker.createInstance<ConditionContext>(_ctx, getState());
  enterRule(_localctx, 24, AthenaParser::RuleCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(409);
    boolean_expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Insert_intoContext ------------------------------------------------------------------

AthenaParser::Insert_intoContext::Insert_intoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Insert_intoContext::INSERT() {
  return getToken(AthenaParser::INSERT, 0);
}

tree::TerminalNode* AthenaParser::Insert_intoContext::INTO() {
  return getToken(AthenaParser::INTO, 0);
}

AthenaParser::Destination_tableContext* AthenaParser::Insert_intoContext::destination_table() {
  return getRuleContext<AthenaParser::Destination_tableContext>(0);
}

AthenaParser::Select_statementContext* AthenaParser::Insert_intoContext::select_statement() {
  return getRuleContext<AthenaParser::Select_statementContext>(0);
}

tree::TerminalNode* AthenaParser::Insert_intoContext::VALUES() {
  return getToken(AthenaParser::VALUES, 0);
}

std::vector<AthenaParser::Value_listContext *> AthenaParser::Insert_intoContext::value_list() {
  return getRuleContexts<AthenaParser::Value_listContext>();
}

AthenaParser::Value_listContext* AthenaParser::Insert_intoContext::value_list(size_t i) {
  return getRuleContext<AthenaParser::Value_listContext>(i);
}

tree::TerminalNode* AthenaParser::Insert_intoContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

AthenaParser::Column_listContext* AthenaParser::Insert_intoContext::column_list() {
  return getRuleContext<AthenaParser::Column_listContext>(0);
}

tree::TerminalNode* AthenaParser::Insert_intoContext::RP() {
  return getToken(AthenaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Insert_intoContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Insert_intoContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::Insert_intoContext::getRuleIndex() const {
  return AthenaParser::RuleInsert_into;
}

void AthenaParser::Insert_intoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInsert_into(this);
}

void AthenaParser::Insert_intoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInsert_into(this);
}

AthenaParser::Insert_intoContext* AthenaParser::insert_into() {
  Insert_intoContext *_localctx = _tracker.createInstance<Insert_intoContext>(_ctx, getState());
  enterRule(_localctx, 26, AthenaParser::RuleInsert_into);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(411);
    match(AthenaParser::INSERT);
    setState(412);
    match(AthenaParser::INTO);
    setState(413);
    destination_table();
    setState(418);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::LP) {
      setState(414);
      match(AthenaParser::LP);
      setState(415);
      column_list();
      setState(416);
      match(AthenaParser::RP);
    }
    setState(430);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::SELECT: {
        setState(420);
        select_statement();
        break;
      }

      case AthenaParser::VALUES: {
        setState(421);
        match(AthenaParser::VALUES);
        setState(422);
        value_list();
        setState(427);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == AthenaParser::COMMA) {
          setState(423);
          match(AthenaParser::COMMA);
          setState(424);
          value_list();
          setState(429);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Value_listContext ------------------------------------------------------------------

AthenaParser::Value_listContext::Value_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Value_listContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

std::vector<AthenaParser::ValueContext *> AthenaParser::Value_listContext::value() {
  return getRuleContexts<AthenaParser::ValueContext>();
}

AthenaParser::ValueContext* AthenaParser::Value_listContext::value(size_t i) {
  return getRuleContext<AthenaParser::ValueContext>(i);
}

tree::TerminalNode* AthenaParser::Value_listContext::RP() {
  return getToken(AthenaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Value_listContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Value_listContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::Value_listContext::getRuleIndex() const {
  return AthenaParser::RuleValue_list;
}

void AthenaParser::Value_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue_list(this);
}

void AthenaParser::Value_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue_list(this);
}

AthenaParser::Value_listContext* AthenaParser::value_list() {
  Value_listContext *_localctx = _tracker.createInstance<Value_listContext>(_ctx, getState());
  enterRule(_localctx, 28, AthenaParser::RuleValue_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(432);
    match(AthenaParser::LP);
    setState(433);
    value();
    setState(438);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AthenaParser::COMMA) {
      setState(434);
      match(AthenaParser::COMMA);
      setState(435);
      value();
      setState(440);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(441);
    match(AthenaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_listContext ------------------------------------------------------------------

AthenaParser::Select_listContext::Select_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AthenaParser::Select_itemContext *> AthenaParser::Select_listContext::select_item() {
  return getRuleContexts<AthenaParser::Select_itemContext>();
}

AthenaParser::Select_itemContext* AthenaParser::Select_listContext::select_item(size_t i) {
  return getRuleContext<AthenaParser::Select_itemContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::Select_listContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Select_listContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::Select_listContext::getRuleIndex() const {
  return AthenaParser::RuleSelect_list;
}

void AthenaParser::Select_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_list(this);
}

void AthenaParser::Select_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_list(this);
}

AthenaParser::Select_listContext* AthenaParser::select_list() {
  Select_listContext *_localctx = _tracker.createInstance<Select_listContext>(_ctx, getState());
  enterRule(_localctx, 30, AthenaParser::RuleSelect_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(443);
    select_item();
    setState(448);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AthenaParser::COMMA) {
      setState(444);
      match(AthenaParser::COMMA);
      setState(445);
      select_item();
      setState(450);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_itemContext ------------------------------------------------------------------

AthenaParser::Select_itemContext::Select_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::ExpressionContext* AthenaParser::Select_itemContext::expression() {
  return getRuleContext<AthenaParser::ExpressionContext>(0);
}

AthenaParser::AliasContext* AthenaParser::Select_itemContext::alias() {
  return getRuleContext<AthenaParser::AliasContext>(0);
}

tree::TerminalNode* AthenaParser::Select_itemContext::AS() {
  return getToken(AthenaParser::AS, 0);
}

tree::TerminalNode* AthenaParser::Select_itemContext::STAR() {
  return getToken(AthenaParser::STAR, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Select_itemContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Select_itemContext::DOT() {
  return getToken(AthenaParser::DOT, 0);
}


size_t AthenaParser::Select_itemContext::getRuleIndex() const {
  return AthenaParser::RuleSelect_item;
}

void AthenaParser::Select_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_item(this);
}

void AthenaParser::Select_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_item(this);
}

AthenaParser::Select_itemContext* AthenaParser::select_item() {
  Select_itemContext *_localctx = _tracker.createInstance<Select_itemContext>(_ctx, getState());
  enterRule(_localctx, 32, AthenaParser::RuleSelect_item);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(464);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(451);
      expression(0);
      setState(456);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
      case 1: {
        setState(453);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == AthenaParser::AS) {
          setState(452);
          match(AthenaParser::AS);
        }
        setState(455);
        alias();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(461);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::IDENTIFIER

      || _la == AthenaParser::DQ_STRING_LITERAL) {
        setState(458);
        table_name();
        setState(459);
        match(AthenaParser::DOT);
      }
      setState(463);
      match(AthenaParser::STAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Delete_stmtContext ------------------------------------------------------------------

AthenaParser::Delete_stmtContext::Delete_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Delete_stmtContext::DELETE() {
  return getToken(AthenaParser::DELETE, 0);
}

tree::TerminalNode* AthenaParser::Delete_stmtContext::FROM() {
  return getToken(AthenaParser::FROM, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Delete_stmtContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

AthenaParser::Db_nameContext* AthenaParser::Delete_stmtContext::db_name() {
  return getRuleContext<AthenaParser::Db_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Delete_stmtContext::DOT() {
  return getToken(AthenaParser::DOT, 0);
}

tree::TerminalNode* AthenaParser::Delete_stmtContext::WHERE() {
  return getToken(AthenaParser::WHERE, 0);
}

AthenaParser::PredicateContext* AthenaParser::Delete_stmtContext::predicate() {
  return getRuleContext<AthenaParser::PredicateContext>(0);
}


size_t AthenaParser::Delete_stmtContext::getRuleIndex() const {
  return AthenaParser::RuleDelete_stmt;
}

void AthenaParser::Delete_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDelete_stmt(this);
}

void AthenaParser::Delete_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDelete_stmt(this);
}

AthenaParser::Delete_stmtContext* AthenaParser::delete_stmt() {
  Delete_stmtContext *_localctx = _tracker.createInstance<Delete_stmtContext>(_ctx, getState());
  enterRule(_localctx, 34, AthenaParser::RuleDelete_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(466);
    match(AthenaParser::DELETE);
    setState(467);
    match(AthenaParser::FROM);
    setState(471);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(468);
      db_name();
      setState(469);
      match(AthenaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(473);
    table_name();
    setState(476);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::WHERE) {
      setState(474);
      match(AthenaParser::WHERE);
      setState(475);
      predicate();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UpdateContext ------------------------------------------------------------------

AthenaParser::UpdateContext::UpdateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::UpdateContext::UPDATE() {
  return getToken(AthenaParser::UPDATE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::UpdateContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

tree::TerminalNode* AthenaParser::UpdateContext::SET() {
  return getToken(AthenaParser::SET, 0);
}

std::vector<AthenaParser::Col_nameContext *> AthenaParser::UpdateContext::col_name() {
  return getRuleContexts<AthenaParser::Col_nameContext>();
}

AthenaParser::Col_nameContext* AthenaParser::UpdateContext::col_name(size_t i) {
  return getRuleContext<AthenaParser::Col_nameContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::UpdateContext::EQ() {
  return getTokens(AthenaParser::EQ);
}

tree::TerminalNode* AthenaParser::UpdateContext::EQ(size_t i) {
  return getToken(AthenaParser::EQ, i);
}

std::vector<AthenaParser::ExpressionContext *> AthenaParser::UpdateContext::expression() {
  return getRuleContexts<AthenaParser::ExpressionContext>();
}

AthenaParser::ExpressionContext* AthenaParser::UpdateContext::expression(size_t i) {
  return getRuleContext<AthenaParser::ExpressionContext>(i);
}

AthenaParser::Db_nameContext* AthenaParser::UpdateContext::db_name() {
  return getRuleContext<AthenaParser::Db_nameContext>(0);
}

tree::TerminalNode* AthenaParser::UpdateContext::DOT() {
  return getToken(AthenaParser::DOT, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::UpdateContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::UpdateContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}

tree::TerminalNode* AthenaParser::UpdateContext::WHERE() {
  return getToken(AthenaParser::WHERE, 0);
}

AthenaParser::PredicateContext* AthenaParser::UpdateContext::predicate() {
  return getRuleContext<AthenaParser::PredicateContext>(0);
}


size_t AthenaParser::UpdateContext::getRuleIndex() const {
  return AthenaParser::RuleUpdate;
}

void AthenaParser::UpdateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpdate(this);
}

void AthenaParser::UpdateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpdate(this);
}

AthenaParser::UpdateContext* AthenaParser::update() {
  UpdateContext *_localctx = _tracker.createInstance<UpdateContext>(_ctx, getState());
  enterRule(_localctx, 36, AthenaParser::RuleUpdate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(478);
    match(AthenaParser::UPDATE);
    setState(482);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      setState(479);
      db_name();
      setState(480);
      match(AthenaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(484);
    table_name();
    setState(485);
    match(AthenaParser::SET);
    setState(486);
    col_name();
    setState(487);
    match(AthenaParser::EQ);
    setState(488);
    expression(0);
    setState(496);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AthenaParser::COMMA) {
      setState(489);
      match(AthenaParser::COMMA);
      setState(490);
      col_name();
      setState(491);
      match(AthenaParser::EQ);
      setState(492);
      expression(0);
      setState(498);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(501);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::WHERE) {
      setState(499);
      match(AthenaParser::WHERE);
      setState(500);
      predicate();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Merge_intoContext ------------------------------------------------------------------

AthenaParser::Merge_intoContext::Merge_intoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Merge_intoContext::MERGE() {
  return getToken(AthenaParser::MERGE, 0);
}

tree::TerminalNode* AthenaParser::Merge_intoContext::INTO() {
  return getToken(AthenaParser::INTO, 0);
}

AthenaParser::Target_tableContext* AthenaParser::Merge_intoContext::target_table() {
  return getRuleContext<AthenaParser::Target_tableContext>(0);
}

tree::TerminalNode* AthenaParser::Merge_intoContext::USING() {
  return getToken(AthenaParser::USING, 0);
}

tree::TerminalNode* AthenaParser::Merge_intoContext::ON() {
  return getToken(AthenaParser::ON, 0);
}

AthenaParser::Search_conditionContext* AthenaParser::Merge_intoContext::search_condition() {
  return getRuleContext<AthenaParser::Search_conditionContext>(0);
}

AthenaParser::When_clausesContext* AthenaParser::Merge_intoContext::when_clauses() {
  return getRuleContext<AthenaParser::When_clausesContext>(0);
}

AthenaParser::Source_tableContext* AthenaParser::Merge_intoContext::source_table() {
  return getRuleContext<AthenaParser::Source_tableContext>(0);
}

AthenaParser::QueryContext* AthenaParser::Merge_intoContext::query() {
  return getRuleContext<AthenaParser::QueryContext>(0);
}

AthenaParser::Target_aliasContext* AthenaParser::Merge_intoContext::target_alias() {
  return getRuleContext<AthenaParser::Target_aliasContext>(0);
}

AthenaParser::Source_aliasContext* AthenaParser::Merge_intoContext::source_alias() {
  return getRuleContext<AthenaParser::Source_aliasContext>(0);
}

std::vector<tree::TerminalNode *> AthenaParser::Merge_intoContext::AS() {
  return getTokens(AthenaParser::AS);
}

tree::TerminalNode* AthenaParser::Merge_intoContext::AS(size_t i) {
  return getToken(AthenaParser::AS, i);
}


size_t AthenaParser::Merge_intoContext::getRuleIndex() const {
  return AthenaParser::RuleMerge_into;
}

void AthenaParser::Merge_intoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMerge_into(this);
}

void AthenaParser::Merge_intoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMerge_into(this);
}

AthenaParser::Merge_intoContext* AthenaParser::merge_into() {
  Merge_intoContext *_localctx = _tracker.createInstance<Merge_intoContext>(_ctx, getState());
  enterRule(_localctx, 38, AthenaParser::RuleMerge_into);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(503);
    match(AthenaParser::MERGE);
    setState(504);
    match(AthenaParser::INTO);
    setState(505);
    target_table();
    setState(510);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::AS || _la == AthenaParser::IDENTIFIER

    || _la == AthenaParser::DQ_STRING_LITERAL) {
      setState(507);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::AS) {
        setState(506);
        match(AthenaParser::AS);
      }
      setState(509);
      target_alias();
    }
    setState(512);
    match(AthenaParser::USING);
    setState(515);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::IDENTIFIER:
      case AthenaParser::DQ_STRING_LITERAL: {
        setState(513);
        source_table();
        break;
      }

      case AthenaParser::SELECT:
      case AthenaParser::WITH: {
        setState(514);
        query();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(521);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::AS || _la == AthenaParser::IDENTIFIER

    || _la == AthenaParser::DQ_STRING_LITERAL) {
      setState(518);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::AS) {
        setState(517);
        match(AthenaParser::AS);
      }
      setState(520);
      source_alias();
    }
    setState(523);
    match(AthenaParser::ON);
    setState(524);
    search_condition();
    setState(525);
    when_clauses();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Search_conditionContext ------------------------------------------------------------------

AthenaParser::Search_conditionContext::Search_conditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::PredicateContext* AthenaParser::Search_conditionContext::predicate() {
  return getRuleContext<AthenaParser::PredicateContext>(0);
}


size_t AthenaParser::Search_conditionContext::getRuleIndex() const {
  return AthenaParser::RuleSearch_condition;
}

void AthenaParser::Search_conditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSearch_condition(this);
}

void AthenaParser::Search_conditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSearch_condition(this);
}

AthenaParser::Search_conditionContext* AthenaParser::search_condition() {
  Search_conditionContext *_localctx = _tracker.createInstance<Search_conditionContext>(_ctx, getState());
  enterRule(_localctx, 40, AthenaParser::RuleSearch_condition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(527);
    predicate();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- When_clausesContext ------------------------------------------------------------------

AthenaParser::When_clausesContext::When_clausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AthenaParser::When_matched_and_clauseContext *> AthenaParser::When_clausesContext::when_matched_and_clause() {
  return getRuleContexts<AthenaParser::When_matched_and_clauseContext>();
}

AthenaParser::When_matched_and_clauseContext* AthenaParser::When_clausesContext::when_matched_and_clause(size_t i) {
  return getRuleContext<AthenaParser::When_matched_and_clauseContext>(i);
}

std::vector<AthenaParser::When_matched_then_clauseContext *> AthenaParser::When_clausesContext::when_matched_then_clause() {
  return getRuleContexts<AthenaParser::When_matched_then_clauseContext>();
}

AthenaParser::When_matched_then_clauseContext* AthenaParser::When_clausesContext::when_matched_then_clause(size_t i) {
  return getRuleContext<AthenaParser::When_matched_then_clauseContext>(i);
}

AthenaParser::When_not_matched_clauseContext* AthenaParser::When_clausesContext::when_not_matched_clause() {
  return getRuleContext<AthenaParser::When_not_matched_clauseContext>(0);
}


size_t AthenaParser::When_clausesContext::getRuleIndex() const {
  return AthenaParser::RuleWhen_clauses;
}

void AthenaParser::When_clausesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhen_clauses(this);
}

void AthenaParser::When_clausesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhen_clauses(this);
}

AthenaParser::When_clausesContext* AthenaParser::when_clauses() {
  When_clausesContext *_localctx = _tracker.createInstance<When_clausesContext>(_ctx, getState());
  enterRule(_localctx, 42, AthenaParser::RuleWhen_clauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(533);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(531);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
        case 1: {
          setState(529);
          when_matched_and_clause();
          break;
        }

        case 2: {
          setState(530);
          when_matched_then_clause();
          break;
        }

        default:
          break;
        } 
      }
      setState(535);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    }
    setState(537);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::WHEN) {
      setState(536);
      when_not_matched_clause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- When_not_matched_clauseContext ------------------------------------------------------------------

AthenaParser::When_not_matched_clauseContext::When_not_matched_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::When_not_matched_clauseContext::WHEN() {
  return getToken(AthenaParser::WHEN, 0);
}

tree::TerminalNode* AthenaParser::When_not_matched_clauseContext::NOT() {
  return getToken(AthenaParser::NOT, 0);
}

tree::TerminalNode* AthenaParser::When_not_matched_clauseContext::MATCHED() {
  return getToken(AthenaParser::MATCHED, 0);
}

tree::TerminalNode* AthenaParser::When_not_matched_clauseContext::THEN() {
  return getToken(AthenaParser::THEN, 0);
}

tree::TerminalNode* AthenaParser::When_not_matched_clauseContext::INSERT() {
  return getToken(AthenaParser::INSERT, 0);
}

tree::TerminalNode* AthenaParser::When_not_matched_clauseContext::VALUES() {
  return getToken(AthenaParser::VALUES, 0);
}

tree::TerminalNode* AthenaParser::When_not_matched_clauseContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

AthenaParser::Expression_list_Context* AthenaParser::When_not_matched_clauseContext::expression_list_() {
  return getRuleContext<AthenaParser::Expression_list_Context>(0);
}

tree::TerminalNode* AthenaParser::When_not_matched_clauseContext::RP() {
  return getToken(AthenaParser::RP, 0);
}

tree::TerminalNode* AthenaParser::When_not_matched_clauseContext::AND() {
  return getToken(AthenaParser::AND, 0);
}

AthenaParser::ExpressionContext* AthenaParser::When_not_matched_clauseContext::expression() {
  return getRuleContext<AthenaParser::ExpressionContext>(0);
}

AthenaParser::Column_listContext* AthenaParser::When_not_matched_clauseContext::column_list() {
  return getRuleContext<AthenaParser::Column_listContext>(0);
}


size_t AthenaParser::When_not_matched_clauseContext::getRuleIndex() const {
  return AthenaParser::RuleWhen_not_matched_clause;
}

void AthenaParser::When_not_matched_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhen_not_matched_clause(this);
}

void AthenaParser::When_not_matched_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhen_not_matched_clause(this);
}

AthenaParser::When_not_matched_clauseContext* AthenaParser::when_not_matched_clause() {
  When_not_matched_clauseContext *_localctx = _tracker.createInstance<When_not_matched_clauseContext>(_ctx, getState());
  enterRule(_localctx, 44, AthenaParser::RuleWhen_not_matched_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(539);
    match(AthenaParser::WHEN);
    setState(540);
    match(AthenaParser::NOT);
    setState(541);
    match(AthenaParser::MATCHED);
    setState(544);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::AND) {
      setState(542);
      match(AthenaParser::AND);
      setState(543);
      expression(0);
    }
    setState(546);
    match(AthenaParser::THEN);
    setState(547);
    match(AthenaParser::INSERT);
    setState(549);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::IDENTIFIER

    || _la == AthenaParser::DQ_STRING_LITERAL) {
      setState(548);
      column_list();
    }
    setState(551);
    match(AthenaParser::VALUES);
    setState(552);
    match(AthenaParser::LP);
    setState(553);
    expression_list_();
    setState(554);
    match(AthenaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_list_Context ------------------------------------------------------------------

AthenaParser::Expression_list_Context::Expression_list_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AthenaParser::ExpressionContext *> AthenaParser::Expression_list_Context::expression() {
  return getRuleContexts<AthenaParser::ExpressionContext>();
}

AthenaParser::ExpressionContext* AthenaParser::Expression_list_Context::expression(size_t i) {
  return getRuleContext<AthenaParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::Expression_list_Context::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Expression_list_Context::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::Expression_list_Context::getRuleIndex() const {
  return AthenaParser::RuleExpression_list_;
}

void AthenaParser::Expression_list_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression_list_(this);
}

void AthenaParser::Expression_list_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression_list_(this);
}

AthenaParser::Expression_list_Context* AthenaParser::expression_list_() {
  Expression_list_Context *_localctx = _tracker.createInstance<Expression_list_Context>(_ctx, getState());
  enterRule(_localctx, 46, AthenaParser::RuleExpression_list_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(556);
    expression(0);
    setState(561);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AthenaParser::COMMA) {
      setState(557);
      match(AthenaParser::COMMA);
      setState(558);
      expression(0);
      setState(563);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Column_listContext ------------------------------------------------------------------

AthenaParser::Column_listContext::Column_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AthenaParser::Col_nameContext *> AthenaParser::Column_listContext::col_name() {
  return getRuleContexts<AthenaParser::Col_nameContext>();
}

AthenaParser::Col_nameContext* AthenaParser::Column_listContext::col_name(size_t i) {
  return getRuleContext<AthenaParser::Col_nameContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::Column_listContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Column_listContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::Column_listContext::getRuleIndex() const {
  return AthenaParser::RuleColumn_list;
}

void AthenaParser::Column_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumn_list(this);
}

void AthenaParser::Column_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumn_list(this);
}

AthenaParser::Column_listContext* AthenaParser::column_list() {
  Column_listContext *_localctx = _tracker.createInstance<Column_listContext>(_ctx, getState());
  enterRule(_localctx, 48, AthenaParser::RuleColumn_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(564);
    col_name();
    setState(569);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AthenaParser::COMMA) {
      setState(565);
      match(AthenaParser::COMMA);
      setState(566);
      col_name();
      setState(571);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- When_matched_and_clauseContext ------------------------------------------------------------------

AthenaParser::When_matched_and_clauseContext::When_matched_and_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::When_matched_and_clauseContext::WHEN() {
  return getToken(AthenaParser::WHEN, 0);
}

tree::TerminalNode* AthenaParser::When_matched_and_clauseContext::MATCHED() {
  return getToken(AthenaParser::MATCHED, 0);
}

tree::TerminalNode* AthenaParser::When_matched_and_clauseContext::AND() {
  return getToken(AthenaParser::AND, 0);
}

AthenaParser::ExpressionContext* AthenaParser::When_matched_and_clauseContext::expression() {
  return getRuleContext<AthenaParser::ExpressionContext>(0);
}

tree::TerminalNode* AthenaParser::When_matched_and_clauseContext::THEN() {
  return getToken(AthenaParser::THEN, 0);
}

AthenaParser::Update_deleteContext* AthenaParser::When_matched_and_clauseContext::update_delete() {
  return getRuleContext<AthenaParser::Update_deleteContext>(0);
}


size_t AthenaParser::When_matched_and_clauseContext::getRuleIndex() const {
  return AthenaParser::RuleWhen_matched_and_clause;
}

void AthenaParser::When_matched_and_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhen_matched_and_clause(this);
}

void AthenaParser::When_matched_and_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhen_matched_and_clause(this);
}

AthenaParser::When_matched_and_clauseContext* AthenaParser::when_matched_and_clause() {
  When_matched_and_clauseContext *_localctx = _tracker.createInstance<When_matched_and_clauseContext>(_ctx, getState());
  enterRule(_localctx, 50, AthenaParser::RuleWhen_matched_and_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(572);
    match(AthenaParser::WHEN);
    setState(573);
    match(AthenaParser::MATCHED);
    setState(574);
    match(AthenaParser::AND);
    setState(575);
    expression(0);
    setState(576);
    match(AthenaParser::THEN);
    setState(577);
    update_delete();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- When_matched_then_clauseContext ------------------------------------------------------------------

AthenaParser::When_matched_then_clauseContext::When_matched_then_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::When_matched_then_clauseContext::WHEN() {
  return getToken(AthenaParser::WHEN, 0);
}

tree::TerminalNode* AthenaParser::When_matched_then_clauseContext::MATCHED() {
  return getToken(AthenaParser::MATCHED, 0);
}

tree::TerminalNode* AthenaParser::When_matched_then_clauseContext::THEN() {
  return getToken(AthenaParser::THEN, 0);
}

AthenaParser::Update_deleteContext* AthenaParser::When_matched_then_clauseContext::update_delete() {
  return getRuleContext<AthenaParser::Update_deleteContext>(0);
}


size_t AthenaParser::When_matched_then_clauseContext::getRuleIndex() const {
  return AthenaParser::RuleWhen_matched_then_clause;
}

void AthenaParser::When_matched_then_clauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhen_matched_then_clause(this);
}

void AthenaParser::When_matched_then_clauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhen_matched_then_clause(this);
}

AthenaParser::When_matched_then_clauseContext* AthenaParser::when_matched_then_clause() {
  When_matched_then_clauseContext *_localctx = _tracker.createInstance<When_matched_then_clauseContext>(_ctx, getState());
  enterRule(_localctx, 52, AthenaParser::RuleWhen_matched_then_clause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(579);
    match(AthenaParser::WHEN);
    setState(580);
    match(AthenaParser::MATCHED);
    setState(581);
    match(AthenaParser::THEN);
    setState(582);
    update_delete();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Update_deleteContext ------------------------------------------------------------------

AthenaParser::Update_deleteContext::Update_deleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Update_deleteContext::UPDATE() {
  return getToken(AthenaParser::UPDATE, 0);
}

tree::TerminalNode* AthenaParser::Update_deleteContext::SET() {
  return getToken(AthenaParser::SET, 0);
}

tree::TerminalNode* AthenaParser::Update_deleteContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

std::vector<AthenaParser::Col_nameContext *> AthenaParser::Update_deleteContext::col_name() {
  return getRuleContexts<AthenaParser::Col_nameContext>();
}

AthenaParser::Col_nameContext* AthenaParser::Update_deleteContext::col_name(size_t i) {
  return getRuleContext<AthenaParser::Col_nameContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::Update_deleteContext::EQ() {
  return getTokens(AthenaParser::EQ);
}

tree::TerminalNode* AthenaParser::Update_deleteContext::EQ(size_t i) {
  return getToken(AthenaParser::EQ, i);
}

std::vector<AthenaParser::ExpressionContext *> AthenaParser::Update_deleteContext::expression() {
  return getRuleContexts<AthenaParser::ExpressionContext>();
}

AthenaParser::ExpressionContext* AthenaParser::Update_deleteContext::expression(size_t i) {
  return getRuleContext<AthenaParser::ExpressionContext>(i);
}

tree::TerminalNode* AthenaParser::Update_deleteContext::RP() {
  return getToken(AthenaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Update_deleteContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Update_deleteContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}

tree::TerminalNode* AthenaParser::Update_deleteContext::DELETE() {
  return getToken(AthenaParser::DELETE, 0);
}


size_t AthenaParser::Update_deleteContext::getRuleIndex() const {
  return AthenaParser::RuleUpdate_delete;
}

void AthenaParser::Update_deleteContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpdate_delete(this);
}

void AthenaParser::Update_deleteContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpdate_delete(this);
}

AthenaParser::Update_deleteContext* AthenaParser::update_delete() {
  Update_deleteContext *_localctx = _tracker.createInstance<Update_deleteContext>(_ctx, getState());
  enterRule(_localctx, 54, AthenaParser::RuleUpdate_delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(603);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::UPDATE: {
        enterOuterAlt(_localctx, 1);
        setState(584);
        match(AthenaParser::UPDATE);
        setState(585);
        match(AthenaParser::SET);
        setState(586);
        match(AthenaParser::LP);
        setState(587);
        col_name();
        setState(588);
        match(AthenaParser::EQ);
        setState(589);
        expression(0);
        setState(597);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == AthenaParser::COMMA) {
          setState(590);
          match(AthenaParser::COMMA);
          setState(591);
          col_name();
          setState(592);
          match(AthenaParser::EQ);
          setState(593);
          expression(0);
          setState(599);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(600);
        match(AthenaParser::RP);
        break;
      }

      case AthenaParser::DELETE: {
        enterOuterAlt(_localctx, 2);
        setState(602);
        match(AthenaParser::DELETE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Optimize_stmtContext ------------------------------------------------------------------

AthenaParser::Optimize_stmtContext::Optimize_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Optimize_stmtContext::OPTIMIZE() {
  return getToken(AthenaParser::OPTIMIZE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Optimize_stmtContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Optimize_stmtContext::REWRITE() {
  return getToken(AthenaParser::REWRITE, 0);
}

tree::TerminalNode* AthenaParser::Optimize_stmtContext::DATA() {
  return getToken(AthenaParser::DATA, 0);
}

tree::TerminalNode* AthenaParser::Optimize_stmtContext::USING() {
  return getToken(AthenaParser::USING, 0);
}

tree::TerminalNode* AthenaParser::Optimize_stmtContext::BIN_PACK() {
  return getToken(AthenaParser::BIN_PACK, 0);
}

AthenaParser::Db_nameContext* AthenaParser::Optimize_stmtContext::db_name() {
  return getRuleContext<AthenaParser::Db_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Optimize_stmtContext::DOT() {
  return getToken(AthenaParser::DOT, 0);
}

tree::TerminalNode* AthenaParser::Optimize_stmtContext::WHERE() {
  return getToken(AthenaParser::WHERE, 0);
}

AthenaParser::PredicateContext* AthenaParser::Optimize_stmtContext::predicate() {
  return getRuleContext<AthenaParser::PredicateContext>(0);
}


size_t AthenaParser::Optimize_stmtContext::getRuleIndex() const {
  return AthenaParser::RuleOptimize_stmt;
}

void AthenaParser::Optimize_stmtContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOptimize_stmt(this);
}

void AthenaParser::Optimize_stmtContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOptimize_stmt(this);
}

AthenaParser::Optimize_stmtContext* AthenaParser::optimize_stmt() {
  Optimize_stmtContext *_localctx = _tracker.createInstance<Optimize_stmtContext>(_ctx, getState());
  enterRule(_localctx, 56, AthenaParser::RuleOptimize_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(605);
    match(AthenaParser::OPTIMIZE);
    setState(609);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      setState(606);
      db_name();
      setState(607);
      match(AthenaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(611);
    table_name();
    setState(612);
    match(AthenaParser::REWRITE);
    setState(613);
    match(AthenaParser::DATA);
    setState(614);
    match(AthenaParser::USING);
    setState(615);
    match(AthenaParser::BIN_PACK);
    setState(618);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::WHERE) {
      setState(616);
      match(AthenaParser::WHERE);
      setState(617);
      predicate();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VacuumContext ------------------------------------------------------------------

AthenaParser::VacuumContext::VacuumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::VacuumContext::VACUUM() {
  return getToken(AthenaParser::VACUUM, 0);
}

AthenaParser::Target_tableContext* AthenaParser::VacuumContext::target_table() {
  return getRuleContext<AthenaParser::Target_tableContext>(0);
}


size_t AthenaParser::VacuumContext::getRuleIndex() const {
  return AthenaParser::RuleVacuum;
}

void AthenaParser::VacuumContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVacuum(this);
}

void AthenaParser::VacuumContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVacuum(this);
}

AthenaParser::VacuumContext* AthenaParser::vacuum() {
  VacuumContext *_localctx = _tracker.createInstance<VacuumContext>(_ctx, getState());
  enterRule(_localctx, 58, AthenaParser::RuleVacuum);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(620);
    match(AthenaParser::VACUUM);
    setState(621);
    target_table();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Target_tableContext ------------------------------------------------------------------

AthenaParser::Target_tableContext::Target_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Table_nameContext* AthenaParser::Target_tableContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}


size_t AthenaParser::Target_tableContext::getRuleIndex() const {
  return AthenaParser::RuleTarget_table;
}

void AthenaParser::Target_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTarget_table(this);
}

void AthenaParser::Target_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTarget_table(this);
}

AthenaParser::Target_tableContext* AthenaParser::target_table() {
  Target_tableContext *_localctx = _tracker.createInstance<Target_tableContext>(_ctx, getState());
  enterRule(_localctx, 60, AthenaParser::RuleTarget_table);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(623);
    table_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Source_tableContext ------------------------------------------------------------------

AthenaParser::Source_tableContext::Source_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Table_nameContext* AthenaParser::Source_tableContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}


size_t AthenaParser::Source_tableContext::getRuleIndex() const {
  return AthenaParser::RuleSource_table;
}

void AthenaParser::Source_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSource_table(this);
}

void AthenaParser::Source_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSource_table(this);
}

AthenaParser::Source_tableContext* AthenaParser::source_table() {
  Source_tableContext *_localctx = _tracker.createInstance<Source_tableContext>(_ctx, getState());
  enterRule(_localctx, 62, AthenaParser::RuleSource_table);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(625);
    table_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplainContext ------------------------------------------------------------------

AthenaParser::ExplainContext::ExplainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::ExplainContext::EXPLAIN() {
  return getToken(AthenaParser::EXPLAIN, 0);
}

AthenaParser::StatementContext* AthenaParser::ExplainContext::statement() {
  return getRuleContext<AthenaParser::StatementContext>(0);
}

tree::TerminalNode* AthenaParser::ExplainContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

std::vector<AthenaParser::Explain_optionContext *> AthenaParser::ExplainContext::explain_option() {
  return getRuleContexts<AthenaParser::Explain_optionContext>();
}

AthenaParser::Explain_optionContext* AthenaParser::ExplainContext::explain_option(size_t i) {
  return getRuleContext<AthenaParser::Explain_optionContext>(i);
}

tree::TerminalNode* AthenaParser::ExplainContext::RP() {
  return getToken(AthenaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::ExplainContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::ExplainContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}

tree::TerminalNode* AthenaParser::ExplainContext::ANALYZE() {
  return getToken(AthenaParser::ANALYZE, 0);
}

tree::TerminalNode* AthenaParser::ExplainContext::FORMAT() {
  return getToken(AthenaParser::FORMAT, 0);
}

tree::TerminalNode* AthenaParser::ExplainContext::TEXT() {
  return getToken(AthenaParser::TEXT, 0);
}

tree::TerminalNode* AthenaParser::ExplainContext::JSON() {
  return getToken(AthenaParser::JSON, 0);
}


size_t AthenaParser::ExplainContext::getRuleIndex() const {
  return AthenaParser::RuleExplain;
}

void AthenaParser::ExplainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplain(this);
}

void AthenaParser::ExplainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplain(this);
}

AthenaParser::ExplainContext* AthenaParser::explain() {
  ExplainContext *_localctx = _tracker.createInstance<ExplainContext>(_ctx, getState());
  enterRule(_localctx, 64, AthenaParser::RuleExplain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(651);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(627);
      match(AthenaParser::EXPLAIN);
      setState(628);
      statement();
      setState(640);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::LP) {
        setState(629);
        match(AthenaParser::LP);
        setState(630);
        explain_option();
        setState(635);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == AthenaParser::COMMA) {
          setState(631);
          match(AthenaParser::COMMA);
          setState(632);
          explain_option();
          setState(637);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(638);
        match(AthenaParser::RP);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(642);
      match(AthenaParser::EXPLAIN);
      setState(643);
      match(AthenaParser::ANALYZE);
      setState(648);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::LP) {
        setState(644);
        match(AthenaParser::LP);
        setState(645);
        match(AthenaParser::FORMAT);
        setState(646);
        _la = _input->LA(1);
        if (!(_la == AthenaParser::JSON

        || _la == AthenaParser::TEXT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(647);
        match(AthenaParser::RP);
      }
      setState(650);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Explain_optionContext ------------------------------------------------------------------

AthenaParser::Explain_optionContext::Explain_optionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Explain_optionContext::FORMAT() {
  return getToken(AthenaParser::FORMAT, 0);
}

tree::TerminalNode* AthenaParser::Explain_optionContext::TEXT() {
  return getToken(AthenaParser::TEXT, 0);
}

tree::TerminalNode* AthenaParser::Explain_optionContext::GRAPHVIZ() {
  return getToken(AthenaParser::GRAPHVIZ, 0);
}

tree::TerminalNode* AthenaParser::Explain_optionContext::JSON() {
  return getToken(AthenaParser::JSON, 0);
}

tree::TerminalNode* AthenaParser::Explain_optionContext::TYPE() {
  return getToken(AthenaParser::TYPE, 0);
}

tree::TerminalNode* AthenaParser::Explain_optionContext::LOGICAL() {
  return getToken(AthenaParser::LOGICAL, 0);
}

tree::TerminalNode* AthenaParser::Explain_optionContext::DISTRIBUTED() {
  return getToken(AthenaParser::DISTRIBUTED, 0);
}

tree::TerminalNode* AthenaParser::Explain_optionContext::VALIDATE() {
  return getToken(AthenaParser::VALIDATE, 0);
}

tree::TerminalNode* AthenaParser::Explain_optionContext::IO() {
  return getToken(AthenaParser::IO, 0);
}


size_t AthenaParser::Explain_optionContext::getRuleIndex() const {
  return AthenaParser::RuleExplain_option;
}

void AthenaParser::Explain_optionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplain_option(this);
}

void AthenaParser::Explain_optionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplain_option(this);
}

AthenaParser::Explain_optionContext* AthenaParser::explain_option() {
  Explain_optionContext *_localctx = _tracker.createInstance<Explain_optionContext>(_ctx, getState());
  enterRule(_localctx, 66, AthenaParser::RuleExplain_option);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(657);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::FORMAT: {
        enterOuterAlt(_localctx, 1);
        setState(653);
        match(AthenaParser::FORMAT);
        setState(654);
        _la = _input->LA(1);
        if (!(_la == AthenaParser::GRAPHVIZ || _la == AthenaParser::JSON

        || _la == AthenaParser::TEXT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case AthenaParser::TYPE: {
        enterOuterAlt(_localctx, 2);
        setState(655);
        match(AthenaParser::TYPE);
        setState(656);
        _la = _input->LA(1);
        if (!(((((_la - 40) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 40)) & 2200096997377) != 0) || _la == AthenaParser::VALIDATE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrepareContext ------------------------------------------------------------------

AthenaParser::PrepareContext::PrepareContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::PrepareContext::PREPARE() {
  return getToken(AthenaParser::PREPARE, 0);
}

AthenaParser::Statement_nameContext* AthenaParser::PrepareContext::statement_name() {
  return getRuleContext<AthenaParser::Statement_nameContext>(0);
}

tree::TerminalNode* AthenaParser::PrepareContext::FROM() {
  return getToken(AthenaParser::FROM, 0);
}

AthenaParser::StatementContext* AthenaParser::PrepareContext::statement() {
  return getRuleContext<AthenaParser::StatementContext>(0);
}


size_t AthenaParser::PrepareContext::getRuleIndex() const {
  return AthenaParser::RulePrepare;
}

void AthenaParser::PrepareContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrepare(this);
}

void AthenaParser::PrepareContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrepare(this);
}

AthenaParser::PrepareContext* AthenaParser::prepare() {
  PrepareContext *_localctx = _tracker.createInstance<PrepareContext>(_ctx, getState());
  enterRule(_localctx, 68, AthenaParser::RulePrepare);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(659);
    match(AthenaParser::PREPARE);
    setState(660);
    statement_name();
    setState(661);
    match(AthenaParser::FROM);
    setState(662);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

AthenaParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::SelectContext* AthenaParser::StatementContext::select() {
  return getRuleContext<AthenaParser::SelectContext>(0);
}

AthenaParser::Create_table_asContext* AthenaParser::StatementContext::create_table_as() {
  return getRuleContext<AthenaParser::Create_table_asContext>(0);
}

AthenaParser::Insert_intoContext* AthenaParser::StatementContext::insert_into() {
  return getRuleContext<AthenaParser::Insert_intoContext>(0);
}

AthenaParser::UnloadContext* AthenaParser::StatementContext::unload() {
  return getRuleContext<AthenaParser::UnloadContext>(0);
}


size_t AthenaParser::StatementContext::getRuleIndex() const {
  return AthenaParser::RuleStatement;
}

void AthenaParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void AthenaParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

AthenaParser::StatementContext* AthenaParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 70, AthenaParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(668);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::SELECT:
      case AthenaParser::WITH: {
        enterOuterAlt(_localctx, 1);
        setState(664);
        select();
        break;
      }

      case AthenaParser::CREATE: {
        enterOuterAlt(_localctx, 2);
        setState(665);
        create_table_as();
        break;
      }

      case AthenaParser::INSERT: {
        enterOuterAlt(_localctx, 3);
        setState(666);
        insert_into();
        break;
      }

      case AthenaParser::UNLOAD: {
        enterOuterAlt(_localctx, 4);
        setState(667);
        unload();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExecuteContext ------------------------------------------------------------------

AthenaParser::ExecuteContext::ExecuteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::ExecuteContext::EXECUTE() {
  return getToken(AthenaParser::EXECUTE, 0);
}

AthenaParser::Statement_nameContext* AthenaParser::ExecuteContext::statement_name() {
  return getRuleContext<AthenaParser::Statement_nameContext>(0);
}

tree::TerminalNode* AthenaParser::ExecuteContext::USING() {
  return getToken(AthenaParser::USING, 0);
}

std::vector<AthenaParser::ParameterContext *> AthenaParser::ExecuteContext::parameter() {
  return getRuleContexts<AthenaParser::ParameterContext>();
}

AthenaParser::ParameterContext* AthenaParser::ExecuteContext::parameter(size_t i) {
  return getRuleContext<AthenaParser::ParameterContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::ExecuteContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::ExecuteContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::ExecuteContext::getRuleIndex() const {
  return AthenaParser::RuleExecute;
}

void AthenaParser::ExecuteContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExecute(this);
}

void AthenaParser::ExecuteContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExecute(this);
}

AthenaParser::ExecuteContext* AthenaParser::execute() {
  ExecuteContext *_localctx = _tracker.createInstance<ExecuteContext>(_ctx, getState());
  enterRule(_localctx, 72, AthenaParser::RuleExecute);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(670);
    match(AthenaParser::EXECUTE);
    setState(671);
    statement_name();
    setState(681);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::USING) {
      setState(672);
      match(AthenaParser::USING);
      setState(673);
      parameter();
      setState(678);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AthenaParser::COMMA) {
        setState(674);
        match(AthenaParser::COMMA);
        setState(675);
        parameter();
        setState(680);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterContext ------------------------------------------------------------------

AthenaParser::ParameterContext::ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::ValueContext* AthenaParser::ParameterContext::value() {
  return getRuleContext<AthenaParser::ValueContext>(0);
}


size_t AthenaParser::ParameterContext::getRuleIndex() const {
  return AthenaParser::RuleParameter;
}

void AthenaParser::ParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter(this);
}

void AthenaParser::ParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter(this);
}

AthenaParser::ParameterContext* AthenaParser::parameter() {
  ParameterContext *_localctx = _tracker.createInstance<ParameterContext>(_ctx, getState());
  enterRule(_localctx, 74, AthenaParser::RuleParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(683);
    value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueContext ------------------------------------------------------------------

AthenaParser::ValueContext::ValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Int_numberContext* AthenaParser::ValueContext::int_number() {
  return getRuleContext<AthenaParser::Int_numberContext>(0);
}

AthenaParser::StringContext* AthenaParser::ValueContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}

AthenaParser::True_falseContext* AthenaParser::ValueContext::true_false() {
  return getRuleContext<AthenaParser::True_falseContext>(0);
}


size_t AthenaParser::ValueContext::getRuleIndex() const {
  return AthenaParser::RuleValue;
}

void AthenaParser::ValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue(this);
}

void AthenaParser::ValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue(this);
}

AthenaParser::ValueContext* AthenaParser::value() {
  ValueContext *_localctx = _tracker.createInstance<ValueContext>(_ctx, getState());
  enterRule(_localctx, 76, AthenaParser::RuleValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(688);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::INTEGRAL_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(685);
        int_number();
        break;
      }

      case AthenaParser::SQ_STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(686);
        string();
        break;
      }

      case AthenaParser::FALSE:
      case AthenaParser::TRUE: {
        enterOuterAlt(_localctx, 3);
        setState(687);
        true_false();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeallocateContext ------------------------------------------------------------------

AthenaParser::DeallocateContext::DeallocateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::DeallocateContext::DEALLOCATE() {
  return getToken(AthenaParser::DEALLOCATE, 0);
}

tree::TerminalNode* AthenaParser::DeallocateContext::PREPARE() {
  return getToken(AthenaParser::PREPARE, 0);
}

AthenaParser::Statement_nameContext* AthenaParser::DeallocateContext::statement_name() {
  return getRuleContext<AthenaParser::Statement_nameContext>(0);
}


size_t AthenaParser::DeallocateContext::getRuleIndex() const {
  return AthenaParser::RuleDeallocate;
}

void AthenaParser::DeallocateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeallocate(this);
}

void AthenaParser::DeallocateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeallocate(this);
}

AthenaParser::DeallocateContext* AthenaParser::deallocate() {
  DeallocateContext *_localctx = _tracker.createInstance<DeallocateContext>(_ctx, getState());
  enterRule(_localctx, 78, AthenaParser::RuleDeallocate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(690);
    match(AthenaParser::DEALLOCATE);
    setState(691);
    match(AthenaParser::PREPARE);
    setState(692);
    statement_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnloadContext ------------------------------------------------------------------

AthenaParser::UnloadContext::UnloadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::UnloadContext::UNLOAD() {
  return getToken(AthenaParser::UNLOAD, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::UnloadContext::LP() {
  return getTokens(AthenaParser::LP);
}

tree::TerminalNode* AthenaParser::UnloadContext::LP(size_t i) {
  return getToken(AthenaParser::LP, i);
}

AthenaParser::SelectContext* AthenaParser::UnloadContext::select() {
  return getRuleContext<AthenaParser::SelectContext>(0);
}

std::vector<tree::TerminalNode *> AthenaParser::UnloadContext::RP() {
  return getTokens(AthenaParser::RP);
}

tree::TerminalNode* AthenaParser::UnloadContext::RP(size_t i) {
  return getToken(AthenaParser::RP, i);
}

tree::TerminalNode* AthenaParser::UnloadContext::TO() {
  return getToken(AthenaParser::TO, 0);
}

AthenaParser::StringContext* AthenaParser::UnloadContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}

tree::TerminalNode* AthenaParser::UnloadContext::WITH() {
  return getToken(AthenaParser::WITH, 0);
}

AthenaParser::Property_listContext* AthenaParser::UnloadContext::property_list() {
  return getRuleContext<AthenaParser::Property_listContext>(0);
}


size_t AthenaParser::UnloadContext::getRuleIndex() const {
  return AthenaParser::RuleUnload;
}

void AthenaParser::UnloadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnload(this);
}

void AthenaParser::UnloadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnload(this);
}

AthenaParser::UnloadContext* AthenaParser::unload() {
  UnloadContext *_localctx = _tracker.createInstance<UnloadContext>(_ctx, getState());
  enterRule(_localctx, 80, AthenaParser::RuleUnload);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(694);
    match(AthenaParser::UNLOAD);
    setState(695);
    match(AthenaParser::LP);
    setState(696);
    select();
    setState(697);
    match(AthenaParser::RP);
    setState(698);
    match(AthenaParser::TO);
    setState(699);
    string();
    setState(700);
    match(AthenaParser::WITH);
    setState(701);
    match(AthenaParser::LP);
    setState(702);
    property_list();
    setState(703);
    match(AthenaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Property_listContext ------------------------------------------------------------------

AthenaParser::Property_listContext::Property_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AthenaParser::Property_nameContext *> AthenaParser::Property_listContext::property_name() {
  return getRuleContexts<AthenaParser::Property_nameContext>();
}

AthenaParser::Property_nameContext* AthenaParser::Property_listContext::property_name(size_t i) {
  return getRuleContext<AthenaParser::Property_nameContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::Property_listContext::EQ() {
  return getTokens(AthenaParser::EQ);
}

tree::TerminalNode* AthenaParser::Property_listContext::EQ(size_t i) {
  return getToken(AthenaParser::EQ, i);
}

std::vector<AthenaParser::Property_valueContext *> AthenaParser::Property_listContext::property_value() {
  return getRuleContexts<AthenaParser::Property_valueContext>();
}

AthenaParser::Property_valueContext* AthenaParser::Property_listContext::property_value(size_t i) {
  return getRuleContext<AthenaParser::Property_valueContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::Property_listContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Property_listContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::Property_listContext::getRuleIndex() const {
  return AthenaParser::RuleProperty_list;
}

void AthenaParser::Property_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProperty_list(this);
}

void AthenaParser::Property_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProperty_list(this);
}

AthenaParser::Property_listContext* AthenaParser::property_list() {
  Property_listContext *_localctx = _tracker.createInstance<Property_listContext>(_ctx, getState());
  enterRule(_localctx, 82, AthenaParser::RuleProperty_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(705);
    property_name();
    setState(706);
    match(AthenaParser::EQ);
    setState(707);
    property_value();
    setState(715);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AthenaParser::COMMA) {
      setState(708);
      match(AthenaParser::COMMA);
      setState(709);
      property_name();
      setState(710);
      match(AthenaParser::EQ);
      setState(711);
      property_value();
      setState(717);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Property_valueContext ------------------------------------------------------------------

AthenaParser::Property_valueContext::Property_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::ValueContext* AthenaParser::Property_valueContext::value() {
  return getRuleContext<AthenaParser::ValueContext>(0);
}


size_t AthenaParser::Property_valueContext::getRuleIndex() const {
  return AthenaParser::RuleProperty_value;
}

void AthenaParser::Property_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProperty_value(this);
}

void AthenaParser::Property_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProperty_value(this);
}

AthenaParser::Property_valueContext* AthenaParser::property_value() {
  Property_valueContext *_localctx = _tracker.createInstance<Property_valueContext>(_ctx, getState());
  enterRule(_localctx, 84, AthenaParser::RuleProperty_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(718);
    value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredicateContext ------------------------------------------------------------------

AthenaParser::PredicateContext::PredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::True_falseContext* AthenaParser::PredicateContext::true_false() {
  return getRuleContext<AthenaParser::True_falseContext>(0);
}

AthenaParser::Boolean_expressionContext* AthenaParser::PredicateContext::boolean_expression() {
  return getRuleContext<AthenaParser::Boolean_expressionContext>(0);
}


size_t AthenaParser::PredicateContext::getRuleIndex() const {
  return AthenaParser::RulePredicate;
}

void AthenaParser::PredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPredicate(this);
}

void AthenaParser::PredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPredicate(this);
}

AthenaParser::PredicateContext* AthenaParser::predicate() {
  PredicateContext *_localctx = _tracker.createInstance<PredicateContext>(_ctx, getState());
  enterRule(_localctx, 86, AthenaParser::RulePredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(722);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(720);
      true_false();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(721);
      boolean_expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_databaseContext ------------------------------------------------------------------

AthenaParser::Alter_databaseContext::Alter_databaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Alter_databaseContext::ALTER() {
  return getToken(AthenaParser::ALTER, 0);
}

AthenaParser::Db_schemaContext* AthenaParser::Alter_databaseContext::db_schema() {
  return getRuleContext<AthenaParser::Db_schemaContext>(0);
}

AthenaParser::Database_nameContext* AthenaParser::Alter_databaseContext::database_name() {
  return getRuleContext<AthenaParser::Database_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Alter_databaseContext::SET() {
  return getToken(AthenaParser::SET, 0);
}

tree::TerminalNode* AthenaParser::Alter_databaseContext::DBPROPERTIES() {
  return getToken(AthenaParser::DBPROPERTIES, 0);
}

tree::TerminalNode* AthenaParser::Alter_databaseContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

std::vector<AthenaParser::Kv_pairContext *> AthenaParser::Alter_databaseContext::kv_pair() {
  return getRuleContexts<AthenaParser::Kv_pairContext>();
}

AthenaParser::Kv_pairContext* AthenaParser::Alter_databaseContext::kv_pair(size_t i) {
  return getRuleContext<AthenaParser::Kv_pairContext>(i);
}

tree::TerminalNode* AthenaParser::Alter_databaseContext::RP() {
  return getToken(AthenaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_databaseContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Alter_databaseContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::Alter_databaseContext::getRuleIndex() const {
  return AthenaParser::RuleAlter_database;
}

void AthenaParser::Alter_databaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_database(this);
}

void AthenaParser::Alter_databaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_database(this);
}

AthenaParser::Alter_databaseContext* AthenaParser::alter_database() {
  Alter_databaseContext *_localctx = _tracker.createInstance<Alter_databaseContext>(_ctx, getState());
  enterRule(_localctx, 88, AthenaParser::RuleAlter_database);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(724);
    match(AthenaParser::ALTER);
    setState(725);
    db_schema();
    setState(726);
    database_name();
    setState(727);
    match(AthenaParser::SET);
    setState(728);
    match(AthenaParser::DBPROPERTIES);
    setState(729);
    match(AthenaParser::LP);
    setState(730);
    kv_pair();
    setState(735);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AthenaParser::COMMA) {
      setState(731);
      match(AthenaParser::COMMA);
      setState(732);
      kv_pair();
      setState(737);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(738);
    match(AthenaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Db_schemaContext ------------------------------------------------------------------

AthenaParser::Db_schemaContext::Db_schemaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Db_schemaContext::DATABASE() {
  return getToken(AthenaParser::DATABASE, 0);
}

tree::TerminalNode* AthenaParser::Db_schemaContext::SCHEMA() {
  return getToken(AthenaParser::SCHEMA, 0);
}


size_t AthenaParser::Db_schemaContext::getRuleIndex() const {
  return AthenaParser::RuleDb_schema;
}

void AthenaParser::Db_schemaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDb_schema(this);
}

void AthenaParser::Db_schemaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDb_schema(this);
}

AthenaParser::Db_schemaContext* AthenaParser::db_schema() {
  Db_schemaContext *_localctx = _tracker.createInstance<Db_schemaContext>(_ctx, getState());
  enterRule(_localctx, 90, AthenaParser::RuleDb_schema);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(740);
    _la = _input->LA(1);
    if (!(_la == AthenaParser::DATABASE || _la == AthenaParser::SCHEMA)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kv_pairContext ------------------------------------------------------------------

AthenaParser::Kv_pairContext::Kv_pairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AthenaParser::StringContext *> AthenaParser::Kv_pairContext::string() {
  return getRuleContexts<AthenaParser::StringContext>();
}

AthenaParser::StringContext* AthenaParser::Kv_pairContext::string(size_t i) {
  return getRuleContext<AthenaParser::StringContext>(i);
}

tree::TerminalNode* AthenaParser::Kv_pairContext::EQ() {
  return getToken(AthenaParser::EQ, 0);
}

tree::TerminalNode* AthenaParser::Kv_pairContext::DQ_STRING_LITERAL() {
  return getToken(AthenaParser::DQ_STRING_LITERAL, 0);
}


size_t AthenaParser::Kv_pairContext::getRuleIndex() const {
  return AthenaParser::RuleKv_pair;
}

void AthenaParser::Kv_pairContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterKv_pair(this);
}

void AthenaParser::Kv_pairContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitKv_pair(this);
}

AthenaParser::Kv_pairContext* AthenaParser::kv_pair() {
  Kv_pairContext *_localctx = _tracker.createInstance<Kv_pairContext>(_ctx, getState());
  enterRule(_localctx, 92, AthenaParser::RuleKv_pair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(742);
    string();
    setState(743);
    match(AthenaParser::EQ);
    setState(746);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::SQ_STRING_LITERAL: {
        setState(744);
        string();
        break;
      }

      case AthenaParser::DQ_STRING_LITERAL: {
        setState(745);
        match(AthenaParser::DQ_STRING_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_add_colsContext ------------------------------------------------------------------

AthenaParser::Alter_table_add_colsContext::Alter_table_add_colsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Alter_table_add_colsContext::ALTER() {
  return getToken(AthenaParser::ALTER, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_add_colsContext::TABLE() {
  return getToken(AthenaParser::TABLE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Alter_table_add_colsContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Alter_table_add_colsContext::ADD() {
  return getToken(AthenaParser::ADD, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_add_colsContext::COLUMNS() {
  return getToken(AthenaParser::COLUMNS, 0);
}

AthenaParser::Col_nameContext* AthenaParser::Alter_table_add_colsContext::col_name() {
  return getRuleContext<AthenaParser::Col_nameContext>(0);
}

AthenaParser::Data_typeContext* AthenaParser::Alter_table_add_colsContext::data_type() {
  return getRuleContext<AthenaParser::Data_typeContext>(0);
}

tree::TerminalNode* AthenaParser::Alter_table_add_colsContext::PARTITION() {
  return getToken(AthenaParser::PARTITION, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_add_colsContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

std::vector<AthenaParser::Part_col_name_valueContext *> AthenaParser::Alter_table_add_colsContext::part_col_name_value() {
  return getRuleContexts<AthenaParser::Part_col_name_valueContext>();
}

AthenaParser::Part_col_name_valueContext* AthenaParser::Alter_table_add_colsContext::part_col_name_value(size_t i) {
  return getRuleContext<AthenaParser::Part_col_name_valueContext>(i);
}

tree::TerminalNode* AthenaParser::Alter_table_add_colsContext::RP() {
  return getToken(AthenaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_add_colsContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Alter_table_add_colsContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::Alter_table_add_colsContext::getRuleIndex() const {
  return AthenaParser::RuleAlter_table_add_cols;
}

void AthenaParser::Alter_table_add_colsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_add_cols(this);
}

void AthenaParser::Alter_table_add_colsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_add_cols(this);
}

AthenaParser::Alter_table_add_colsContext* AthenaParser::alter_table_add_cols() {
  Alter_table_add_colsContext *_localctx = _tracker.createInstance<Alter_table_add_colsContext>(_ctx, getState());
  enterRule(_localctx, 94, AthenaParser::RuleAlter_table_add_cols);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(748);
    match(AthenaParser::ALTER);
    setState(749);
    match(AthenaParser::TABLE);
    setState(750);
    table_name();
    setState(763);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::PARTITION) {
      setState(751);
      match(AthenaParser::PARTITION);
      setState(752);
      match(AthenaParser::LP);
      setState(753);
      part_col_name_value();
      setState(758);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AthenaParser::COMMA) {
        setState(754);
        match(AthenaParser::COMMA);
        setState(755);
        part_col_name_value();
        setState(760);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(761);
      match(AthenaParser::RP);
    }
    setState(765);
    match(AthenaParser::ADD);
    setState(766);
    match(AthenaParser::COLUMNS);

    setState(767);
    col_name();
    setState(768);
    data_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Part_col_name_valueContext ------------------------------------------------------------------

AthenaParser::Part_col_name_valueContext::Part_col_name_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Partition_col_nameContext* AthenaParser::Part_col_name_valueContext::partition_col_name() {
  return getRuleContext<AthenaParser::Partition_col_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Part_col_name_valueContext::EQ() {
  return getToken(AthenaParser::EQ, 0);
}

AthenaParser::Partition_col_valueContext* AthenaParser::Part_col_name_valueContext::partition_col_value() {
  return getRuleContext<AthenaParser::Partition_col_valueContext>(0);
}


size_t AthenaParser::Part_col_name_valueContext::getRuleIndex() const {
  return AthenaParser::RulePart_col_name_value;
}

void AthenaParser::Part_col_name_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPart_col_name_value(this);
}

void AthenaParser::Part_col_name_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPart_col_name_value(this);
}

AthenaParser::Part_col_name_valueContext* AthenaParser::part_col_name_value() {
  Part_col_name_valueContext *_localctx = _tracker.createInstance<Part_col_name_valueContext>(_ctx, getState());
  enterRule(_localctx, 96, AthenaParser::RulePart_col_name_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(770);
    partition_col_name();
    setState(771);
    match(AthenaParser::EQ);
    setState(772);
    partition_col_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_col_nameContext ------------------------------------------------------------------

AthenaParser::Partition_col_nameContext::Partition_col_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Col_nameContext* AthenaParser::Partition_col_nameContext::col_name() {
  return getRuleContext<AthenaParser::Col_nameContext>(0);
}


size_t AthenaParser::Partition_col_nameContext::getRuleIndex() const {
  return AthenaParser::RulePartition_col_name;
}

void AthenaParser::Partition_col_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_col_name(this);
}

void AthenaParser::Partition_col_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_col_name(this);
}

AthenaParser::Partition_col_nameContext* AthenaParser::partition_col_name() {
  Partition_col_nameContext *_localctx = _tracker.createInstance<Partition_col_nameContext>(_ctx, getState());
  enterRule(_localctx, 98, AthenaParser::RulePartition_col_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(774);
    col_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_col_valueContext ------------------------------------------------------------------

AthenaParser::Partition_col_valueContext::Partition_col_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::ValueContext* AthenaParser::Partition_col_valueContext::value() {
  return getRuleContext<AthenaParser::ValueContext>(0);
}


size_t AthenaParser::Partition_col_valueContext::getRuleIndex() const {
  return AthenaParser::RulePartition_col_value;
}

void AthenaParser::Partition_col_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_col_value(this);
}

void AthenaParser::Partition_col_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_col_value(this);
}

AthenaParser::Partition_col_valueContext* AthenaParser::partition_col_value() {
  Partition_col_valueContext *_localctx = _tracker.createInstance<Partition_col_valueContext>(_ctx, getState());
  enterRule(_localctx, 100, AthenaParser::RulePartition_col_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(776);
    value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_add_partContext ------------------------------------------------------------------

AthenaParser::Alter_table_add_partContext::Alter_table_add_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Alter_table_add_partContext::ALTER() {
  return getToken(AthenaParser::ALTER, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_add_partContext::TABLE() {
  return getToken(AthenaParser::TABLE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Alter_table_add_partContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Alter_table_add_partContext::ADD() {
  return getToken(AthenaParser::ADD, 0);
}

AthenaParser::If_not_existsContext* AthenaParser::Alter_table_add_partContext::if_not_exists() {
  return getRuleContext<AthenaParser::If_not_existsContext>(0);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_add_partContext::PARTITION() {
  return getTokens(AthenaParser::PARTITION);
}

tree::TerminalNode* AthenaParser::Alter_table_add_partContext::PARTITION(size_t i) {
  return getToken(AthenaParser::PARTITION, i);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_add_partContext::LP() {
  return getTokens(AthenaParser::LP);
}

tree::TerminalNode* AthenaParser::Alter_table_add_partContext::LP(size_t i) {
  return getToken(AthenaParser::LP, i);
}

std::vector<AthenaParser::Part_col_name_valueContext *> AthenaParser::Alter_table_add_partContext::part_col_name_value() {
  return getRuleContexts<AthenaParser::Part_col_name_valueContext>();
}

AthenaParser::Part_col_name_valueContext* AthenaParser::Alter_table_add_partContext::part_col_name_value(size_t i) {
  return getRuleContext<AthenaParser::Part_col_name_valueContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_add_partContext::RP() {
  return getTokens(AthenaParser::RP);
}

tree::TerminalNode* AthenaParser::Alter_table_add_partContext::RP(size_t i) {
  return getToken(AthenaParser::RP, i);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_add_partContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Alter_table_add_partContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_add_partContext::LOCATION() {
  return getTokens(AthenaParser::LOCATION);
}

tree::TerminalNode* AthenaParser::Alter_table_add_partContext::LOCATION(size_t i) {
  return getToken(AthenaParser::LOCATION, i);
}

std::vector<AthenaParser::StringContext *> AthenaParser::Alter_table_add_partContext::string() {
  return getRuleContexts<AthenaParser::StringContext>();
}

AthenaParser::StringContext* AthenaParser::Alter_table_add_partContext::string(size_t i) {
  return getRuleContext<AthenaParser::StringContext>(i);
}


size_t AthenaParser::Alter_table_add_partContext::getRuleIndex() const {
  return AthenaParser::RuleAlter_table_add_part;
}

void AthenaParser::Alter_table_add_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_add_part(this);
}

void AthenaParser::Alter_table_add_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_add_part(this);
}

AthenaParser::Alter_table_add_partContext* AthenaParser::alter_table_add_part() {
  Alter_table_add_partContext *_localctx = _tracker.createInstance<Alter_table_add_partContext>(_ctx, getState());
  enterRule(_localctx, 102, AthenaParser::RuleAlter_table_add_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(778);
    match(AthenaParser::ALTER);
    setState(779);
    match(AthenaParser::TABLE);
    setState(780);
    table_name();
    setState(781);
    match(AthenaParser::ADD);
    setState(783);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::IF) {
      setState(782);
      if_not_exists();
    }
    setState(800); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(785);
      match(AthenaParser::PARTITION);
      setState(786);
      match(AthenaParser::LP);
      setState(787);
      part_col_name_value();
      setState(792);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AthenaParser::COMMA) {
        setState(788);
        match(AthenaParser::COMMA);
        setState(789);
        part_col_name_value();
        setState(794);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(795);
      match(AthenaParser::RP);
      setState(798);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::LOCATION) {
        setState(796);
        match(AthenaParser::LOCATION);
        setState(797);
        string();
      }
      setState(802); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == AthenaParser::PARTITION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_drop_partContext ------------------------------------------------------------------

AthenaParser::Alter_table_drop_partContext::Alter_table_drop_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Alter_table_drop_partContext::ALTER() {
  return getToken(AthenaParser::ALTER, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_drop_partContext::TABLE() {
  return getToken(AthenaParser::TABLE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Alter_table_drop_partContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Alter_table_drop_partContext::DROP() {
  return getToken(AthenaParser::DROP, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_drop_partContext::PARTITION() {
  return getTokens(AthenaParser::PARTITION);
}

tree::TerminalNode* AthenaParser::Alter_table_drop_partContext::PARTITION(size_t i) {
  return getToken(AthenaParser::PARTITION, i);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_drop_partContext::LP() {
  return getTokens(AthenaParser::LP);
}

tree::TerminalNode* AthenaParser::Alter_table_drop_partContext::LP(size_t i) {
  return getToken(AthenaParser::LP, i);
}

std::vector<AthenaParser::Partition_specContext *> AthenaParser::Alter_table_drop_partContext::partition_spec() {
  return getRuleContexts<AthenaParser::Partition_specContext>();
}

AthenaParser::Partition_specContext* AthenaParser::Alter_table_drop_partContext::partition_spec(size_t i) {
  return getRuleContext<AthenaParser::Partition_specContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_drop_partContext::RP() {
  return getTokens(AthenaParser::RP);
}

tree::TerminalNode* AthenaParser::Alter_table_drop_partContext::RP(size_t i) {
  return getToken(AthenaParser::RP, i);
}

AthenaParser::If_existsContext* AthenaParser::Alter_table_drop_partContext::if_exists() {
  return getRuleContext<AthenaParser::If_existsContext>(0);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_drop_partContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Alter_table_drop_partContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::Alter_table_drop_partContext::getRuleIndex() const {
  return AthenaParser::RuleAlter_table_drop_part;
}

void AthenaParser::Alter_table_drop_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_drop_part(this);
}

void AthenaParser::Alter_table_drop_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_drop_part(this);
}

AthenaParser::Alter_table_drop_partContext* AthenaParser::alter_table_drop_part() {
  Alter_table_drop_partContext *_localctx = _tracker.createInstance<Alter_table_drop_partContext>(_ctx, getState());
  enterRule(_localctx, 104, AthenaParser::RuleAlter_table_drop_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(804);
    match(AthenaParser::ALTER);
    setState(805);
    match(AthenaParser::TABLE);
    setState(806);
    table_name();
    setState(807);
    match(AthenaParser::DROP);
    setState(809);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::IF) {
      setState(808);
      if_exists();
    }
    setState(811);
    match(AthenaParser::PARTITION);
    setState(812);
    match(AthenaParser::LP);
    setState(813);
    partition_spec();
    setState(814);
    match(AthenaParser::RP);
    setState(823);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AthenaParser::COMMA) {
      setState(815);
      match(AthenaParser::COMMA);
      setState(816);
      match(AthenaParser::PARTITION);
      setState(817);
      match(AthenaParser::LP);
      setState(818);
      partition_spec();
      setState(819);
      match(AthenaParser::RP);
      setState(825);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Partition_specContext ------------------------------------------------------------------

AthenaParser::Partition_specContext::Partition_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AthenaParser::Part_col_name_valueContext *> AthenaParser::Partition_specContext::part_col_name_value() {
  return getRuleContexts<AthenaParser::Part_col_name_valueContext>();
}

AthenaParser::Part_col_name_valueContext* AthenaParser::Partition_specContext::part_col_name_value(size_t i) {
  return getRuleContext<AthenaParser::Part_col_name_valueContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::Partition_specContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Partition_specContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::Partition_specContext::getRuleIndex() const {
  return AthenaParser::RulePartition_spec;
}

void AthenaParser::Partition_specContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPartition_spec(this);
}

void AthenaParser::Partition_specContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPartition_spec(this);
}

AthenaParser::Partition_specContext* AthenaParser::partition_spec() {
  Partition_specContext *_localctx = _tracker.createInstance<Partition_specContext>(_ctx, getState());
  enterRule(_localctx, 106, AthenaParser::RulePartition_spec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(826);
    part_col_name_value();
    setState(831);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AthenaParser::COMMA) {
      setState(827);
      match(AthenaParser::COMMA);
      setState(828);
      part_col_name_value();
      setState(833);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_rename_partContext ------------------------------------------------------------------

AthenaParser::Alter_table_rename_partContext::Alter_table_rename_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Alter_table_rename_partContext::ALTER() {
  return getToken(AthenaParser::ALTER, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_rename_partContext::TABLE() {
  return getToken(AthenaParser::TABLE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Alter_table_rename_partContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_rename_partContext::PARTITION() {
  return getTokens(AthenaParser::PARTITION);
}

tree::TerminalNode* AthenaParser::Alter_table_rename_partContext::PARTITION(size_t i) {
  return getToken(AthenaParser::PARTITION, i);
}

tree::TerminalNode* AthenaParser::Alter_table_rename_partContext::RENAME() {
  return getToken(AthenaParser::RENAME, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_rename_partContext::TO() {
  return getToken(AthenaParser::TO, 0);
}

std::vector<AthenaParser::Partition_specContext *> AthenaParser::Alter_table_rename_partContext::partition_spec() {
  return getRuleContexts<AthenaParser::Partition_specContext>();
}

AthenaParser::Partition_specContext* AthenaParser::Alter_table_rename_partContext::partition_spec(size_t i) {
  return getRuleContext<AthenaParser::Partition_specContext>(i);
}


size_t AthenaParser::Alter_table_rename_partContext::getRuleIndex() const {
  return AthenaParser::RuleAlter_table_rename_part;
}

void AthenaParser::Alter_table_rename_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_rename_part(this);
}

void AthenaParser::Alter_table_rename_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_rename_part(this);
}

AthenaParser::Alter_table_rename_partContext* AthenaParser::alter_table_rename_part() {
  Alter_table_rename_partContext *_localctx = _tracker.createInstance<Alter_table_rename_partContext>(_ctx, getState());
  enterRule(_localctx, 108, AthenaParser::RuleAlter_table_rename_part);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(834);
    match(AthenaParser::ALTER);
    setState(835);
    match(AthenaParser::TABLE);
    setState(836);
    table_name();
    setState(837);
    match(AthenaParser::PARTITION);

    setState(838);
    partition_spec();
    setState(839);
    match(AthenaParser::RENAME);
    setState(840);
    match(AthenaParser::TO);
    setState(841);
    match(AthenaParser::PARTITION);

    setState(842);
    antlrcpp::downCast<Alter_table_rename_partContext *>(_localctx)->np = partition_spec();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_replace_partContext ------------------------------------------------------------------

AthenaParser::Alter_table_replace_partContext::Alter_table_replace_partContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Alter_table_replace_partContext::ALTER() {
  return getToken(AthenaParser::ALTER, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_replace_partContext::TABLE() {
  return getToken(AthenaParser::TABLE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Alter_table_replace_partContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Alter_table_replace_partContext::REPLACE() {
  return getToken(AthenaParser::REPLACE, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_replace_partContext::COLUMNS() {
  return getToken(AthenaParser::COLUMNS, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_replace_partContext::LP() {
  return getTokens(AthenaParser::LP);
}

tree::TerminalNode* AthenaParser::Alter_table_replace_partContext::LP(size_t i) {
  return getToken(AthenaParser::LP, i);
}

std::vector<AthenaParser::Col_nameContext *> AthenaParser::Alter_table_replace_partContext::col_name() {
  return getRuleContexts<AthenaParser::Col_nameContext>();
}

AthenaParser::Col_nameContext* AthenaParser::Alter_table_replace_partContext::col_name(size_t i) {
  return getRuleContext<AthenaParser::Col_nameContext>(i);
}

std::vector<AthenaParser::Data_typeContext *> AthenaParser::Alter_table_replace_partContext::data_type() {
  return getRuleContexts<AthenaParser::Data_typeContext>();
}

AthenaParser::Data_typeContext* AthenaParser::Alter_table_replace_partContext::data_type(size_t i) {
  return getRuleContext<AthenaParser::Data_typeContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_replace_partContext::RP() {
  return getTokens(AthenaParser::RP);
}

tree::TerminalNode* AthenaParser::Alter_table_replace_partContext::RP(size_t i) {
  return getToken(AthenaParser::RP, i);
}

tree::TerminalNode* AthenaParser::Alter_table_replace_partContext::PARTITION() {
  return getToken(AthenaParser::PARTITION, 0);
}

std::vector<AthenaParser::Part_col_name_valueContext *> AthenaParser::Alter_table_replace_partContext::part_col_name_value() {
  return getRuleContexts<AthenaParser::Part_col_name_valueContext>();
}

AthenaParser::Part_col_name_valueContext* AthenaParser::Alter_table_replace_partContext::part_col_name_value(size_t i) {
  return getRuleContext<AthenaParser::Part_col_name_valueContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_replace_partContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Alter_table_replace_partContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::Alter_table_replace_partContext::getRuleIndex() const {
  return AthenaParser::RuleAlter_table_replace_part;
}

void AthenaParser::Alter_table_replace_partContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_replace_part(this);
}

void AthenaParser::Alter_table_replace_partContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_replace_part(this);
}

AthenaParser::Alter_table_replace_partContext* AthenaParser::alter_table_replace_part() {
  Alter_table_replace_partContext *_localctx = _tracker.createInstance<Alter_table_replace_partContext>(_ctx, getState());
  enterRule(_localctx, 110, AthenaParser::RuleAlter_table_replace_part);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(844);
    match(AthenaParser::ALTER);
    setState(845);
    match(AthenaParser::TABLE);
    setState(846);
    table_name();
    setState(859);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::PARTITION) {
      setState(847);
      match(AthenaParser::PARTITION);
      setState(848);
      match(AthenaParser::LP);
      setState(849);
      part_col_name_value();
      setState(854);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AthenaParser::COMMA) {
        setState(850);
        match(AthenaParser::COMMA);
        setState(851);
        part_col_name_value();
        setState(856);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(857);
      match(AthenaParser::RP);
    }
    setState(861);
    match(AthenaParser::REPLACE);
    setState(862);
    match(AthenaParser::COLUMNS);
    setState(863);
    match(AthenaParser::LP);
    setState(864);
    col_name();
    setState(865);
    data_type();
    setState(872);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AthenaParser::COMMA) {
      setState(866);
      match(AthenaParser::COMMA);
      setState(867);
      col_name();
      setState(868);
      data_type();
      setState(874);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(875);
    match(AthenaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_set_locationContext ------------------------------------------------------------------

AthenaParser::Alter_table_set_locationContext::Alter_table_set_locationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Alter_table_set_locationContext::ALTER() {
  return getToken(AthenaParser::ALTER, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_set_locationContext::TABLE() {
  return getToken(AthenaParser::TABLE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Alter_table_set_locationContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Alter_table_set_locationContext::SET() {
  return getToken(AthenaParser::SET, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_set_locationContext::LOCATION() {
  return getToken(AthenaParser::LOCATION, 0);
}

AthenaParser::StringContext* AthenaParser::Alter_table_set_locationContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}

tree::TerminalNode* AthenaParser::Alter_table_set_locationContext::PARTITION() {
  return getToken(AthenaParser::PARTITION, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_set_locationContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

AthenaParser::Partition_specContext* AthenaParser::Alter_table_set_locationContext::partition_spec() {
  return getRuleContext<AthenaParser::Partition_specContext>(0);
}

tree::TerminalNode* AthenaParser::Alter_table_set_locationContext::RP() {
  return getToken(AthenaParser::RP, 0);
}


size_t AthenaParser::Alter_table_set_locationContext::getRuleIndex() const {
  return AthenaParser::RuleAlter_table_set_location;
}

void AthenaParser::Alter_table_set_locationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_set_location(this);
}

void AthenaParser::Alter_table_set_locationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_set_location(this);
}

AthenaParser::Alter_table_set_locationContext* AthenaParser::alter_table_set_location() {
  Alter_table_set_locationContext *_localctx = _tracker.createInstance<Alter_table_set_locationContext>(_ctx, getState());
  enterRule(_localctx, 112, AthenaParser::RuleAlter_table_set_location);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(877);
    match(AthenaParser::ALTER);
    setState(878);
    match(AthenaParser::TABLE);
    setState(879);
    table_name();
    setState(885);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::PARTITION) {
      setState(880);
      match(AthenaParser::PARTITION);
      setState(881);
      match(AthenaParser::LP);
      setState(882);
      partition_spec();
      setState(883);
      match(AthenaParser::RP);
    }
    setState(887);
    match(AthenaParser::SET);
    setState(888);
    match(AthenaParser::LOCATION);
    setState(889);
    string();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Alter_table_set_propsContext ------------------------------------------------------------------

AthenaParser::Alter_table_set_propsContext::Alter_table_set_propsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Alter_table_set_propsContext::ALTER() {
  return getToken(AthenaParser::ALTER, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_set_propsContext::TABLE() {
  return getToken(AthenaParser::TABLE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Alter_table_set_propsContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Alter_table_set_propsContext::SET() {
  return getToken(AthenaParser::SET, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_set_propsContext::TBLPROPERTIES() {
  return getToken(AthenaParser::TBLPROPERTIES, 0);
}

tree::TerminalNode* AthenaParser::Alter_table_set_propsContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

std::vector<AthenaParser::Kv_pairContext *> AthenaParser::Alter_table_set_propsContext::kv_pair() {
  return getRuleContexts<AthenaParser::Kv_pairContext>();
}

AthenaParser::Kv_pairContext* AthenaParser::Alter_table_set_propsContext::kv_pair(size_t i) {
  return getRuleContext<AthenaParser::Kv_pairContext>(i);
}

tree::TerminalNode* AthenaParser::Alter_table_set_propsContext::RP() {
  return getToken(AthenaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Alter_table_set_propsContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Alter_table_set_propsContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::Alter_table_set_propsContext::getRuleIndex() const {
  return AthenaParser::RuleAlter_table_set_props;
}

void AthenaParser::Alter_table_set_propsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlter_table_set_props(this);
}

void AthenaParser::Alter_table_set_propsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlter_table_set_props(this);
}

AthenaParser::Alter_table_set_propsContext* AthenaParser::alter_table_set_props() {
  Alter_table_set_propsContext *_localctx = _tracker.createInstance<Alter_table_set_propsContext>(_ctx, getState());
  enterRule(_localctx, 114, AthenaParser::RuleAlter_table_set_props);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(891);
    match(AthenaParser::ALTER);
    setState(892);
    match(AthenaParser::TABLE);
    setState(893);
    table_name();
    setState(894);
    match(AthenaParser::SET);
    setState(895);
    match(AthenaParser::TBLPROPERTIES);
    setState(896);
    match(AthenaParser::LP);
    setState(897);
    kv_pair();
    setState(902);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == AthenaParser::COMMA) {
      setState(898);
      match(AthenaParser::COMMA);
      setState(899);
      kv_pair();
      setState(904);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(905);
    match(AthenaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_databaseContext ------------------------------------------------------------------

AthenaParser::Create_databaseContext::Create_databaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Create_databaseContext::CREATE() {
  return getToken(AthenaParser::CREATE, 0);
}

AthenaParser::Db_schemaContext* AthenaParser::Create_databaseContext::db_schema() {
  return getRuleContext<AthenaParser::Db_schemaContext>(0);
}

AthenaParser::Database_nameContext* AthenaParser::Create_databaseContext::database_name() {
  return getRuleContext<AthenaParser::Database_nameContext>(0);
}

AthenaParser::If_not_existsContext* AthenaParser::Create_databaseContext::if_not_exists() {
  return getRuleContext<AthenaParser::If_not_existsContext>(0);
}

tree::TerminalNode* AthenaParser::Create_databaseContext::COMMENT() {
  return getToken(AthenaParser::COMMENT, 0);
}

std::vector<AthenaParser::StringContext *> AthenaParser::Create_databaseContext::string() {
  return getRuleContexts<AthenaParser::StringContext>();
}

AthenaParser::StringContext* AthenaParser::Create_databaseContext::string(size_t i) {
  return getRuleContext<AthenaParser::StringContext>(i);
}

tree::TerminalNode* AthenaParser::Create_databaseContext::LOCATION() {
  return getToken(AthenaParser::LOCATION, 0);
}

tree::TerminalNode* AthenaParser::Create_databaseContext::WITH() {
  return getToken(AthenaParser::WITH, 0);
}

tree::TerminalNode* AthenaParser::Create_databaseContext::DBPROPERTIES() {
  return getToken(AthenaParser::DBPROPERTIES, 0);
}

tree::TerminalNode* AthenaParser::Create_databaseContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

std::vector<AthenaParser::Kv_pairContext *> AthenaParser::Create_databaseContext::kv_pair() {
  return getRuleContexts<AthenaParser::Kv_pairContext>();
}

AthenaParser::Kv_pairContext* AthenaParser::Create_databaseContext::kv_pair(size_t i) {
  return getRuleContext<AthenaParser::Kv_pairContext>(i);
}

tree::TerminalNode* AthenaParser::Create_databaseContext::RP() {
  return getToken(AthenaParser::RP, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Create_databaseContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Create_databaseContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::Create_databaseContext::getRuleIndex() const {
  return AthenaParser::RuleCreate_database;
}

void AthenaParser::Create_databaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_database(this);
}

void AthenaParser::Create_databaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_database(this);
}

AthenaParser::Create_databaseContext* AthenaParser::create_database() {
  Create_databaseContext *_localctx = _tracker.createInstance<Create_databaseContext>(_ctx, getState());
  enterRule(_localctx, 116, AthenaParser::RuleCreate_database);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(907);
    match(AthenaParser::CREATE);
    setState(908);
    db_schema();
    setState(910);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::IF) {
      setState(909);
      if_not_exists();
    }
    setState(912);
    database_name();
    setState(915);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::COMMENT) {
      setState(913);
      match(AthenaParser::COMMENT);
      setState(914);
      string();
    }
    setState(919);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::LOCATION) {
      setState(917);
      match(AthenaParser::LOCATION);
      setState(918);
      string();
    }
    setState(934);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::WITH) {
      setState(921);
      match(AthenaParser::WITH);
      setState(922);
      match(AthenaParser::DBPROPERTIES);
      setState(923);
      match(AthenaParser::LP);
      setState(924);
      kv_pair();
      setState(929);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AthenaParser::COMMA) {
        setState(925);
        match(AthenaParser::COMMA);
        setState(926);
        kv_pair();
        setState(931);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(932);
      match(AthenaParser::RP);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_tableContext ------------------------------------------------------------------

AthenaParser::Create_tableContext::Create_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Create_tableContext::CREATE() {
  return getToken(AthenaParser::CREATE, 0);
}

tree::TerminalNode* AthenaParser::Create_tableContext::EXTERNAL() {
  return getToken(AthenaParser::EXTERNAL, 0);
}

tree::TerminalNode* AthenaParser::Create_tableContext::TABLE() {
  return getToken(AthenaParser::TABLE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Create_tableContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Create_tableContext::LOCATION() {
  return getToken(AthenaParser::LOCATION, 0);
}

AthenaParser::StringContext* AthenaParser::Create_tableContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}

AthenaParser::If_not_existsContext* AthenaParser::Create_tableContext::if_not_exists() {
  return getRuleContext<AthenaParser::If_not_existsContext>(0);
}

AthenaParser::Db_nameContext* AthenaParser::Create_tableContext::db_name() {
  return getRuleContext<AthenaParser::Db_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Create_tableContext::DOT() {
  return getToken(AthenaParser::DOT, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Create_tableContext::LP() {
  return getTokens(AthenaParser::LP);
}

tree::TerminalNode* AthenaParser::Create_tableContext::LP(size_t i) {
  return getToken(AthenaParser::LP, i);
}

std::vector<AthenaParser::Col_def_with_commentContext *> AthenaParser::Create_tableContext::col_def_with_comment() {
  return getRuleContexts<AthenaParser::Col_def_with_commentContext>();
}

AthenaParser::Col_def_with_commentContext* AthenaParser::Create_tableContext::col_def_with_comment(size_t i) {
  return getRuleContext<AthenaParser::Col_def_with_commentContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::Create_tableContext::RP() {
  return getTokens(AthenaParser::RP);
}

tree::TerminalNode* AthenaParser::Create_tableContext::RP(size_t i) {
  return getToken(AthenaParser::RP, i);
}

tree::TerminalNode* AthenaParser::Create_tableContext::COMMENT() {
  return getToken(AthenaParser::COMMENT, 0);
}

AthenaParser::Table_commentContext* AthenaParser::Create_tableContext::table_comment() {
  return getRuleContext<AthenaParser::Table_commentContext>(0);
}

tree::TerminalNode* AthenaParser::Create_tableContext::PARTITIONED() {
  return getToken(AthenaParser::PARTITIONED, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Create_tableContext::BY() {
  return getTokens(AthenaParser::BY);
}

tree::TerminalNode* AthenaParser::Create_tableContext::BY(size_t i) {
  return getToken(AthenaParser::BY, i);
}

tree::TerminalNode* AthenaParser::Create_tableContext::CLUSTERED() {
  return getToken(AthenaParser::CLUSTERED, 0);
}

std::vector<AthenaParser::Col_nameContext *> AthenaParser::Create_tableContext::col_name() {
  return getRuleContexts<AthenaParser::Col_nameContext>();
}

AthenaParser::Col_nameContext* AthenaParser::Create_tableContext::col_name(size_t i) {
  return getRuleContext<AthenaParser::Col_nameContext>(i);
}

tree::TerminalNode* AthenaParser::Create_tableContext::INTO() {
  return getToken(AthenaParser::INTO, 0);
}

AthenaParser::Num_bucketsContext* AthenaParser::Create_tableContext::num_buckets() {
  return getRuleContext<AthenaParser::Num_bucketsContext>(0);
}

tree::TerminalNode* AthenaParser::Create_tableContext::BUCKETS() {
  return getToken(AthenaParser::BUCKETS, 0);
}

tree::TerminalNode* AthenaParser::Create_tableContext::ROW() {
  return getToken(AthenaParser::ROW, 0);
}

tree::TerminalNode* AthenaParser::Create_tableContext::FORMAT() {
  return getToken(AthenaParser::FORMAT, 0);
}

AthenaParser::Row_formatContext* AthenaParser::Create_tableContext::row_format() {
  return getRuleContext<AthenaParser::Row_formatContext>(0);
}

tree::TerminalNode* AthenaParser::Create_tableContext::STORED() {
  return getToken(AthenaParser::STORED, 0);
}

tree::TerminalNode* AthenaParser::Create_tableContext::AS() {
  return getToken(AthenaParser::AS, 0);
}

AthenaParser::File_formatContext* AthenaParser::Create_tableContext::file_format() {
  return getRuleContext<AthenaParser::File_formatContext>(0);
}

tree::TerminalNode* AthenaParser::Create_tableContext::TBLPROPERTIES() {
  return getToken(AthenaParser::TBLPROPERTIES, 0);
}

AthenaParser::Property_listContext* AthenaParser::Create_tableContext::property_list() {
  return getRuleContext<AthenaParser::Property_listContext>(0);
}

std::vector<tree::TerminalNode *> AthenaParser::Create_tableContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Create_tableContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}


size_t AthenaParser::Create_tableContext::getRuleIndex() const {
  return AthenaParser::RuleCreate_table;
}

void AthenaParser::Create_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table(this);
}

void AthenaParser::Create_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table(this);
}

AthenaParser::Create_tableContext* AthenaParser::create_table() {
  Create_tableContext *_localctx = _tracker.createInstance<Create_tableContext>(_ctx, getState());
  enterRule(_localctx, 118, AthenaParser::RuleCreate_table);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(936);
    match(AthenaParser::CREATE);
    setState(937);
    match(AthenaParser::EXTERNAL);
    setState(938);
    match(AthenaParser::TABLE);
    setState(940);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::IF) {
      setState(939);
      if_not_exists();
    }
    setState(945);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      setState(942);
      db_name();
      setState(943);
      match(AthenaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(947);
    table_name();
    setState(959);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::LP) {
      setState(948);
      match(AthenaParser::LP);
      setState(949);
      col_def_with_comment();
      setState(954);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AthenaParser::COMMA) {
        setState(950);
        match(AthenaParser::COMMA);
        setState(951);
        col_def_with_comment();
        setState(956);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(957);
      match(AthenaParser::RP);
    }
    setState(963);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::COMMENT) {
      setState(961);
      match(AthenaParser::COMMENT);
      setState(962);
      table_comment();
    }
    setState(978);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::PARTITIONED) {
      setState(965);
      match(AthenaParser::PARTITIONED);
      setState(966);
      match(AthenaParser::BY);
      setState(967);
      match(AthenaParser::LP);
      setState(968);
      col_def_with_comment();
      setState(973);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AthenaParser::COMMA) {
        setState(969);
        match(AthenaParser::COMMA);
        setState(970);
        col_def_with_comment();
        setState(975);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(976);
      match(AthenaParser::RP);
    }
    setState(996);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::CLUSTERED) {
      setState(980);
      match(AthenaParser::CLUSTERED);
      setState(981);
      match(AthenaParser::BY);
      setState(982);
      match(AthenaParser::LP);
      setState(983);
      col_name();
      setState(988);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AthenaParser::COMMA) {
        setState(984);
        match(AthenaParser::COMMA);
        setState(985);
        col_name();
        setState(990);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(991);
      match(AthenaParser::RP);
      setState(992);
      match(AthenaParser::INTO);
      setState(993);
      num_buckets();
      setState(994);
      match(AthenaParser::BUCKETS);
    }
    setState(1001);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::ROW) {
      setState(998);
      match(AthenaParser::ROW);
      setState(999);
      match(AthenaParser::FORMAT);
      setState(1000);
      row_format();
    }
    setState(1006);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::STORED) {
      setState(1003);
      match(AthenaParser::STORED);
      setState(1004);
      match(AthenaParser::AS);
      setState(1005);
      file_format();
    }
    setState(1008);
    match(AthenaParser::LOCATION);
    setState(1009);
    string();
    setState(1015);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::TBLPROPERTIES) {
      setState(1010);
      match(AthenaParser::TBLPROPERTIES);
      setState(1011);
      match(AthenaParser::LP);
      setState(1012);
      property_list();
      setState(1013);
      match(AthenaParser::RP);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_commentContext ------------------------------------------------------------------

AthenaParser::Table_commentContext::Table_commentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::StringContext* AthenaParser::Table_commentContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}


size_t AthenaParser::Table_commentContext::getRuleIndex() const {
  return AthenaParser::RuleTable_comment;
}

void AthenaParser::Table_commentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_comment(this);
}

void AthenaParser::Table_commentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_comment(this);
}

AthenaParser::Table_commentContext* AthenaParser::table_comment() {
  Table_commentContext *_localctx = _tracker.createInstance<Table_commentContext>(_ctx, getState());
  enterRule(_localctx, 120, AthenaParser::RuleTable_comment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1017);
    string();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Row_formatContext ------------------------------------------------------------------

AthenaParser::Row_formatContext::Row_formatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Row_formatContext::DELIMITED() {
  return getToken(AthenaParser::DELIMITED, 0);
}

AthenaParser::Table_row_format_field_identifierContext* AthenaParser::Row_formatContext::table_row_format_field_identifier() {
  return getRuleContext<AthenaParser::Table_row_format_field_identifierContext>(0);
}

AthenaParser::Table_row_format_coll_items_identifierContext* AthenaParser::Row_formatContext::table_row_format_coll_items_identifier() {
  return getRuleContext<AthenaParser::Table_row_format_coll_items_identifierContext>(0);
}

AthenaParser::Table_row_format_map_keys_identifierContext* AthenaParser::Row_formatContext::table_row_format_map_keys_identifier() {
  return getRuleContext<AthenaParser::Table_row_format_map_keys_identifierContext>(0);
}

AthenaParser::Table_row_format_lines_identifierContext* AthenaParser::Row_formatContext::table_row_format_lines_identifier() {
  return getRuleContext<AthenaParser::Table_row_format_lines_identifierContext>(0);
}

AthenaParser::Table_row_null_formatContext* AthenaParser::Row_formatContext::table_row_null_format() {
  return getRuleContext<AthenaParser::Table_row_null_formatContext>(0);
}

tree::TerminalNode* AthenaParser::Row_formatContext::SERDE() {
  return getToken(AthenaParser::SERDE, 0);
}

AthenaParser::StringContext* AthenaParser::Row_formatContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}

tree::TerminalNode* AthenaParser::Row_formatContext::WITH() {
  return getToken(AthenaParser::WITH, 0);
}

tree::TerminalNode* AthenaParser::Row_formatContext::SERDEPROPERTIES() {
  return getToken(AthenaParser::SERDEPROPERTIES, 0);
}

tree::TerminalNode* AthenaParser::Row_formatContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

AthenaParser::Property_listContext* AthenaParser::Row_formatContext::property_list() {
  return getRuleContext<AthenaParser::Property_listContext>(0);
}

tree::TerminalNode* AthenaParser::Row_formatContext::RP() {
  return getToken(AthenaParser::RP, 0);
}


size_t AthenaParser::Row_formatContext::getRuleIndex() const {
  return AthenaParser::RuleRow_format;
}

void AthenaParser::Row_formatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRow_format(this);
}

void AthenaParser::Row_formatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRow_format(this);
}

AthenaParser::Row_formatContext* AthenaParser::row_format() {
  Row_formatContext *_localctx = _tracker.createInstance<Row_formatContext>(_ctx, getState());
  enterRule(_localctx, 122, AthenaParser::RuleRow_format);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1045);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::DELIMITED: {
        enterOuterAlt(_localctx, 1);
        setState(1019);
        match(AthenaParser::DELIMITED);
        setState(1021);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == AthenaParser::FIELDS) {
          setState(1020);
          table_row_format_field_identifier();
        }
        setState(1024);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == AthenaParser::COLLECTION) {
          setState(1023);
          table_row_format_coll_items_identifier();
        }
        setState(1027);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == AthenaParser::MAP) {
          setState(1026);
          table_row_format_map_keys_identifier();
        }
        setState(1030);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == AthenaParser::LINES) {
          setState(1029);
          table_row_format_lines_identifier();
        }
        setState(1033);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == AthenaParser::NULL_) {
          setState(1032);
          table_row_null_format();
        }
        break;
      }

      case AthenaParser::SERDE: {
        enterOuterAlt(_localctx, 2);
        setState(1035);
        match(AthenaParser::SERDE);
        setState(1036);
        string();
        setState(1043);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == AthenaParser::WITH) {
          setState(1037);
          match(AthenaParser::WITH);
          setState(1038);
          match(AthenaParser::SERDEPROPERTIES);
          setState(1039);
          match(AthenaParser::LP);
          setState(1040);
          property_list();
          setState(1041);
          match(AthenaParser::RP);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_row_format_field_identifierContext ------------------------------------------------------------------

AthenaParser::Table_row_format_field_identifierContext::Table_row_format_field_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Table_row_format_field_identifierContext::FIELDS() {
  return getToken(AthenaParser::FIELDS, 0);
}

tree::TerminalNode* AthenaParser::Table_row_format_field_identifierContext::TERMINATED() {
  return getToken(AthenaParser::TERMINATED, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Table_row_format_field_identifierContext::BY() {
  return getTokens(AthenaParser::BY);
}

tree::TerminalNode* AthenaParser::Table_row_format_field_identifierContext::BY(size_t i) {
  return getToken(AthenaParser::BY, i);
}

std::vector<AthenaParser::StringContext *> AthenaParser::Table_row_format_field_identifierContext::string() {
  return getRuleContexts<AthenaParser::StringContext>();
}

AthenaParser::StringContext* AthenaParser::Table_row_format_field_identifierContext::string(size_t i) {
  return getRuleContext<AthenaParser::StringContext>(i);
}

tree::TerminalNode* AthenaParser::Table_row_format_field_identifierContext::ESCAPED() {
  return getToken(AthenaParser::ESCAPED, 0);
}


size_t AthenaParser::Table_row_format_field_identifierContext::getRuleIndex() const {
  return AthenaParser::RuleTable_row_format_field_identifier;
}

void AthenaParser::Table_row_format_field_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_row_format_field_identifier(this);
}

void AthenaParser::Table_row_format_field_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_row_format_field_identifier(this);
}

AthenaParser::Table_row_format_field_identifierContext* AthenaParser::table_row_format_field_identifier() {
  Table_row_format_field_identifierContext *_localctx = _tracker.createInstance<Table_row_format_field_identifierContext>(_ctx, getState());
  enterRule(_localctx, 124, AthenaParser::RuleTable_row_format_field_identifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1047);
    match(AthenaParser::FIELDS);
    setState(1048);
    match(AthenaParser::TERMINATED);
    setState(1049);
    match(AthenaParser::BY);
    setState(1050);
    string();
    setState(1054);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::ESCAPED) {
      setState(1051);
      match(AthenaParser::ESCAPED);
      setState(1052);
      match(AthenaParser::BY);
      setState(1053);
      string();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_row_format_coll_items_identifierContext ------------------------------------------------------------------

AthenaParser::Table_row_format_coll_items_identifierContext::Table_row_format_coll_items_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Table_row_format_coll_items_identifierContext::COLLECTION() {
  return getToken(AthenaParser::COLLECTION, 0);
}

tree::TerminalNode* AthenaParser::Table_row_format_coll_items_identifierContext::ITEMS() {
  return getToken(AthenaParser::ITEMS, 0);
}

tree::TerminalNode* AthenaParser::Table_row_format_coll_items_identifierContext::TERMINATED() {
  return getToken(AthenaParser::TERMINATED, 0);
}

tree::TerminalNode* AthenaParser::Table_row_format_coll_items_identifierContext::BY() {
  return getToken(AthenaParser::BY, 0);
}

AthenaParser::StringContext* AthenaParser::Table_row_format_coll_items_identifierContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}


size_t AthenaParser::Table_row_format_coll_items_identifierContext::getRuleIndex() const {
  return AthenaParser::RuleTable_row_format_coll_items_identifier;
}

void AthenaParser::Table_row_format_coll_items_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_row_format_coll_items_identifier(this);
}

void AthenaParser::Table_row_format_coll_items_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_row_format_coll_items_identifier(this);
}

AthenaParser::Table_row_format_coll_items_identifierContext* AthenaParser::table_row_format_coll_items_identifier() {
  Table_row_format_coll_items_identifierContext *_localctx = _tracker.createInstance<Table_row_format_coll_items_identifierContext>(_ctx, getState());
  enterRule(_localctx, 126, AthenaParser::RuleTable_row_format_coll_items_identifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1056);
    match(AthenaParser::COLLECTION);
    setState(1057);
    match(AthenaParser::ITEMS);
    setState(1058);
    match(AthenaParser::TERMINATED);
    setState(1059);
    match(AthenaParser::BY);
    setState(1060);
    string();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_row_format_map_keys_identifierContext ------------------------------------------------------------------

AthenaParser::Table_row_format_map_keys_identifierContext::Table_row_format_map_keys_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Table_row_format_map_keys_identifierContext::MAP() {
  return getToken(AthenaParser::MAP, 0);
}

tree::TerminalNode* AthenaParser::Table_row_format_map_keys_identifierContext::KEYS() {
  return getToken(AthenaParser::KEYS, 0);
}

tree::TerminalNode* AthenaParser::Table_row_format_map_keys_identifierContext::TERMINATED() {
  return getToken(AthenaParser::TERMINATED, 0);
}

tree::TerminalNode* AthenaParser::Table_row_format_map_keys_identifierContext::BY() {
  return getToken(AthenaParser::BY, 0);
}

AthenaParser::StringContext* AthenaParser::Table_row_format_map_keys_identifierContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}


size_t AthenaParser::Table_row_format_map_keys_identifierContext::getRuleIndex() const {
  return AthenaParser::RuleTable_row_format_map_keys_identifier;
}

void AthenaParser::Table_row_format_map_keys_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_row_format_map_keys_identifier(this);
}

void AthenaParser::Table_row_format_map_keys_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_row_format_map_keys_identifier(this);
}

AthenaParser::Table_row_format_map_keys_identifierContext* AthenaParser::table_row_format_map_keys_identifier() {
  Table_row_format_map_keys_identifierContext *_localctx = _tracker.createInstance<Table_row_format_map_keys_identifierContext>(_ctx, getState());
  enterRule(_localctx, 128, AthenaParser::RuleTable_row_format_map_keys_identifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1062);
    match(AthenaParser::MAP);
    setState(1063);
    match(AthenaParser::KEYS);
    setState(1064);
    match(AthenaParser::TERMINATED);
    setState(1065);
    match(AthenaParser::BY);
    setState(1066);
    string();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_row_format_lines_identifierContext ------------------------------------------------------------------

AthenaParser::Table_row_format_lines_identifierContext::Table_row_format_lines_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Table_row_format_lines_identifierContext::LINES() {
  return getToken(AthenaParser::LINES, 0);
}

tree::TerminalNode* AthenaParser::Table_row_format_lines_identifierContext::TERMINATED() {
  return getToken(AthenaParser::TERMINATED, 0);
}

tree::TerminalNode* AthenaParser::Table_row_format_lines_identifierContext::BY() {
  return getToken(AthenaParser::BY, 0);
}

AthenaParser::StringContext* AthenaParser::Table_row_format_lines_identifierContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}


size_t AthenaParser::Table_row_format_lines_identifierContext::getRuleIndex() const {
  return AthenaParser::RuleTable_row_format_lines_identifier;
}

void AthenaParser::Table_row_format_lines_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_row_format_lines_identifier(this);
}

void AthenaParser::Table_row_format_lines_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_row_format_lines_identifier(this);
}

AthenaParser::Table_row_format_lines_identifierContext* AthenaParser::table_row_format_lines_identifier() {
  Table_row_format_lines_identifierContext *_localctx = _tracker.createInstance<Table_row_format_lines_identifierContext>(_ctx, getState());
  enterRule(_localctx, 130, AthenaParser::RuleTable_row_format_lines_identifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1068);
    match(AthenaParser::LINES);
    setState(1069);
    match(AthenaParser::TERMINATED);
    setState(1070);
    match(AthenaParser::BY);
    setState(1071);
    string();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_row_null_formatContext ------------------------------------------------------------------

AthenaParser::Table_row_null_formatContext::Table_row_null_formatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Table_row_null_formatContext::NULL_() {
  return getToken(AthenaParser::NULL_, 0);
}

tree::TerminalNode* AthenaParser::Table_row_null_formatContext::DEFINED() {
  return getToken(AthenaParser::DEFINED, 0);
}

tree::TerminalNode* AthenaParser::Table_row_null_formatContext::AS() {
  return getToken(AthenaParser::AS, 0);
}

AthenaParser::StringContext* AthenaParser::Table_row_null_formatContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}


size_t AthenaParser::Table_row_null_formatContext::getRuleIndex() const {
  return AthenaParser::RuleTable_row_null_format;
}

void AthenaParser::Table_row_null_formatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_row_null_format(this);
}

void AthenaParser::Table_row_null_formatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_row_null_format(this);
}

AthenaParser::Table_row_null_formatContext* AthenaParser::table_row_null_format() {
  Table_row_null_formatContext *_localctx = _tracker.createInstance<Table_row_null_formatContext>(_ctx, getState());
  enterRule(_localctx, 132, AthenaParser::RuleTable_row_null_format);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1073);
    match(AthenaParser::NULL_);
    setState(1074);
    match(AthenaParser::DEFINED);
    setState(1075);
    match(AthenaParser::AS);
    setState(1076);
    string();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- File_formatContext ------------------------------------------------------------------

AthenaParser::File_formatContext::File_formatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::File_formatContext::SEQUENCEFILE() {
  return getToken(AthenaParser::SEQUENCEFILE, 0);
}

tree::TerminalNode* AthenaParser::File_formatContext::TEXTFILE() {
  return getToken(AthenaParser::TEXTFILE, 0);
}

tree::TerminalNode* AthenaParser::File_formatContext::RCFILE() {
  return getToken(AthenaParser::RCFILE, 0);
}

tree::TerminalNode* AthenaParser::File_formatContext::ORC() {
  return getToken(AthenaParser::ORC, 0);
}

tree::TerminalNode* AthenaParser::File_formatContext::PARQUET() {
  return getToken(AthenaParser::PARQUET, 0);
}

tree::TerminalNode* AthenaParser::File_formatContext::AVRO() {
  return getToken(AthenaParser::AVRO, 0);
}

tree::TerminalNode* AthenaParser::File_formatContext::ION() {
  return getToken(AthenaParser::ION, 0);
}

tree::TerminalNode* AthenaParser::File_formatContext::INPUTFORMAT() {
  return getToken(AthenaParser::INPUTFORMAT, 0);
}

std::vector<AthenaParser::StringContext *> AthenaParser::File_formatContext::string() {
  return getRuleContexts<AthenaParser::StringContext>();
}

AthenaParser::StringContext* AthenaParser::File_formatContext::string(size_t i) {
  return getRuleContext<AthenaParser::StringContext>(i);
}

tree::TerminalNode* AthenaParser::File_formatContext::OUTPUTFORMAT() {
  return getToken(AthenaParser::OUTPUTFORMAT, 0);
}


size_t AthenaParser::File_formatContext::getRuleIndex() const {
  return AthenaParser::RuleFile_format;
}

void AthenaParser::File_formatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile_format(this);
}

void AthenaParser::File_formatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile_format(this);
}

AthenaParser::File_formatContext* AthenaParser::file_format() {
  File_formatContext *_localctx = _tracker.createInstance<File_formatContext>(_ctx, getState());
  enterRule(_localctx, 134, AthenaParser::RuleFile_format);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1090);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::SEQUENCEFILE: {
        enterOuterAlt(_localctx, 1);
        setState(1078);
        match(AthenaParser::SEQUENCEFILE);
        break;
      }

      case AthenaParser::TEXTFILE: {
        enterOuterAlt(_localctx, 2);
        setState(1079);
        match(AthenaParser::TEXTFILE);
        break;
      }

      case AthenaParser::RCFILE: {
        enterOuterAlt(_localctx, 3);
        setState(1080);
        match(AthenaParser::RCFILE);
        break;
      }

      case AthenaParser::ORC: {
        enterOuterAlt(_localctx, 4);
        setState(1081);
        match(AthenaParser::ORC);
        break;
      }

      case AthenaParser::PARQUET: {
        enterOuterAlt(_localctx, 5);
        setState(1082);
        match(AthenaParser::PARQUET);
        break;
      }

      case AthenaParser::AVRO: {
        enterOuterAlt(_localctx, 6);
        setState(1083);
        match(AthenaParser::AVRO);
        break;
      }

      case AthenaParser::ION: {
        enterOuterAlt(_localctx, 7);
        setState(1084);
        match(AthenaParser::ION);
        break;
      }

      case AthenaParser::INPUTFORMAT: {
        enterOuterAlt(_localctx, 8);
        setState(1085);
        match(AthenaParser::INPUTFORMAT);
        setState(1086);
        string();
        setState(1087);
        match(AthenaParser::OUTPUTFORMAT);
        setState(1088);
        string();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Num_bucketsContext ------------------------------------------------------------------

AthenaParser::Num_bucketsContext::Num_bucketsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Int_numberContext* AthenaParser::Num_bucketsContext::int_number() {
  return getRuleContext<AthenaParser::Int_numberContext>(0);
}


size_t AthenaParser::Num_bucketsContext::getRuleIndex() const {
  return AthenaParser::RuleNum_buckets;
}

void AthenaParser::Num_bucketsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNum_buckets(this);
}

void AthenaParser::Num_bucketsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNum_buckets(this);
}

AthenaParser::Num_bucketsContext* AthenaParser::num_buckets() {
  Num_bucketsContext *_localctx = _tracker.createInstance<Num_bucketsContext>(_ctx, getState());
  enterRule(_localctx, 136, AthenaParser::RuleNum_buckets);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1092);
    int_number();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Col_def_with_commentContext ------------------------------------------------------------------

AthenaParser::Col_def_with_commentContext::Col_def_with_commentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Col_nameContext* AthenaParser::Col_def_with_commentContext::col_name() {
  return getRuleContext<AthenaParser::Col_nameContext>(0);
}

AthenaParser::Data_typeContext* AthenaParser::Col_def_with_commentContext::data_type() {
  return getRuleContext<AthenaParser::Data_typeContext>(0);
}

tree::TerminalNode* AthenaParser::Col_def_with_commentContext::COMMENT() {
  return getToken(AthenaParser::COMMENT, 0);
}

AthenaParser::Col_commentContext* AthenaParser::Col_def_with_commentContext::col_comment() {
  return getRuleContext<AthenaParser::Col_commentContext>(0);
}


size_t AthenaParser::Col_def_with_commentContext::getRuleIndex() const {
  return AthenaParser::RuleCol_def_with_comment;
}

void AthenaParser::Col_def_with_commentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCol_def_with_comment(this);
}

void AthenaParser::Col_def_with_commentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCol_def_with_comment(this);
}

AthenaParser::Col_def_with_commentContext* AthenaParser::col_def_with_comment() {
  Col_def_with_commentContext *_localctx = _tracker.createInstance<Col_def_with_commentContext>(_ctx, getState());
  enterRule(_localctx, 138, AthenaParser::RuleCol_def_with_comment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1094);
    col_name();
    setState(1095);
    data_type();
    setState(1098);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::COMMENT) {
      setState(1096);
      match(AthenaParser::COMMENT);
      setState(1097);
      col_comment();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Col_commentContext ------------------------------------------------------------------

AthenaParser::Col_commentContext::Col_commentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::StringContext* AthenaParser::Col_commentContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}


size_t AthenaParser::Col_commentContext::getRuleIndex() const {
  return AthenaParser::RuleCol_comment;
}

void AthenaParser::Col_commentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCol_comment(this);
}

void AthenaParser::Col_commentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCol_comment(this);
}

AthenaParser::Col_commentContext* AthenaParser::col_comment() {
  Col_commentContext *_localctx = _tracker.createInstance<Col_commentContext>(_ctx, getState());
  enterRule(_localctx, 140, AthenaParser::RuleCol_comment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1100);
    string();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_table_asContext ------------------------------------------------------------------

AthenaParser::Create_table_asContext::Create_table_asContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Create_table_asContext::CREATE() {
  return getToken(AthenaParser::CREATE, 0);
}

tree::TerminalNode* AthenaParser::Create_table_asContext::TABLE() {
  return getToken(AthenaParser::TABLE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Create_table_asContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Create_table_asContext::AS() {
  return getToken(AthenaParser::AS, 0);
}

AthenaParser::QueryContext* AthenaParser::Create_table_asContext::query() {
  return getRuleContext<AthenaParser::QueryContext>(0);
}

std::vector<tree::TerminalNode *> AthenaParser::Create_table_asContext::WITH() {
  return getTokens(AthenaParser::WITH);
}

tree::TerminalNode* AthenaParser::Create_table_asContext::WITH(size_t i) {
  return getToken(AthenaParser::WITH, i);
}

tree::TerminalNode* AthenaParser::Create_table_asContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

std::vector<AthenaParser::Prop_expContext *> AthenaParser::Create_table_asContext::prop_exp() {
  return getRuleContexts<AthenaParser::Prop_expContext>();
}

AthenaParser::Prop_expContext* AthenaParser::Create_table_asContext::prop_exp(size_t i) {
  return getRuleContext<AthenaParser::Prop_expContext>(i);
}

tree::TerminalNode* AthenaParser::Create_table_asContext::RP() {
  return getToken(AthenaParser::RP, 0);
}

tree::TerminalNode* AthenaParser::Create_table_asContext::DATA() {
  return getToken(AthenaParser::DATA, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Create_table_asContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Create_table_asContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}

tree::TerminalNode* AthenaParser::Create_table_asContext::NO() {
  return getToken(AthenaParser::NO, 0);
}


size_t AthenaParser::Create_table_asContext::getRuleIndex() const {
  return AthenaParser::RuleCreate_table_as;
}

void AthenaParser::Create_table_asContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_table_as(this);
}

void AthenaParser::Create_table_asContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_table_as(this);
}

AthenaParser::Create_table_asContext* AthenaParser::create_table_as() {
  Create_table_asContext *_localctx = _tracker.createInstance<Create_table_asContext>(_ctx, getState());
  enterRule(_localctx, 142, AthenaParser::RuleCreate_table_as);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1102);
    match(AthenaParser::CREATE);
    setState(1103);
    match(AthenaParser::TABLE);
    setState(1104);
    table_name();
    setState(1117);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::WITH) {
      setState(1105);
      match(AthenaParser::WITH);
      setState(1106);
      match(AthenaParser::LP);
      setState(1107);
      prop_exp();
      setState(1112);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == AthenaParser::COMMA) {
        setState(1108);
        match(AthenaParser::COMMA);
        setState(1109);
        prop_exp();
        setState(1114);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1115);
      match(AthenaParser::RP);
    }
    setState(1119);
    match(AthenaParser::AS);
    setState(1120);
    query();
    setState(1126);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::WITH) {
      setState(1121);
      match(AthenaParser::WITH);
      setState(1123);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::NO) {
        setState(1122);
        match(AthenaParser::NO);
      }
      setState(1125);
      match(AthenaParser::DATA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Property_nameContext ------------------------------------------------------------------

AthenaParser::Property_nameContext::Property_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Id_Context* AthenaParser::Property_nameContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}


size_t AthenaParser::Property_nameContext::getRuleIndex() const {
  return AthenaParser::RuleProperty_name;
}

void AthenaParser::Property_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProperty_name(this);
}

void AthenaParser::Property_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProperty_name(this);
}

AthenaParser::Property_nameContext* AthenaParser::property_name() {
  Property_nameContext *_localctx = _tracker.createInstance<Property_nameContext>(_ctx, getState());
  enterRule(_localctx, 144, AthenaParser::RuleProperty_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1128);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prop_expContext ------------------------------------------------------------------

AthenaParser::Prop_expContext::Prop_expContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Property_nameContext* AthenaParser::Prop_expContext::property_name() {
  return getRuleContext<AthenaParser::Property_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Prop_expContext::EQ() {
  return getToken(AthenaParser::EQ, 0);
}

AthenaParser::ExpressionContext* AthenaParser::Prop_expContext::expression() {
  return getRuleContext<AthenaParser::ExpressionContext>(0);
}


size_t AthenaParser::Prop_expContext::getRuleIndex() const {
  return AthenaParser::RuleProp_exp;
}

void AthenaParser::Prop_expContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProp_exp(this);
}

void AthenaParser::Prop_expContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProp_exp(this);
}

AthenaParser::Prop_expContext* AthenaParser::prop_exp() {
  Prop_expContext *_localctx = _tracker.createInstance<Prop_expContext>(_ctx, getState());
  enterRule(_localctx, 146, AthenaParser::RuleProp_exp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1130);
    property_name();
    setState(1131);
    match(AthenaParser::EQ);
    setState(1132);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Create_viewContext ------------------------------------------------------------------

AthenaParser::Create_viewContext::Create_viewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Create_viewContext::CREATE() {
  return getToken(AthenaParser::CREATE, 0);
}

tree::TerminalNode* AthenaParser::Create_viewContext::VIEW() {
  return getToken(AthenaParser::VIEW, 0);
}

AthenaParser::View_nameContext* AthenaParser::Create_viewContext::view_name() {
  return getRuleContext<AthenaParser::View_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Create_viewContext::AS() {
  return getToken(AthenaParser::AS, 0);
}

AthenaParser::QueryContext* AthenaParser::Create_viewContext::query() {
  return getRuleContext<AthenaParser::QueryContext>(0);
}

AthenaParser::Or_replaceContext* AthenaParser::Create_viewContext::or_replace() {
  return getRuleContext<AthenaParser::Or_replaceContext>(0);
}


size_t AthenaParser::Create_viewContext::getRuleIndex() const {
  return AthenaParser::RuleCreate_view;
}

void AthenaParser::Create_viewContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCreate_view(this);
}

void AthenaParser::Create_viewContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCreate_view(this);
}

AthenaParser::Create_viewContext* AthenaParser::create_view() {
  Create_viewContext *_localctx = _tracker.createInstance<Create_viewContext>(_ctx, getState());
  enterRule(_localctx, 148, AthenaParser::RuleCreate_view);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1134);
    match(AthenaParser::CREATE);
    setState(1136);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::OR) {
      setState(1135);
      or_replace();
    }
    setState(1138);
    match(AthenaParser::VIEW);
    setState(1139);
    view_name();
    setState(1140);
    match(AthenaParser::AS);
    setState(1141);
    query();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DescribeContext ------------------------------------------------------------------

AthenaParser::DescribeContext::DescribeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::DescribeContext::DESCRIBE() {
  return getToken(AthenaParser::DESCRIBE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::DescribeContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

AthenaParser::Db_nameContext* AthenaParser::DescribeContext::db_name() {
  return getRuleContext<AthenaParser::Db_nameContext>(0);
}

tree::TerminalNode* AthenaParser::DescribeContext::DOT() {
  return getToken(AthenaParser::DOT, 0);
}

tree::TerminalNode* AthenaParser::DescribeContext::PARTITION() {
  return getToken(AthenaParser::PARTITION, 0);
}

AthenaParser::Partition_specContext* AthenaParser::DescribeContext::partition_spec() {
  return getRuleContext<AthenaParser::Partition_specContext>(0);
}

tree::TerminalNode* AthenaParser::DescribeContext::EXTENDED() {
  return getToken(AthenaParser::EXTENDED, 0);
}

tree::TerminalNode* AthenaParser::DescribeContext::FORMATTED() {
  return getToken(AthenaParser::FORMATTED, 0);
}


size_t AthenaParser::DescribeContext::getRuleIndex() const {
  return AthenaParser::RuleDescribe;
}

void AthenaParser::DescribeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDescribe(this);
}

void AthenaParser::DescribeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDescribe(this);
}

AthenaParser::DescribeContext* AthenaParser::describe() {
  DescribeContext *_localctx = _tracker.createInstance<DescribeContext>(_ctx, getState());
  enterRule(_localctx, 150, AthenaParser::RuleDescribe);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1143);
    match(AthenaParser::DESCRIBE);
    setState(1145);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::EXTENDED

    || _la == AthenaParser::FORMATTED) {
      setState(1144);
      _la = _input->LA(1);
      if (!(_la == AthenaParser::EXTENDED

      || _la == AthenaParser::FORMATTED)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1150);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      setState(1147);
      db_name();
      setState(1148);
      match(AthenaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(1152);
    table_name();
    setState(1155);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::PARTITION) {
      setState(1153);
      match(AthenaParser::PARTITION);
      setState(1154);
      partition_spec();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Field_nameContext ------------------------------------------------------------------

AthenaParser::Field_nameContext::Field_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Id_Context* AthenaParser::Field_nameContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}


size_t AthenaParser::Field_nameContext::getRuleIndex() const {
  return AthenaParser::RuleField_name;
}

void AthenaParser::Field_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterField_name(this);
}

void AthenaParser::Field_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitField_name(this);
}

AthenaParser::Field_nameContext* AthenaParser::field_name() {
  Field_nameContext *_localctx = _tracker.createInstance<Field_nameContext>(_ctx, getState());
  enterRule(_localctx, 152, AthenaParser::RuleField_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1157);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Describe_viewContext ------------------------------------------------------------------

AthenaParser::Describe_viewContext::Describe_viewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Describe_viewContext::DESCRIBE() {
  return getToken(AthenaParser::DESCRIBE, 0);
}

AthenaParser::View_nameContext* AthenaParser::Describe_viewContext::view_name() {
  return getRuleContext<AthenaParser::View_nameContext>(0);
}


size_t AthenaParser::Describe_viewContext::getRuleIndex() const {
  return AthenaParser::RuleDescribe_view;
}

void AthenaParser::Describe_viewContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDescribe_view(this);
}

void AthenaParser::Describe_viewContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDescribe_view(this);
}

AthenaParser::Describe_viewContext* AthenaParser::describe_view() {
  Describe_viewContext *_localctx = _tracker.createInstance<Describe_viewContext>(_ctx, getState());
  enterRule(_localctx, 154, AthenaParser::RuleDescribe_view);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1159);
    match(AthenaParser::DESCRIBE);
    setState(1161);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::IDENTIFIER

    || _la == AthenaParser::DQ_STRING_LITERAL) {
      setState(1160);
      view_name();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_databaseContext ------------------------------------------------------------------

AthenaParser::Drop_databaseContext::Drop_databaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Drop_databaseContext::DROP() {
  return getToken(AthenaParser::DROP, 0);
}

AthenaParser::Db_schemaContext* AthenaParser::Drop_databaseContext::db_schema() {
  return getRuleContext<AthenaParser::Db_schemaContext>(0);
}

AthenaParser::Database_nameContext* AthenaParser::Drop_databaseContext::database_name() {
  return getRuleContext<AthenaParser::Database_nameContext>(0);
}

AthenaParser::If_existsContext* AthenaParser::Drop_databaseContext::if_exists() {
  return getRuleContext<AthenaParser::If_existsContext>(0);
}

tree::TerminalNode* AthenaParser::Drop_databaseContext::RESTRICT() {
  return getToken(AthenaParser::RESTRICT, 0);
}

tree::TerminalNode* AthenaParser::Drop_databaseContext::CASCADE() {
  return getToken(AthenaParser::CASCADE, 0);
}


size_t AthenaParser::Drop_databaseContext::getRuleIndex() const {
  return AthenaParser::RuleDrop_database;
}

void AthenaParser::Drop_databaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_database(this);
}

void AthenaParser::Drop_databaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_database(this);
}

AthenaParser::Drop_databaseContext* AthenaParser::drop_database() {
  Drop_databaseContext *_localctx = _tracker.createInstance<Drop_databaseContext>(_ctx, getState());
  enterRule(_localctx, 156, AthenaParser::RuleDrop_database);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1163);
    match(AthenaParser::DROP);
    setState(1164);
    db_schema();
    setState(1166);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::IF) {
      setState(1165);
      if_exists();
    }
    setState(1168);
    database_name();
    setState(1170);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::CASCADE || _la == AthenaParser::RESTRICT) {
      setState(1169);
      _la = _input->LA(1);
      if (!(_la == AthenaParser::CASCADE || _la == AthenaParser::RESTRICT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_tableContext ------------------------------------------------------------------

AthenaParser::Drop_tableContext::Drop_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Drop_tableContext::DROP() {
  return getToken(AthenaParser::DROP, 0);
}

tree::TerminalNode* AthenaParser::Drop_tableContext::TABLE() {
  return getToken(AthenaParser::TABLE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Drop_tableContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

AthenaParser::If_existsContext* AthenaParser::Drop_tableContext::if_exists() {
  return getRuleContext<AthenaParser::If_existsContext>(0);
}


size_t AthenaParser::Drop_tableContext::getRuleIndex() const {
  return AthenaParser::RuleDrop_table;
}

void AthenaParser::Drop_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_table(this);
}

void AthenaParser::Drop_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_table(this);
}

AthenaParser::Drop_tableContext* AthenaParser::drop_table() {
  Drop_tableContext *_localctx = _tracker.createInstance<Drop_tableContext>(_ctx, getState());
  enterRule(_localctx, 158, AthenaParser::RuleDrop_table);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1172);
    match(AthenaParser::DROP);
    setState(1173);
    match(AthenaParser::TABLE);
    setState(1175);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::IF) {
      setState(1174);
      if_exists();
    }
    setState(1177);
    table_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Drop_viewContext ------------------------------------------------------------------

AthenaParser::Drop_viewContext::Drop_viewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Drop_viewContext::DROP() {
  return getToken(AthenaParser::DROP, 0);
}

tree::TerminalNode* AthenaParser::Drop_viewContext::VIEW() {
  return getToken(AthenaParser::VIEW, 0);
}

AthenaParser::View_nameContext* AthenaParser::Drop_viewContext::view_name() {
  return getRuleContext<AthenaParser::View_nameContext>(0);
}

AthenaParser::If_existsContext* AthenaParser::Drop_viewContext::if_exists() {
  return getRuleContext<AthenaParser::If_existsContext>(0);
}


size_t AthenaParser::Drop_viewContext::getRuleIndex() const {
  return AthenaParser::RuleDrop_view;
}

void AthenaParser::Drop_viewContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDrop_view(this);
}

void AthenaParser::Drop_viewContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDrop_view(this);
}

AthenaParser::Drop_viewContext* AthenaParser::drop_view() {
  Drop_viewContext *_localctx = _tracker.createInstance<Drop_viewContext>(_ctx, getState());
  enterRule(_localctx, 160, AthenaParser::RuleDrop_view);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1179);
    match(AthenaParser::DROP);
    setState(1180);
    match(AthenaParser::VIEW);
    setState(1182);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::IF) {
      setState(1181);
      if_exists();
    }
    setState(1184);
    view_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MsckContext ------------------------------------------------------------------

AthenaParser::MsckContext::MsckContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::MsckContext::MSCK() {
  return getToken(AthenaParser::MSCK, 0);
}

tree::TerminalNode* AthenaParser::MsckContext::REPAIR() {
  return getToken(AthenaParser::REPAIR, 0);
}

tree::TerminalNode* AthenaParser::MsckContext::TABLE() {
  return getToken(AthenaParser::TABLE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::MsckContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}


size_t AthenaParser::MsckContext::getRuleIndex() const {
  return AthenaParser::RuleMsck;
}

void AthenaParser::MsckContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMsck(this);
}

void AthenaParser::MsckContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMsck(this);
}

AthenaParser::MsckContext* AthenaParser::msck() {
  MsckContext *_localctx = _tracker.createInstance<MsckContext>(_ctx, getState());
  enterRule(_localctx, 162, AthenaParser::RuleMsck);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1186);
    match(AthenaParser::MSCK);
    setState(1187);
    match(AthenaParser::REPAIR);
    setState(1188);
    match(AthenaParser::TABLE);
    setState(1189);
    table_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Show_columnsContext ------------------------------------------------------------------

AthenaParser::Show_columnsContext::Show_columnsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Show_columnsContext::SHOW() {
  return getToken(AthenaParser::SHOW, 0);
}

tree::TerminalNode* AthenaParser::Show_columnsContext::COLUMNS() {
  return getToken(AthenaParser::COLUMNS, 0);
}

std::vector<AthenaParser::From_inContext *> AthenaParser::Show_columnsContext::from_in() {
  return getRuleContexts<AthenaParser::From_inContext>();
}

AthenaParser::From_inContext* AthenaParser::Show_columnsContext::from_in(size_t i) {
  return getRuleContext<AthenaParser::From_inContext>(i);
}

AthenaParser::Database_nameContext* AthenaParser::Show_columnsContext::database_name() {
  return getRuleContext<AthenaParser::Database_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Show_columnsContext::DOT() {
  return getToken(AthenaParser::DOT, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Show_columnsContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}


size_t AthenaParser::Show_columnsContext::getRuleIndex() const {
  return AthenaParser::RuleShow_columns;
}

void AthenaParser::Show_columnsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShow_columns(this);
}

void AthenaParser::Show_columnsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShow_columns(this);
}

AthenaParser::Show_columnsContext* AthenaParser::show_columns() {
  Show_columnsContext *_localctx = _tracker.createInstance<Show_columnsContext>(_ctx, getState());
  enterRule(_localctx, 164, AthenaParser::RuleShow_columns);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1207);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1191);
      match(AthenaParser::SHOW);
      setState(1192);
      match(AthenaParser::COLUMNS);
      setState(1193);
      from_in();
      setState(1194);
      database_name();
      setState(1195);
      match(AthenaParser::DOT);
      setState(1196);
      table_name();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1198);
      match(AthenaParser::SHOW);
      setState(1199);
      match(AthenaParser::COLUMNS);
      setState(1200);
      from_in();
      setState(1201);
      table_name();
      setState(1205);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::FROM

      || _la == AthenaParser::IN) {
        setState(1202);
        from_in();
        setState(1203);
        database_name();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Show_create_tableContext ------------------------------------------------------------------

AthenaParser::Show_create_tableContext::Show_create_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Show_create_tableContext::SHOW() {
  return getToken(AthenaParser::SHOW, 0);
}

tree::TerminalNode* AthenaParser::Show_create_tableContext::CREATE() {
  return getToken(AthenaParser::CREATE, 0);
}

tree::TerminalNode* AthenaParser::Show_create_tableContext::TABLE() {
  return getToken(AthenaParser::TABLE, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Show_create_tableContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

AthenaParser::Db_nameContext* AthenaParser::Show_create_tableContext::db_name() {
  return getRuleContext<AthenaParser::Db_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Show_create_tableContext::DOT() {
  return getToken(AthenaParser::DOT, 0);
}


size_t AthenaParser::Show_create_tableContext::getRuleIndex() const {
  return AthenaParser::RuleShow_create_table;
}

void AthenaParser::Show_create_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShow_create_table(this);
}

void AthenaParser::Show_create_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShow_create_table(this);
}

AthenaParser::Show_create_tableContext* AthenaParser::show_create_table() {
  Show_create_tableContext *_localctx = _tracker.createInstance<Show_create_tableContext>(_ctx, getState());
  enterRule(_localctx, 166, AthenaParser::RuleShow_create_table);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1209);
    match(AthenaParser::SHOW);
    setState(1210);
    match(AthenaParser::CREATE);
    setState(1211);
    match(AthenaParser::TABLE);
    setState(1215);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      setState(1212);
      db_name();
      setState(1213);
      match(AthenaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(1217);
    table_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Show_create_viewContext ------------------------------------------------------------------

AthenaParser::Show_create_viewContext::Show_create_viewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Show_create_viewContext::SHOW() {
  return getToken(AthenaParser::SHOW, 0);
}

tree::TerminalNode* AthenaParser::Show_create_viewContext::CREATE() {
  return getToken(AthenaParser::CREATE, 0);
}

tree::TerminalNode* AthenaParser::Show_create_viewContext::VIEW() {
  return getToken(AthenaParser::VIEW, 0);
}

AthenaParser::View_nameContext* AthenaParser::Show_create_viewContext::view_name() {
  return getRuleContext<AthenaParser::View_nameContext>(0);
}


size_t AthenaParser::Show_create_viewContext::getRuleIndex() const {
  return AthenaParser::RuleShow_create_view;
}

void AthenaParser::Show_create_viewContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShow_create_view(this);
}

void AthenaParser::Show_create_viewContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShow_create_view(this);
}

AthenaParser::Show_create_viewContext* AthenaParser::show_create_view() {
  Show_create_viewContext *_localctx = _tracker.createInstance<Show_create_viewContext>(_ctx, getState());
  enterRule(_localctx, 168, AthenaParser::RuleShow_create_view);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1219);
    match(AthenaParser::SHOW);
    setState(1220);
    match(AthenaParser::CREATE);
    setState(1221);
    match(AthenaParser::VIEW);
    setState(1222);
    view_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Show_databasesContext ------------------------------------------------------------------

AthenaParser::Show_databasesContext::Show_databasesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Show_databasesContext::SHOW() {
  return getToken(AthenaParser::SHOW, 0);
}

tree::TerminalNode* AthenaParser::Show_databasesContext::DATABASES() {
  return getToken(AthenaParser::DATABASES, 0);
}

tree::TerminalNode* AthenaParser::Show_databasesContext::SCHEMAS() {
  return getToken(AthenaParser::SCHEMAS, 0);
}

tree::TerminalNode* AthenaParser::Show_databasesContext::LIKE() {
  return getToken(AthenaParser::LIKE, 0);
}

AthenaParser::Reg_exContext* AthenaParser::Show_databasesContext::reg_ex() {
  return getRuleContext<AthenaParser::Reg_exContext>(0);
}


size_t AthenaParser::Show_databasesContext::getRuleIndex() const {
  return AthenaParser::RuleShow_databases;
}

void AthenaParser::Show_databasesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShow_databases(this);
}

void AthenaParser::Show_databasesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShow_databases(this);
}

AthenaParser::Show_databasesContext* AthenaParser::show_databases() {
  Show_databasesContext *_localctx = _tracker.createInstance<Show_databasesContext>(_ctx, getState());
  enterRule(_localctx, 170, AthenaParser::RuleShow_databases);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1224);
    match(AthenaParser::SHOW);
    setState(1225);
    _la = _input->LA(1);
    if (!(_la == AthenaParser::DATABASES || _la == AthenaParser::SCHEMAS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1228);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::LIKE) {
      setState(1226);
      match(AthenaParser::LIKE);
      setState(1227);
      reg_ex();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Show_partitionsContext ------------------------------------------------------------------

AthenaParser::Show_partitionsContext::Show_partitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Show_partitionsContext::SHOW() {
  return getToken(AthenaParser::SHOW, 0);
}

tree::TerminalNode* AthenaParser::Show_partitionsContext::PARTITIONS() {
  return getToken(AthenaParser::PARTITIONS, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Show_partitionsContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}


size_t AthenaParser::Show_partitionsContext::getRuleIndex() const {
  return AthenaParser::RuleShow_partitions;
}

void AthenaParser::Show_partitionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShow_partitions(this);
}

void AthenaParser::Show_partitionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShow_partitions(this);
}

AthenaParser::Show_partitionsContext* AthenaParser::show_partitions() {
  Show_partitionsContext *_localctx = _tracker.createInstance<Show_partitionsContext>(_ctx, getState());
  enterRule(_localctx, 172, AthenaParser::RuleShow_partitions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1230);
    match(AthenaParser::SHOW);
    setState(1231);
    match(AthenaParser::PARTITIONS);
    setState(1232);
    table_name();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Show_tablesContext ------------------------------------------------------------------

AthenaParser::Show_tablesContext::Show_tablesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Show_tablesContext::SHOW() {
  return getToken(AthenaParser::SHOW, 0);
}

tree::TerminalNode* AthenaParser::Show_tablesContext::TABLES() {
  return getToken(AthenaParser::TABLES, 0);
}

tree::TerminalNode* AthenaParser::Show_tablesContext::IN() {
  return getToken(AthenaParser::IN, 0);
}

AthenaParser::Database_nameContext* AthenaParser::Show_tablesContext::database_name() {
  return getRuleContext<AthenaParser::Database_nameContext>(0);
}

AthenaParser::Reg_exContext* AthenaParser::Show_tablesContext::reg_ex() {
  return getRuleContext<AthenaParser::Reg_exContext>(0);
}


size_t AthenaParser::Show_tablesContext::getRuleIndex() const {
  return AthenaParser::RuleShow_tables;
}

void AthenaParser::Show_tablesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShow_tables(this);
}

void AthenaParser::Show_tablesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShow_tables(this);
}

AthenaParser::Show_tablesContext* AthenaParser::show_tables() {
  Show_tablesContext *_localctx = _tracker.createInstance<Show_tablesContext>(_ctx, getState());
  enterRule(_localctx, 174, AthenaParser::RuleShow_tables);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1234);
    match(AthenaParser::SHOW);
    setState(1235);
    match(AthenaParser::TABLES);
    setState(1238);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::IN) {
      setState(1236);
      match(AthenaParser::IN);
      setState(1237);
      database_name();
    }
    setState(1241);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::SQ_STRING_LITERAL) {
      setState(1240);
      reg_ex();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Show_tblpropertiesContext ------------------------------------------------------------------

AthenaParser::Show_tblpropertiesContext::Show_tblpropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Show_tblpropertiesContext::SHOW() {
  return getToken(AthenaParser::SHOW, 0);
}

tree::TerminalNode* AthenaParser::Show_tblpropertiesContext::TBLPROPERTIES() {
  return getToken(AthenaParser::TBLPROPERTIES, 0);
}

AthenaParser::Table_nameContext* AthenaParser::Show_tblpropertiesContext::table_name() {
  return getRuleContext<AthenaParser::Table_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Show_tblpropertiesContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

AthenaParser::StringContext* AthenaParser::Show_tblpropertiesContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}

tree::TerminalNode* AthenaParser::Show_tblpropertiesContext::RP() {
  return getToken(AthenaParser::RP, 0);
}


size_t AthenaParser::Show_tblpropertiesContext::getRuleIndex() const {
  return AthenaParser::RuleShow_tblproperties;
}

void AthenaParser::Show_tblpropertiesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShow_tblproperties(this);
}

void AthenaParser::Show_tblpropertiesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShow_tblproperties(this);
}

AthenaParser::Show_tblpropertiesContext* AthenaParser::show_tblproperties() {
  Show_tblpropertiesContext *_localctx = _tracker.createInstance<Show_tblpropertiesContext>(_ctx, getState());
  enterRule(_localctx, 176, AthenaParser::RuleShow_tblproperties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1243);
    match(AthenaParser::SHOW);
    setState(1244);
    match(AthenaParser::TBLPROPERTIES);
    setState(1245);
    table_name();
    setState(1250);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::LP) {
      setState(1246);
      match(AthenaParser::LP);
      setState(1247);
      string();
      setState(1248);
      match(AthenaParser::RP);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Show_viewsContext ------------------------------------------------------------------

AthenaParser::Show_viewsContext::Show_viewsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Show_viewsContext::SHOW() {
  return getToken(AthenaParser::SHOW, 0);
}

tree::TerminalNode* AthenaParser::Show_viewsContext::VIEWS() {
  return getToken(AthenaParser::VIEWS, 0);
}

tree::TerminalNode* AthenaParser::Show_viewsContext::IN() {
  return getToken(AthenaParser::IN, 0);
}

AthenaParser::Database_nameContext* AthenaParser::Show_viewsContext::database_name() {
  return getRuleContext<AthenaParser::Database_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Show_viewsContext::LIKE() {
  return getToken(AthenaParser::LIKE, 0);
}

AthenaParser::Reg_exContext* AthenaParser::Show_viewsContext::reg_ex() {
  return getRuleContext<AthenaParser::Reg_exContext>(0);
}


size_t AthenaParser::Show_viewsContext::getRuleIndex() const {
  return AthenaParser::RuleShow_views;
}

void AthenaParser::Show_viewsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShow_views(this);
}

void AthenaParser::Show_viewsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShow_views(this);
}

AthenaParser::Show_viewsContext* AthenaParser::show_views() {
  Show_viewsContext *_localctx = _tracker.createInstance<Show_viewsContext>(_ctx, getState());
  enterRule(_localctx, 178, AthenaParser::RuleShow_views);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1252);
    match(AthenaParser::SHOW);
    setState(1253);
    match(AthenaParser::VIEWS);
    setState(1256);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::IN) {
      setState(1254);
      match(AthenaParser::IN);
      setState(1255);
      database_name();
    }
    setState(1260);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::LIKE) {
      setState(1258);
      match(AthenaParser::LIKE);
      setState(1259);
      reg_ex();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryContext ------------------------------------------------------------------

AthenaParser::QueryContext::QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::SelectContext* AthenaParser::QueryContext::select() {
  return getRuleContext<AthenaParser::SelectContext>(0);
}


size_t AthenaParser::QueryContext::getRuleIndex() const {
  return AthenaParser::RuleQuery;
}

void AthenaParser::QueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery(this);
}

void AthenaParser::QueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery(this);
}

AthenaParser::QueryContext* AthenaParser::query() {
  QueryContext *_localctx = _tracker.createInstance<QueryContext>(_ctx, getState());
  enterRule(_localctx, 180, AthenaParser::RuleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1262);
    select();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- True_falseContext ------------------------------------------------------------------

AthenaParser::True_falseContext::True_falseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::True_falseContext::TRUE() {
  return getToken(AthenaParser::TRUE, 0);
}

tree::TerminalNode* AthenaParser::True_falseContext::FALSE() {
  return getToken(AthenaParser::FALSE, 0);
}


size_t AthenaParser::True_falseContext::getRuleIndex() const {
  return AthenaParser::RuleTrue_false;
}

void AthenaParser::True_falseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrue_false(this);
}

void AthenaParser::True_falseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrue_false(this);
}

AthenaParser::True_falseContext* AthenaParser::true_false() {
  True_falseContext *_localctx = _tracker.createInstance<True_falseContext>(_ctx, getState());
  enterRule(_localctx, 182, AthenaParser::RuleTrue_false);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1264);
    _la = _input->LA(1);
    if (!(_la == AthenaParser::FALSE || _la == AthenaParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Boolean_expressionContext ------------------------------------------------------------------

AthenaParser::Boolean_expressionContext::Boolean_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Boolean_expressionContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

std::vector<AthenaParser::Boolean_expressionContext *> AthenaParser::Boolean_expressionContext::boolean_expression() {
  return getRuleContexts<AthenaParser::Boolean_expressionContext>();
}

AthenaParser::Boolean_expressionContext* AthenaParser::Boolean_expressionContext::boolean_expression(size_t i) {
  return getRuleContext<AthenaParser::Boolean_expressionContext>(i);
}

tree::TerminalNode* AthenaParser::Boolean_expressionContext::RP() {
  return getToken(AthenaParser::RP, 0);
}

AthenaParser::PredContext* AthenaParser::Boolean_expressionContext::pred() {
  return getRuleContext<AthenaParser::PredContext>(0);
}

std::vector<tree::TerminalNode *> AthenaParser::Boolean_expressionContext::NOT() {
  return getTokens(AthenaParser::NOT);
}

tree::TerminalNode* AthenaParser::Boolean_expressionContext::NOT(size_t i) {
  return getToken(AthenaParser::NOT, i);
}

tree::TerminalNode* AthenaParser::Boolean_expressionContext::AND() {
  return getToken(AthenaParser::AND, 0);
}

tree::TerminalNode* AthenaParser::Boolean_expressionContext::OR() {
  return getToken(AthenaParser::OR, 0);
}


size_t AthenaParser::Boolean_expressionContext::getRuleIndex() const {
  return AthenaParser::RuleBoolean_expression;
}

void AthenaParser::Boolean_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoolean_expression(this);
}

void AthenaParser::Boolean_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoolean_expression(this);
}


AthenaParser::Boolean_expressionContext* AthenaParser::boolean_expression() {
   return boolean_expression(0);
}

AthenaParser::Boolean_expressionContext* AthenaParser::boolean_expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  AthenaParser::Boolean_expressionContext *_localctx = _tracker.createInstance<Boolean_expressionContext>(_ctx, parentState);
  AthenaParser::Boolean_expressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 184;
  enterRecursionRule(_localctx, 184, AthenaParser::RuleBoolean_expression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1270);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1267);
        match(AthenaParser::NOT); 
      }
      setState(1272);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx);
    }
    setState(1278);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
    case 1: {
      setState(1273);
      match(AthenaParser::LP);
      setState(1274);
      boolean_expression(0);
      setState(1275);
      match(AthenaParser::RP);
      break;
    }

    case 2: {
      setState(1277);
      pred();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1288);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1286);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Boolean_expressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleBoolean_expression);
          setState(1280);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1281);
          match(AthenaParser::AND);
          setState(1282);
          boolean_expression(4);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Boolean_expressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleBoolean_expression);
          setState(1283);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1284);
          match(AthenaParser::OR);
          setState(1285);
          boolean_expression(3);
          break;
        }

        default:
          break;
        } 
      }
      setState(1290);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PredContext ------------------------------------------------------------------

AthenaParser::PredContext::PredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<AthenaParser::ExpressionContext *> AthenaParser::PredContext::expression() {
  return getRuleContexts<AthenaParser::ExpressionContext>();
}

AthenaParser::ExpressionContext* AthenaParser::PredContext::expression(size_t i) {
  return getRuleContext<AthenaParser::ExpressionContext>(i);
}

AthenaParser::Comparison_operatorContext* AthenaParser::PredContext::comparison_operator() {
  return getRuleContext<AthenaParser::Comparison_operatorContext>(0);
}

tree::TerminalNode* AthenaParser::PredContext::IS() {
  return getToken(AthenaParser::IS, 0);
}

tree::TerminalNode* AthenaParser::PredContext::NULL_() {
  return getToken(AthenaParser::NULL_, 0);
}

tree::TerminalNode* AthenaParser::PredContext::NOT() {
  return getToken(AthenaParser::NOT, 0);
}

AthenaParser::Id_Context* AthenaParser::PredContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}

tree::TerminalNode* AthenaParser::PredContext::LIKE() {
  return getToken(AthenaParser::LIKE, 0);
}

AthenaParser::StringContext* AthenaParser::PredContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}

tree::TerminalNode* AthenaParser::PredContext::BETWEEN() {
  return getToken(AthenaParser::BETWEEN, 0);
}

tree::TerminalNode* AthenaParser::PredContext::AND() {
  return getToken(AthenaParser::AND, 0);
}

tree::TerminalNode* AthenaParser::PredContext::IN() {
  return getToken(AthenaParser::IN, 0);
}

AthenaParser::Table_subqueryContext* AthenaParser::PredContext::table_subquery() {
  return getRuleContext<AthenaParser::Table_subqueryContext>(0);
}

tree::TerminalNode* AthenaParser::PredContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

AthenaParser::Expression_list_Context* AthenaParser::PredContext::expression_list_() {
  return getRuleContext<AthenaParser::Expression_list_Context>(0);
}

tree::TerminalNode* AthenaParser::PredContext::RP() {
  return getToken(AthenaParser::RP, 0);
}

tree::TerminalNode* AthenaParser::PredContext::EXISTS() {
  return getToken(AthenaParser::EXISTS, 0);
}

tree::TerminalNode* AthenaParser::PredContext::ALL() {
  return getToken(AthenaParser::ALL, 0);
}

tree::TerminalNode* AthenaParser::PredContext::ANY() {
  return getToken(AthenaParser::ANY, 0);
}

tree::TerminalNode* AthenaParser::PredContext::SOME() {
  return getToken(AthenaParser::SOME, 0);
}


size_t AthenaParser::PredContext::getRuleIndex() const {
  return AthenaParser::RulePred;
}

void AthenaParser::PredContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPred(this);
}

void AthenaParser::PredContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPred(this);
}

AthenaParser::PredContext* AthenaParser::pred() {
  PredContext *_localctx = _tracker.createInstance<PredContext>(_ctx, getState());
  enterRule(_localctx, 186, AthenaParser::RulePred);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1344);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1291);
      expression(0);
      setState(1292);
      comparison_operator();
      setState(1293);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1295);
      expression(0);
      setState(1296);
      match(AthenaParser::IS);
      setState(1298);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::NOT) {
        setState(1297);
        match(AthenaParser::NOT);
      }
      setState(1300);
      match(AthenaParser::NULL_);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1302);
      id_();
      setState(1304);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::NOT) {
        setState(1303);
        match(AthenaParser::NOT);
      }
      setState(1306);
      match(AthenaParser::LIKE);
      setState(1307);
      string();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1309);
      expression(0);
      setState(1311);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::NOT) {
        setState(1310);
        match(AthenaParser::NOT);
      }
      setState(1313);
      match(AthenaParser::BETWEEN);
      setState(1314);
      expression(0);
      setState(1315);
      match(AthenaParser::AND);
      setState(1316);
      expression(0);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1318);
      expression(0);
      setState(1320);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::NOT) {
        setState(1319);
        match(AthenaParser::NOT);
      }
      setState(1322);
      match(AthenaParser::IN);
      setState(1323);
      table_subquery();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1325);
      expression(0);
      setState(1327);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::NOT) {
        setState(1326);
        match(AthenaParser::NOT);
      }
      setState(1329);
      match(AthenaParser::IN);
      setState(1330);
      match(AthenaParser::LP);
      setState(1331);
      expression_list_();
      setState(1332);
      match(AthenaParser::RP);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1335);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == AthenaParser::NOT) {
        setState(1334);
        match(AthenaParser::NOT);
      }
      setState(1337);
      match(AthenaParser::EXISTS);
      setState(1338);
      table_subquery();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1339);
      expression(0);
      setState(1340);
      comparison_operator();
      setState(1341);
      _la = _input->LA(1);
      if (!(_la == AthenaParser::ALL

      || _la == AthenaParser::ANY || _la == AthenaParser::SOME)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1342);
      table_subquery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_subqueryContext ------------------------------------------------------------------

AthenaParser::Table_subqueryContext::Table_subqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Table_subqueryContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

AthenaParser::Select_statementContext* AthenaParser::Table_subqueryContext::select_statement() {
  return getRuleContext<AthenaParser::Select_statementContext>(0);
}

tree::TerminalNode* AthenaParser::Table_subqueryContext::RP() {
  return getToken(AthenaParser::RP, 0);
}


size_t AthenaParser::Table_subqueryContext::getRuleIndex() const {
  return AthenaParser::RuleTable_subquery;
}

void AthenaParser::Table_subqueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_subquery(this);
}

void AthenaParser::Table_subqueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_subquery(this);
}

AthenaParser::Table_subqueryContext* AthenaParser::table_subquery() {
  Table_subqueryContext *_localctx = _tracker.createInstance<Table_subqueryContext>(_ctx, getState());
  enterRule(_localctx, 188, AthenaParser::RuleTable_subquery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1346);
    match(AthenaParser::LP);
    setState(1347);
    select_statement();
    setState(1348);
    match(AthenaParser::RP);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comparison_operatorContext ------------------------------------------------------------------

AthenaParser::Comparison_operatorContext::Comparison_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Comparison_operatorContext::LT() {
  return getToken(AthenaParser::LT, 0);
}

tree::TerminalNode* AthenaParser::Comparison_operatorContext::EQ() {
  return getToken(AthenaParser::EQ, 0);
}

tree::TerminalNode* AthenaParser::Comparison_operatorContext::GT() {
  return getToken(AthenaParser::GT, 0);
}

tree::TerminalNode* AthenaParser::Comparison_operatorContext::LE() {
  return getToken(AthenaParser::LE, 0);
}

tree::TerminalNode* AthenaParser::Comparison_operatorContext::GE() {
  return getToken(AthenaParser::GE, 0);
}

tree::TerminalNode* AthenaParser::Comparison_operatorContext::NE() {
  return getToken(AthenaParser::NE, 0);
}

tree::TerminalNode* AthenaParser::Comparison_operatorContext::BOX() {
  return getToken(AthenaParser::BOX, 0);
}


size_t AthenaParser::Comparison_operatorContext::getRuleIndex() const {
  return AthenaParser::RuleComparison_operator;
}

void AthenaParser::Comparison_operatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison_operator(this);
}

void AthenaParser::Comparison_operatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison_operator(this);
}

AthenaParser::Comparison_operatorContext* AthenaParser::comparison_operator() {
  Comparison_operatorContext *_localctx = _tracker.createInstance<Comparison_operatorContext>(_ctx, getState());
  enterRule(_localctx, 190, AthenaParser::RuleComparison_operator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1350);
    _la = _input->LA(1);
    if (!(((((_la - 148) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 148)) & 4033) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

AthenaParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Primitive_expressionContext* AthenaParser::ExpressionContext::primitive_expression() {
  return getRuleContext<AthenaParser::Primitive_expressionContext>(0);
}

tree::TerminalNode* AthenaParser::ExpressionContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

std::vector<AthenaParser::ExpressionContext *> AthenaParser::ExpressionContext::expression() {
  return getRuleContexts<AthenaParser::ExpressionContext>();
}

AthenaParser::ExpressionContext* AthenaParser::ExpressionContext::expression(size_t i) {
  return getRuleContext<AthenaParser::ExpressionContext>(i);
}

tree::TerminalNode* AthenaParser::ExpressionContext::RP() {
  return getToken(AthenaParser::RP, 0);
}

AthenaParser::Table_subqueryContext* AthenaParser::ExpressionContext::table_subquery() {
  return getRuleContext<AthenaParser::Table_subqueryContext>(0);
}

AthenaParser::Id_Context* AthenaParser::ExpressionContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}

AthenaParser::Expression_list_Context* AthenaParser::ExpressionContext::expression_list_() {
  return getRuleContext<AthenaParser::Expression_list_Context>(0);
}

AthenaParser::Case_expressionContext* AthenaParser::ExpressionContext::case_expression() {
  return getRuleContext<AthenaParser::Case_expressionContext>(0);
}

AthenaParser::When_expressionContext* AthenaParser::ExpressionContext::when_expression() {
  return getRuleContext<AthenaParser::When_expressionContext>(0);
}

tree::TerminalNode* AthenaParser::ExpressionContext::PLUS() {
  return getToken(AthenaParser::PLUS, 0);
}

tree::TerminalNode* AthenaParser::ExpressionContext::MINUS() {
  return getToken(AthenaParser::MINUS, 0);
}

tree::TerminalNode* AthenaParser::ExpressionContext::CAST() {
  return getToken(AthenaParser::CAST, 0);
}

tree::TerminalNode* AthenaParser::ExpressionContext::AS() {
  return getToken(AthenaParser::AS, 0);
}

AthenaParser::Data_typeContext* AthenaParser::ExpressionContext::data_type() {
  return getRuleContext<AthenaParser::Data_typeContext>(0);
}

tree::TerminalNode* AthenaParser::ExpressionContext::STAR() {
  return getToken(AthenaParser::STAR, 0);
}

tree::TerminalNode* AthenaParser::ExpressionContext::DIVIDE() {
  return getToken(AthenaParser::DIVIDE, 0);
}

tree::TerminalNode* AthenaParser::ExpressionContext::MODULE() {
  return getToken(AthenaParser::MODULE, 0);
}

tree::TerminalNode* AthenaParser::ExpressionContext::DOT() {
  return getToken(AthenaParser::DOT, 0);
}


size_t AthenaParser::ExpressionContext::getRuleIndex() const {
  return AthenaParser::RuleExpression;
}

void AthenaParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void AthenaParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


AthenaParser::ExpressionContext* AthenaParser::expression() {
   return expression(0);
}

AthenaParser::ExpressionContext* AthenaParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  AthenaParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  AthenaParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 192;
  enterRecursionRule(_localctx, 192, AthenaParser::RuleExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1375);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
    case 1: {
      setState(1353);
      primitive_expression();
      break;
    }

    case 2: {
      setState(1354);
      match(AthenaParser::LP);
      setState(1355);
      expression(0);
      setState(1356);
      match(AthenaParser::RP);
      break;
    }

    case 3: {
      setState(1358);
      table_subquery();
      break;
    }

    case 4: {
      setState(1359);
      id_();
      setState(1360);
      match(AthenaParser::LP);
      setState(1361);
      expression_list_();
      setState(1362);
      match(AthenaParser::RP);
      break;
    }

    case 5: {
      setState(1364);
      case_expression();
      break;
    }

    case 6: {
      setState(1365);
      when_expression();
      break;
    }

    case 7: {
      setState(1366);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == AthenaParser::PLUS

      || _la == AthenaParser::MINUS)) {
        antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1367);
      expression(5);
      break;
    }

    case 8: {
      setState(1368);
      match(AthenaParser::CAST);
      setState(1369);
      match(AthenaParser::LP);
      setState(1370);
      expression(0);
      setState(1371);
      match(AthenaParser::AS);
      setState(1372);
      data_type();
      setState(1373);
      match(AthenaParser::RP);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1388);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1386);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1377);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(1378);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 162) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 162)) & 25) != 0))) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1379);
          expression(5);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1380);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1381);
          antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == AthenaParser::PLUS

          || _la == AthenaParser::MINUS)) {
            antlrcpp::downCast<ExpressionContext *>(_localctx)->op = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1382);
          expression(4);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(1383);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1384);
          match(AthenaParser::DOT);
          setState(1385);
          expression(3);
          break;
        }

        default:
          break;
        } 
      }
      setState(1390);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Case_expressionContext ------------------------------------------------------------------

AthenaParser::Case_expressionContext::Case_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Case_expressionContext::CASE() {
  return getToken(AthenaParser::CASE, 0);
}

std::vector<AthenaParser::ExpressionContext *> AthenaParser::Case_expressionContext::expression() {
  return getRuleContexts<AthenaParser::ExpressionContext>();
}

AthenaParser::ExpressionContext* AthenaParser::Case_expressionContext::expression(size_t i) {
  return getRuleContext<AthenaParser::ExpressionContext>(i);
}

tree::TerminalNode* AthenaParser::Case_expressionContext::END() {
  return getToken(AthenaParser::END, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Case_expressionContext::WHEN() {
  return getTokens(AthenaParser::WHEN);
}

tree::TerminalNode* AthenaParser::Case_expressionContext::WHEN(size_t i) {
  return getToken(AthenaParser::WHEN, i);
}

std::vector<tree::TerminalNode *> AthenaParser::Case_expressionContext::THEN() {
  return getTokens(AthenaParser::THEN);
}

tree::TerminalNode* AthenaParser::Case_expressionContext::THEN(size_t i) {
  return getToken(AthenaParser::THEN, i);
}

tree::TerminalNode* AthenaParser::Case_expressionContext::ELSE() {
  return getToken(AthenaParser::ELSE, 0);
}


size_t AthenaParser::Case_expressionContext::getRuleIndex() const {
  return AthenaParser::RuleCase_expression;
}

void AthenaParser::Case_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCase_expression(this);
}

void AthenaParser::Case_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCase_expression(this);
}

AthenaParser::Case_expressionContext* AthenaParser::case_expression() {
  Case_expressionContext *_localctx = _tracker.createInstance<Case_expressionContext>(_ctx, getState());
  enterRule(_localctx, 194, AthenaParser::RuleCase_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1391);
    match(AthenaParser::CASE);
    setState(1392);
    expression(0);
    setState(1398); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1393);
      match(AthenaParser::WHEN);
      setState(1394);
      expression(0);
      setState(1395);
      match(AthenaParser::THEN);
      setState(1396);
      expression(0);
      setState(1400); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == AthenaParser::WHEN);
    setState(1404);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::ELSE) {
      setState(1402);
      match(AthenaParser::ELSE);
      setState(1403);
      expression(0);
    }
    setState(1406);
    match(AthenaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- When_expressionContext ------------------------------------------------------------------

AthenaParser::When_expressionContext::When_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::When_expressionContext::CASE() {
  return getToken(AthenaParser::CASE, 0);
}

tree::TerminalNode* AthenaParser::When_expressionContext::END() {
  return getToken(AthenaParser::END, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::When_expressionContext::WHEN() {
  return getTokens(AthenaParser::WHEN);
}

tree::TerminalNode* AthenaParser::When_expressionContext::WHEN(size_t i) {
  return getToken(AthenaParser::WHEN, i);
}

std::vector<AthenaParser::ExpressionContext *> AthenaParser::When_expressionContext::expression() {
  return getRuleContexts<AthenaParser::ExpressionContext>();
}

AthenaParser::ExpressionContext* AthenaParser::When_expressionContext::expression(size_t i) {
  return getRuleContext<AthenaParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> AthenaParser::When_expressionContext::THEN() {
  return getTokens(AthenaParser::THEN);
}

tree::TerminalNode* AthenaParser::When_expressionContext::THEN(size_t i) {
  return getToken(AthenaParser::THEN, i);
}

tree::TerminalNode* AthenaParser::When_expressionContext::ELSE() {
  return getToken(AthenaParser::ELSE, 0);
}


size_t AthenaParser::When_expressionContext::getRuleIndex() const {
  return AthenaParser::RuleWhen_expression;
}

void AthenaParser::When_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhen_expression(this);
}

void AthenaParser::When_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhen_expression(this);
}

AthenaParser::When_expressionContext* AthenaParser::when_expression() {
  When_expressionContext *_localctx = _tracker.createInstance<When_expressionContext>(_ctx, getState());
  enterRule(_localctx, 196, AthenaParser::RuleWhen_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1408);
    match(AthenaParser::CASE);
    setState(1414); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1409);
      match(AthenaParser::WHEN);
      setState(1410);
      expression(0);
      setState(1411);
      match(AthenaParser::THEN);
      setState(1412);
      expression(0);
      setState(1416); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == AthenaParser::WHEN);
    setState(1420);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::ELSE) {
      setState(1418);
      match(AthenaParser::ELSE);
      setState(1419);
      expression(0);
    }
    setState(1422);
    match(AthenaParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primitive_expressionContext ------------------------------------------------------------------

AthenaParser::Primitive_expressionContext::Primitive_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::LiteralContext* AthenaParser::Primitive_expressionContext::literal() {
  return getRuleContext<AthenaParser::LiteralContext>(0);
}

AthenaParser::Id_Context* AthenaParser::Primitive_expressionContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}


size_t AthenaParser::Primitive_expressionContext::getRuleIndex() const {
  return AthenaParser::RulePrimitive_expression;
}

void AthenaParser::Primitive_expressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimitive_expression(this);
}

void AthenaParser::Primitive_expressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimitive_expression(this);
}

AthenaParser::Primitive_expressionContext* AthenaParser::primitive_expression() {
  Primitive_expressionContext *_localctx = _tracker.createInstance<Primitive_expressionContext>(_ctx, getState());
  enterRule(_localctx, 198, AthenaParser::RulePrimitive_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1426);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::FALSE:
      case AthenaParser::NULL_:
      case AthenaParser::TRUE:
      case AthenaParser::SQ_STRING_LITERAL:
      case AthenaParser::INTEGRAL_LITERAL:
      case AthenaParser::FLOAT_LITERAL:
      case AthenaParser::REAL_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1424);
        literal();
        break;
      }

      case AthenaParser::IDENTIFIER:
      case AthenaParser::DQ_STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1425);
        id_();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

AthenaParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::NumberContext* AthenaParser::LiteralContext::number() {
  return getRuleContext<AthenaParser::NumberContext>(0);
}

AthenaParser::StringContext* AthenaParser::LiteralContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}

AthenaParser::True_falseContext* AthenaParser::LiteralContext::true_false() {
  return getRuleContext<AthenaParser::True_falseContext>(0);
}

tree::TerminalNode* AthenaParser::LiteralContext::NULL_() {
  return getToken(AthenaParser::NULL_, 0);
}


size_t AthenaParser::LiteralContext::getRuleIndex() const {
  return AthenaParser::RuleLiteral;
}

void AthenaParser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void AthenaParser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}

AthenaParser::LiteralContext* AthenaParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 200, AthenaParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1432);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::INTEGRAL_LITERAL:
      case AthenaParser::FLOAT_LITERAL:
      case AthenaParser::REAL_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1428);
        number();
        break;
      }

      case AthenaParser::SQ_STRING_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1429);
        string();
        break;
      }

      case AthenaParser::FALSE:
      case AthenaParser::TRUE: {
        enterOuterAlt(_localctx, 3);
        setState(1430);
        true_false();
        break;
      }

      case AthenaParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(1431);
        match(AthenaParser::NULL_);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Int_numberContext ------------------------------------------------------------------

AthenaParser::Int_numberContext::Int_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Int_numberContext::INTEGRAL_LITERAL() {
  return getToken(AthenaParser::INTEGRAL_LITERAL, 0);
}


size_t AthenaParser::Int_numberContext::getRuleIndex() const {
  return AthenaParser::RuleInt_number;
}

void AthenaParser::Int_numberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInt_number(this);
}

void AthenaParser::Int_numberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInt_number(this);
}

AthenaParser::Int_numberContext* AthenaParser::int_number() {
  Int_numberContext *_localctx = _tracker.createInstance<Int_numberContext>(_ctx, getState());
  enterRule(_localctx, 202, AthenaParser::RuleInt_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1434);
    match(AthenaParser::INTEGRAL_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberContext ------------------------------------------------------------------

AthenaParser::NumberContext::NumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Int_numberContext* AthenaParser::NumberContext::int_number() {
  return getRuleContext<AthenaParser::Int_numberContext>(0);
}

tree::TerminalNode* AthenaParser::NumberContext::REAL_LITERAL() {
  return getToken(AthenaParser::REAL_LITERAL, 0);
}

tree::TerminalNode* AthenaParser::NumberContext::FLOAT_LITERAL() {
  return getToken(AthenaParser::FLOAT_LITERAL, 0);
}


size_t AthenaParser::NumberContext::getRuleIndex() const {
  return AthenaParser::RuleNumber;
}

void AthenaParser::NumberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumber(this);
}

void AthenaParser::NumberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumber(this);
}

AthenaParser::NumberContext* AthenaParser::number() {
  NumberContext *_localctx = _tracker.createInstance<NumberContext>(_ctx, getState());
  enterRule(_localctx, 204, AthenaParser::RuleNumber);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1439);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::INTEGRAL_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(1436);
        int_number();
        break;
      }

      case AthenaParser::REAL_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1437);
        match(AthenaParser::REAL_LITERAL);
        break;
      }

      case AthenaParser::FLOAT_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(1438);
        match(AthenaParser::FLOAT_LITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Data_typeContext ------------------------------------------------------------------

AthenaParser::Data_typeContext::Data_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Primitive_typeContext* AthenaParser::Data_typeContext::primitive_type() {
  return getRuleContext<AthenaParser::Primitive_typeContext>(0);
}

tree::TerminalNode* AthenaParser::Data_typeContext::ARRAY() {
  return getToken(AthenaParser::ARRAY, 0);
}

tree::TerminalNode* AthenaParser::Data_typeContext::LT() {
  return getToken(AthenaParser::LT, 0);
}

AthenaParser::Data_typeContext* AthenaParser::Data_typeContext::data_type() {
  return getRuleContext<AthenaParser::Data_typeContext>(0);
}

tree::TerminalNode* AthenaParser::Data_typeContext::GT() {
  return getToken(AthenaParser::GT, 0);
}

tree::TerminalNode* AthenaParser::Data_typeContext::MAP() {
  return getToken(AthenaParser::MAP, 0);
}

std::vector<tree::TerminalNode *> AthenaParser::Data_typeContext::COMMA() {
  return getTokens(AthenaParser::COMMA);
}

tree::TerminalNode* AthenaParser::Data_typeContext::COMMA(size_t i) {
  return getToken(AthenaParser::COMMA, i);
}

tree::TerminalNode* AthenaParser::Data_typeContext::STRUCT() {
  return getToken(AthenaParser::STRUCT, 0);
}

std::vector<AthenaParser::Struct_col_defContext *> AthenaParser::Data_typeContext::struct_col_def() {
  return getRuleContexts<AthenaParser::Struct_col_defContext>();
}

AthenaParser::Struct_col_defContext* AthenaParser::Data_typeContext::struct_col_def(size_t i) {
  return getRuleContext<AthenaParser::Struct_col_defContext>(i);
}


size_t AthenaParser::Data_typeContext::getRuleIndex() const {
  return AthenaParser::RuleData_type;
}

void AthenaParser::Data_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterData_type(this);
}

void AthenaParser::Data_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitData_type(this);
}

AthenaParser::Data_typeContext* AthenaParser::data_type() {
  Data_typeContext *_localctx = _tracker.createInstance<Data_typeContext>(_ctx, getState());
  enterRule(_localctx, 206, AthenaParser::RuleData_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1466);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::BIGINT:
      case AthenaParser::BINARY:
      case AthenaParser::BOOLEAN:
      case AthenaParser::CHAR:
      case AthenaParser::DATE:
      case AthenaParser::DECIMAL:
      case AthenaParser::DOUBLE:
      case AthenaParser::FLOAT:
      case AthenaParser::INT:
      case AthenaParser::INTEGER:
      case AthenaParser::SMALLINT:
      case AthenaParser::STRING:
      case AthenaParser::TIMESTAMP:
      case AthenaParser::TINYINT:
      case AthenaParser::VARCHAR: {
        enterOuterAlt(_localctx, 1);
        setState(1441);
        primitive_type();
        break;
      }

      case AthenaParser::ARRAY: {
        enterOuterAlt(_localctx, 2);
        setState(1442);
        match(AthenaParser::ARRAY);
        setState(1443);
        match(AthenaParser::LT);
        setState(1444);
        data_type();
        setState(1445);
        match(AthenaParser::GT);
        break;
      }

      case AthenaParser::MAP: {
        enterOuterAlt(_localctx, 3);
        setState(1447);
        match(AthenaParser::MAP);
        setState(1448);
        match(AthenaParser::LT);
        setState(1449);
        primitive_type();
        setState(1450);
        match(AthenaParser::COMMA);
        setState(1451);
        data_type();
        setState(1452);
        match(AthenaParser::GT);
        break;
      }

      case AthenaParser::STRUCT: {
        enterOuterAlt(_localctx, 4);
        setState(1454);
        match(AthenaParser::STRUCT);
        setState(1455);
        match(AthenaParser::LT);
        setState(1456);
        struct_col_def();
        setState(1461);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == AthenaParser::COMMA) {
          setState(1457);
          match(AthenaParser::COMMA);
          setState(1458);
          struct_col_def();
          setState(1463);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1464);
        match(AthenaParser::GT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primitive_typeContext ------------------------------------------------------------------

AthenaParser::Primitive_typeContext::Primitive_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::BOOLEAN() {
  return getToken(AthenaParser::BOOLEAN, 0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::TINYINT() {
  return getToken(AthenaParser::TINYINT, 0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::SMALLINT() {
  return getToken(AthenaParser::SMALLINT, 0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::INT() {
  return getToken(AthenaParser::INT, 0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::INTEGER() {
  return getToken(AthenaParser::INTEGER, 0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::BIGINT() {
  return getToken(AthenaParser::BIGINT, 0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::DOUBLE() {
  return getToken(AthenaParser::DOUBLE, 0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::FLOAT() {
  return getToken(AthenaParser::FLOAT, 0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::DECIMAL() {
  return getToken(AthenaParser::DECIMAL, 0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::LP() {
  return getToken(AthenaParser::LP, 0);
}

AthenaParser::PrecisionContext* AthenaParser::Primitive_typeContext::precision() {
  return getRuleContext<AthenaParser::PrecisionContext>(0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::COMMA() {
  return getToken(AthenaParser::COMMA, 0);
}

AthenaParser::ScaleContext* AthenaParser::Primitive_typeContext::scale() {
  return getRuleContext<AthenaParser::ScaleContext>(0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::RP() {
  return getToken(AthenaParser::RP, 0);
}

AthenaParser::Int_numberContext* AthenaParser::Primitive_typeContext::int_number() {
  return getRuleContext<AthenaParser::Int_numberContext>(0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::CHAR() {
  return getToken(AthenaParser::CHAR, 0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::VARCHAR() {
  return getToken(AthenaParser::VARCHAR, 0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::STRING() {
  return getToken(AthenaParser::STRING, 0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::BINARY() {
  return getToken(AthenaParser::BINARY, 0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::DATE() {
  return getToken(AthenaParser::DATE, 0);
}

tree::TerminalNode* AthenaParser::Primitive_typeContext::TIMESTAMP() {
  return getToken(AthenaParser::TIMESTAMP, 0);
}


size_t AthenaParser::Primitive_typeContext::getRuleIndex() const {
  return AthenaParser::RulePrimitive_type;
}

void AthenaParser::Primitive_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimitive_type(this);
}

void AthenaParser::Primitive_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimitive_type(this);
}

AthenaParser::Primitive_typeContext* AthenaParser::primitive_type() {
  Primitive_typeContext *_localctx = _tracker.createInstance<Primitive_typeContext>(_ctx, getState());
  enterRule(_localctx, 208, AthenaParser::RulePrimitive_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1492);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case AthenaParser::BOOLEAN: {
        enterOuterAlt(_localctx, 1);
        setState(1468);
        match(AthenaParser::BOOLEAN);
        break;
      }

      case AthenaParser::TINYINT: {
        enterOuterAlt(_localctx, 2);
        setState(1469);
        match(AthenaParser::TINYINT);
        break;
      }

      case AthenaParser::SMALLINT: {
        enterOuterAlt(_localctx, 3);
        setState(1470);
        match(AthenaParser::SMALLINT);
        break;
      }

      case AthenaParser::INT: {
        enterOuterAlt(_localctx, 4);
        setState(1471);
        match(AthenaParser::INT);
        break;
      }

      case AthenaParser::INTEGER: {
        enterOuterAlt(_localctx, 5);
        setState(1472);
        match(AthenaParser::INTEGER);
        break;
      }

      case AthenaParser::BIGINT: {
        enterOuterAlt(_localctx, 6);
        setState(1473);
        match(AthenaParser::BIGINT);
        break;
      }

      case AthenaParser::DOUBLE: {
        enterOuterAlt(_localctx, 7);
        setState(1474);
        match(AthenaParser::DOUBLE);
        break;
      }

      case AthenaParser::FLOAT: {
        enterOuterAlt(_localctx, 8);
        setState(1475);
        match(AthenaParser::FLOAT);
        break;
      }

      case AthenaParser::DECIMAL: {
        enterOuterAlt(_localctx, 9);
        setState(1476);
        match(AthenaParser::DECIMAL);
        setState(1477);
        match(AthenaParser::LP);
        setState(1478);
        precision();
        setState(1479);
        match(AthenaParser::COMMA);
        setState(1480);
        scale();
        setState(1481);
        match(AthenaParser::RP);
        break;
      }

      case AthenaParser::CHAR:
      case AthenaParser::VARCHAR: {
        enterOuterAlt(_localctx, 10);
        setState(1483);
        _la = _input->LA(1);
        if (!(_la == AthenaParser::CHAR || _la == AthenaParser::VARCHAR)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1484);
        match(AthenaParser::LP);
        setState(1485);
        int_number();
        setState(1486);
        match(AthenaParser::RP);
        break;
      }

      case AthenaParser::STRING: {
        enterOuterAlt(_localctx, 11);
        setState(1488);
        match(AthenaParser::STRING);
        break;
      }

      case AthenaParser::BINARY: {
        enterOuterAlt(_localctx, 12);
        setState(1489);
        match(AthenaParser::BINARY);
        break;
      }

      case AthenaParser::DATE: {
        enterOuterAlt(_localctx, 13);
        setState(1490);
        match(AthenaParser::DATE);
        break;
      }

      case AthenaParser::TIMESTAMP: {
        enterOuterAlt(_localctx, 14);
        setState(1491);
        match(AthenaParser::TIMESTAMP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrecisionContext ------------------------------------------------------------------

AthenaParser::PrecisionContext::PrecisionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Int_numberContext* AthenaParser::PrecisionContext::int_number() {
  return getRuleContext<AthenaParser::Int_numberContext>(0);
}


size_t AthenaParser::PrecisionContext::getRuleIndex() const {
  return AthenaParser::RulePrecision;
}

void AthenaParser::PrecisionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrecision(this);
}

void AthenaParser::PrecisionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrecision(this);
}

AthenaParser::PrecisionContext* AthenaParser::precision() {
  PrecisionContext *_localctx = _tracker.createInstance<PrecisionContext>(_ctx, getState());
  enterRule(_localctx, 210, AthenaParser::RulePrecision);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1494);
    int_number();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScaleContext ------------------------------------------------------------------

AthenaParser::ScaleContext::ScaleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Int_numberContext* AthenaParser::ScaleContext::int_number() {
  return getRuleContext<AthenaParser::Int_numberContext>(0);
}


size_t AthenaParser::ScaleContext::getRuleIndex() const {
  return AthenaParser::RuleScale;
}

void AthenaParser::ScaleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScale(this);
}

void AthenaParser::ScaleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScale(this);
}

AthenaParser::ScaleContext* AthenaParser::scale() {
  ScaleContext *_localctx = _tracker.createInstance<ScaleContext>(_ctx, getState());
  enterRule(_localctx, 212, AthenaParser::RuleScale);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1496);
    int_number();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_col_defContext ------------------------------------------------------------------

AthenaParser::Struct_col_defContext::Struct_col_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Col_nameContext* AthenaParser::Struct_col_defContext::col_name() {
  return getRuleContext<AthenaParser::Col_nameContext>(0);
}

tree::TerminalNode* AthenaParser::Struct_col_defContext::COLON() {
  return getToken(AthenaParser::COLON, 0);
}

AthenaParser::Data_typeContext* AthenaParser::Struct_col_defContext::data_type() {
  return getRuleContext<AthenaParser::Data_typeContext>(0);
}

tree::TerminalNode* AthenaParser::Struct_col_defContext::COMMENT() {
  return getToken(AthenaParser::COMMENT, 0);
}

AthenaParser::Col_commentContext* AthenaParser::Struct_col_defContext::col_comment() {
  return getRuleContext<AthenaParser::Col_commentContext>(0);
}


size_t AthenaParser::Struct_col_defContext::getRuleIndex() const {
  return AthenaParser::RuleStruct_col_def;
}

void AthenaParser::Struct_col_defContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_col_def(this);
}

void AthenaParser::Struct_col_defContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_col_def(this);
}

AthenaParser::Struct_col_defContext* AthenaParser::struct_col_def() {
  Struct_col_defContext *_localctx = _tracker.createInstance<Struct_col_defContext>(_ctx, getState());
  enterRule(_localctx, 214, AthenaParser::RuleStruct_col_def);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1498);
    col_name();
    setState(1499);
    match(AthenaParser::COLON);
    setState(1500);
    data_type();
    setState(1503);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == AthenaParser::COMMENT) {
      setState(1501);
      match(AthenaParser::COMMENT);
      setState(1502);
      col_comment();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Col_nameContext ------------------------------------------------------------------

AthenaParser::Col_nameContext::Col_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Id_Context* AthenaParser::Col_nameContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}


size_t AthenaParser::Col_nameContext::getRuleIndex() const {
  return AthenaParser::RuleCol_name;
}

void AthenaParser::Col_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCol_name(this);
}

void AthenaParser::Col_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCol_name(this);
}

AthenaParser::Col_nameContext* AthenaParser::col_name() {
  Col_nameContext *_localctx = _tracker.createInstance<Col_nameContext>(_ctx, getState());
  enterRule(_localctx, 216, AthenaParser::RuleCol_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1505);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Db_nameContext ------------------------------------------------------------------

AthenaParser::Db_nameContext::Db_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Id_Context* AthenaParser::Db_nameContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}


size_t AthenaParser::Db_nameContext::getRuleIndex() const {
  return AthenaParser::RuleDb_name;
}

void AthenaParser::Db_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDb_name(this);
}

void AthenaParser::Db_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDb_name(this);
}

AthenaParser::Db_nameContext* AthenaParser::db_name() {
  Db_nameContext *_localctx = _tracker.createInstance<Db_nameContext>(_ctx, getState());
  enterRule(_localctx, 218, AthenaParser::RuleDb_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1507);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Database_nameContext ------------------------------------------------------------------

AthenaParser::Database_nameContext::Database_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Id_Context* AthenaParser::Database_nameContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}


size_t AthenaParser::Database_nameContext::getRuleIndex() const {
  return AthenaParser::RuleDatabase_name;
}

void AthenaParser::Database_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDatabase_name(this);
}

void AthenaParser::Database_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDatabase_name(this);
}

AthenaParser::Database_nameContext* AthenaParser::database_name() {
  Database_nameContext *_localctx = _tracker.createInstance<Database_nameContext>(_ctx, getState());
  enterRule(_localctx, 220, AthenaParser::RuleDatabase_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1509);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_nameContext ------------------------------------------------------------------

AthenaParser::Statement_nameContext::Statement_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Id_Context* AthenaParser::Statement_nameContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}


size_t AthenaParser::Statement_nameContext::getRuleIndex() const {
  return AthenaParser::RuleStatement_name;
}

void AthenaParser::Statement_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement_name(this);
}

void AthenaParser::Statement_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement_name(this);
}

AthenaParser::Statement_nameContext* AthenaParser::statement_name() {
  Statement_nameContext *_localctx = _tracker.createInstance<Statement_nameContext>(_ctx, getState());
  enterRule(_localctx, 222, AthenaParser::RuleStatement_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1511);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_nameContext ------------------------------------------------------------------

AthenaParser::Table_nameContext::Table_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Id_Context* AthenaParser::Table_nameContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}


size_t AthenaParser::Table_nameContext::getRuleIndex() const {
  return AthenaParser::RuleTable_name;
}

void AthenaParser::Table_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_name(this);
}

void AthenaParser::Table_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_name(this);
}

AthenaParser::Table_nameContext* AthenaParser::table_name() {
  Table_nameContext *_localctx = _tracker.createInstance<Table_nameContext>(_ctx, getState());
  enterRule(_localctx, 224, AthenaParser::RuleTable_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1513);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- View_nameContext ------------------------------------------------------------------

AthenaParser::View_nameContext::View_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Id_Context* AthenaParser::View_nameContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}


size_t AthenaParser::View_nameContext::getRuleIndex() const {
  return AthenaParser::RuleView_name;
}

void AthenaParser::View_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterView_name(this);
}

void AthenaParser::View_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitView_name(this);
}

AthenaParser::View_nameContext* AthenaParser::view_name() {
  View_nameContext *_localctx = _tracker.createInstance<View_nameContext>(_ctx, getState());
  enterRule(_localctx, 226, AthenaParser::RuleView_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1515);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Destination_tableContext ------------------------------------------------------------------

AthenaParser::Destination_tableContext::Destination_tableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Id_Context* AthenaParser::Destination_tableContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}


size_t AthenaParser::Destination_tableContext::getRuleIndex() const {
  return AthenaParser::RuleDestination_table;
}

void AthenaParser::Destination_tableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDestination_table(this);
}

void AthenaParser::Destination_tableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDestination_table(this);
}

AthenaParser::Destination_tableContext* AthenaParser::destination_table() {
  Destination_tableContext *_localctx = _tracker.createInstance<Destination_tableContext>(_ctx, getState());
  enterRule(_localctx, 228, AthenaParser::RuleDestination_table);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1517);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

AthenaParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::StringContext::SQ_STRING_LITERAL() {
  return getToken(AthenaParser::SQ_STRING_LITERAL, 0);
}


size_t AthenaParser::StringContext::getRuleIndex() const {
  return AthenaParser::RuleString;
}

void AthenaParser::StringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString(this);
}

void AthenaParser::StringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString(this);
}

AthenaParser::StringContext* AthenaParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 230, AthenaParser::RuleString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1519);
    match(AthenaParser::SQ_STRING_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reg_exContext ------------------------------------------------------------------

AthenaParser::Reg_exContext::Reg_exContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::StringContext* AthenaParser::Reg_exContext::string() {
  return getRuleContext<AthenaParser::StringContext>(0);
}


size_t AthenaParser::Reg_exContext::getRuleIndex() const {
  return AthenaParser::RuleReg_ex;
}

void AthenaParser::Reg_exContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReg_ex(this);
}

void AthenaParser::Reg_exContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReg_ex(this);
}

AthenaParser::Reg_exContext* AthenaParser::reg_ex() {
  Reg_exContext *_localctx = _tracker.createInstance<Reg_exContext>(_ctx, getState());
  enterRule(_localctx, 232, AthenaParser::RuleReg_ex);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1521);
    string();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasContext ------------------------------------------------------------------

AthenaParser::AliasContext::AliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Id_Context* AthenaParser::AliasContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}


size_t AthenaParser::AliasContext::getRuleIndex() const {
  return AthenaParser::RuleAlias;
}

void AthenaParser::AliasContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlias(this);
}

void AthenaParser::AliasContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlias(this);
}

AthenaParser::AliasContext* AthenaParser::alias() {
  AliasContext *_localctx = _tracker.createInstance<AliasContext>(_ctx, getState());
  enterRule(_localctx, 234, AthenaParser::RuleAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1523);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Target_aliasContext ------------------------------------------------------------------

AthenaParser::Target_aliasContext::Target_aliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Id_Context* AthenaParser::Target_aliasContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}


size_t AthenaParser::Target_aliasContext::getRuleIndex() const {
  return AthenaParser::RuleTarget_alias;
}

void AthenaParser::Target_aliasContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTarget_alias(this);
}

void AthenaParser::Target_aliasContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTarget_alias(this);
}

AthenaParser::Target_aliasContext* AthenaParser::target_alias() {
  Target_aliasContext *_localctx = _tracker.createInstance<Target_aliasContext>(_ctx, getState());
  enterRule(_localctx, 236, AthenaParser::RuleTarget_alias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1525);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Source_aliasContext ------------------------------------------------------------------

AthenaParser::Source_aliasContext::Source_aliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

AthenaParser::Id_Context* AthenaParser::Source_aliasContext::id_() {
  return getRuleContext<AthenaParser::Id_Context>(0);
}


size_t AthenaParser::Source_aliasContext::getRuleIndex() const {
  return AthenaParser::RuleSource_alias;
}

void AthenaParser::Source_aliasContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSource_alias(this);
}

void AthenaParser::Source_aliasContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSource_alias(this);
}

AthenaParser::Source_aliasContext* AthenaParser::source_alias() {
  Source_aliasContext *_localctx = _tracker.createInstance<Source_aliasContext>(_ctx, getState());
  enterRule(_localctx, 238, AthenaParser::RuleSource_alias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1527);
    id_();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Id_Context ------------------------------------------------------------------

AthenaParser::Id_Context::Id_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Id_Context::IDENTIFIER() {
  return getToken(AthenaParser::IDENTIFIER, 0);
}

tree::TerminalNode* AthenaParser::Id_Context::DQ_STRING_LITERAL() {
  return getToken(AthenaParser::DQ_STRING_LITERAL, 0);
}


size_t AthenaParser::Id_Context::getRuleIndex() const {
  return AthenaParser::RuleId_;
}

void AthenaParser::Id_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterId_(this);
}

void AthenaParser::Id_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitId_(this);
}

AthenaParser::Id_Context* AthenaParser::id_() {
  Id_Context *_localctx = _tracker.createInstance<Id_Context>(_ctx, getState());
  enterRule(_localctx, 240, AthenaParser::RuleId_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1529);
    _la = _input->LA(1);
    if (!(_la == AthenaParser::IDENTIFIER

    || _la == AthenaParser::DQ_STRING_LITERAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_not_existsContext ------------------------------------------------------------------

AthenaParser::If_not_existsContext::If_not_existsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::If_not_existsContext::IF() {
  return getToken(AthenaParser::IF, 0);
}

tree::TerminalNode* AthenaParser::If_not_existsContext::NOT() {
  return getToken(AthenaParser::NOT, 0);
}

tree::TerminalNode* AthenaParser::If_not_existsContext::EXISTS() {
  return getToken(AthenaParser::EXISTS, 0);
}


size_t AthenaParser::If_not_existsContext::getRuleIndex() const {
  return AthenaParser::RuleIf_not_exists;
}

void AthenaParser::If_not_existsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_not_exists(this);
}

void AthenaParser::If_not_existsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_not_exists(this);
}

AthenaParser::If_not_existsContext* AthenaParser::if_not_exists() {
  If_not_existsContext *_localctx = _tracker.createInstance<If_not_existsContext>(_ctx, getState());
  enterRule(_localctx, 242, AthenaParser::RuleIf_not_exists);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1531);
    match(AthenaParser::IF);
    setState(1532);
    match(AthenaParser::NOT);
    setState(1533);
    match(AthenaParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_existsContext ------------------------------------------------------------------

AthenaParser::If_existsContext::If_existsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::If_existsContext::IF() {
  return getToken(AthenaParser::IF, 0);
}

tree::TerminalNode* AthenaParser::If_existsContext::EXISTS() {
  return getToken(AthenaParser::EXISTS, 0);
}


size_t AthenaParser::If_existsContext::getRuleIndex() const {
  return AthenaParser::RuleIf_exists;
}

void AthenaParser::If_existsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_exists(this);
}

void AthenaParser::If_existsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_exists(this);
}

AthenaParser::If_existsContext* AthenaParser::if_exists() {
  If_existsContext *_localctx = _tracker.createInstance<If_existsContext>(_ctx, getState());
  enterRule(_localctx, 244, AthenaParser::RuleIf_exists);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1535);
    match(AthenaParser::IF);
    setState(1536);
    match(AthenaParser::EXISTS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Or_replaceContext ------------------------------------------------------------------

AthenaParser::Or_replaceContext::Or_replaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::Or_replaceContext::OR() {
  return getToken(AthenaParser::OR, 0);
}

tree::TerminalNode* AthenaParser::Or_replaceContext::REPLACE() {
  return getToken(AthenaParser::REPLACE, 0);
}


size_t AthenaParser::Or_replaceContext::getRuleIndex() const {
  return AthenaParser::RuleOr_replace;
}

void AthenaParser::Or_replaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOr_replace(this);
}

void AthenaParser::Or_replaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOr_replace(this);
}

AthenaParser::Or_replaceContext* AthenaParser::or_replace() {
  Or_replaceContext *_localctx = _tracker.createInstance<Or_replaceContext>(_ctx, getState());
  enterRule(_localctx, 246, AthenaParser::RuleOr_replace);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1538);
    match(AthenaParser::OR);
    setState(1539);
    match(AthenaParser::REPLACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- From_inContext ------------------------------------------------------------------

AthenaParser::From_inContext::From_inContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* AthenaParser::From_inContext::FROM() {
  return getToken(AthenaParser::FROM, 0);
}

tree::TerminalNode* AthenaParser::From_inContext::IN() {
  return getToken(AthenaParser::IN, 0);
}


size_t AthenaParser::From_inContext::getRuleIndex() const {
  return AthenaParser::RuleFrom_in;
}

void AthenaParser::From_inContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFrom_in(this);
}

void AthenaParser::From_inContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<AthenaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFrom_in(this);
}

AthenaParser::From_inContext* AthenaParser::from_in() {
  From_inContext *_localctx = _tracker.createInstance<From_inContext>(_ctx, getState());
  enterRule(_localctx, 248, AthenaParser::RuleFrom_in);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1541);
    _la = _input->LA(1);
    if (!(_la == AthenaParser::FROM

    || _la == AthenaParser::IN)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool AthenaParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 92: return boolean_expressionSempred(antlrcpp::downCast<Boolean_expressionContext *>(context), predicateIndex);
    case 96: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool AthenaParser::boolean_expressionSempred(Boolean_expressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 3);
    case 1: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool AthenaParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 4);
    case 3: return precpred(_ctx, 3);
    case 4: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

void AthenaParser::initialize() {
  ::antlr4::internal::call_once(athenaparserParserOnceFlag, athenaparserParserInitialize);
}
